<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Smrf.NodeXL.ApplicationUtil</name>
    </assembly>
    <members>
        <member name="T:Smrf.AppLib.ArgumentChecker">
             <summary>
             Contains methods that check method arguments and property values.
             </summary>
            
             <remarks>
             This can be used by a class that wants to check values passed to its
             property setters and arguments passed to its methods.  The CheckXXX()
             methods in this class throw an exception if a parameter value or method
             argument is invalid.
            
             <para>
             This class is marked internal to avoid compiler error CS0433 ("The
             type ... exists in both ...") when an executable references two or more
             assemblies that use this class.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.#ctor(System.String)">
             <summary>
             Initializes a new instance of the ArgumentChecker class.
             </summary>
            
             <param name="sOwnerClassName">
             Class name of the object that created this object.  The class name gets
             prepended to all exception messages.  Sample: "MyClass".
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotNull(System.String,System.Object)">
             <summary>
             Throws an exception if a property value is null.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotEmpty(System.String,System.String)">
             <summary>
             Throws an exception if a string property value is null or has a length
             of zero.
             </summary>
            
             <param name="sPropertyName">
             Name of the string property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Double)">
             <summary>
             Throws an exception if a Double property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Decimal)">
             <summary>
             Throws an exception if a Decimal property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="decPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotNegative(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is negative.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
            
             <param name="sInvalidValue">
             Invalid value for <paramref name="sPropertyValue" />.  Can't be null.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iInvalidValue">
             Invalid value for <paramref name="iPropertyValue" />.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Int32,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="iMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Single,System.Single,System.Single)">
             <summary>
             Throws an exception if a Single property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="fPropertyValue">
             Property value to check.
             </param>
            
             <param name="fMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="fMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Double,System.Double,System.Double)">
             <summary>
             Throws an exception if a Double property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
            
             <param name="dMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="dMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyIsDefined(System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a property value is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oPropertyValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentNotNull(System.String,System.String,System.Object)">
             <summary>
             Throws an exception if a method argument is null.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentNotEmpty(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string method argument is null or has a length
             of zero.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="sArgumentValue">
             Argument value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Double)">
             <summary>
             Throws an exception if a Double method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="dArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentInRange(System.String,System.String,System.Double,System.Double,System.Double)">
             <summary>
             Throws an exception if a Double method argument is not within a
             specified range.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="dArgumentValue">
             Argument to check.
             </param>
            
             <param name="dMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="dMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentIsDefined(System.String,System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a method argument is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oArgumentValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is an inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Smrf.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is no inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Smrf.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is an inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Smrf.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is no inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Smrf.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.ArgumentChecker.m_sOwnerClassName">
            Class name of the object that created this object.
        </member>
        <member name="T:Smrf.AppLib.ColorPicker">
             <summary>
             Represents a user control that allows the user to pick a color.
             </summary>
            
             <remarks>
             The user control consists of a panel that displays the current color and a
             button that opens the standard ColorDialog for editing the color.
            
             <para>
             Use the <see cref="P:Smrf.AppLib.ColorPicker.Color"/> property to set the initial color after the
             user control is created.  If you are just displaying the color and don't
             want the user to edit it, set <see cref="P:Smrf.AppLib.ColorPicker.ShowButton"/> to false to hide
             the button.  A <see cref="E:Smrf.AppLib.ColorPicker.ColorChanged"/> event is fired when the user
             edits the color.  Read the <see cref="P:Smrf.AppLib.ColorPicker.Color"/> property to get the edited
             color.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.ColorPicker.#ctor">
            <summary>
            Initializes a new instance of the ColorPicker class.
            </summary>
        </member>
        <member name="M:Smrf.AppLib.ColorPicker.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Smrf.AppLib.ColorPicker.ChangeColor">
            <summary>
            Gets a color from the user.
            </summary>
        </member>
        <member name="M:Smrf.AppLib.ColorPicker.btnColor_Click(System.Object,System.EventArgs)">
             <summary>
             Handles the Click event on the btnColor button.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ColorPicker.pnlColor_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
             <summary>
             Handles the MouseDown event on the pnlColor Panel.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ColorPicker.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.ColorPicker.m_oColorDialog">
            This is static so that custom colors will be retained between
            invocations.
        </member>
        <member name="M:Smrf.AppLib.ColorPicker.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Smrf.AppLib.ColorPicker.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Smrf.AppLib.ColorPicker.Color">
             <summary>
             Gets or sets the color being edited.
             </summary>
            
             <value>
             The color being edited.  The default is Color.White.
             </value>
        </member>
        <member name="P:Smrf.AppLib.ColorPicker.ShowButton">
             <summary>
             Gets or sets a flag indicating whether the editing button should be
             visible.
             </summary>
            
             <value>
             true if the editing button should be visible.  Set this to false to
             display a read-only color.  The default is true.
             </value>
        </member>
        <member name="P:Smrf.AppLib.ColorPicker.ColorDialog">
             <summary>
             Gets or sets the ColorDialog used by the control.
             </summary>
            
             <value>
             This is made available to the application so that all parts of the
             application can use the same ColorDialog.  If different instances of
             ColorDialog are used, any custom colors created in one instance will
             not be available in the others.
             </value>
        </member>
        <member name="E:Smrf.AppLib.ColorPicker.ColorChanged">
             <summary>
             Occurs when the user edits the color.
             </summary>
            
             <remarks>
             Read the <see cref="P:Smrf.AppLib.ColorPicker.Color"/> property to get the edited color.
             </remarks>
        </member>
        <member name="T:Smrf.AppLib.ComboBoxPlus">
            <summary>
            Represents a ComboBox with additional features.
            </summary>
        </member>
        <member name="M:Smrf.AppLib.ComboBoxPlus.#ctor">
            <summary>
            Initializes a new instance of the ComboBoxPlus class.
            </summary>
        </member>
        <member name="M:Smrf.AppLib.ComboBoxPlus.PopulateWithEnumValues(System.Type,System.Boolean)">
             <summary>
             Populates the ComboBox with all values in an enumeration.
             </summary>
            
             <param name="enumType">
             Enumeration to populate the ComboBox with.
             </param>
            
             <param name="formatForUser">
             If true, spaces are inserted between each word in the enum values.  The
             value "DaysActiveInNewsgroup" gets displayed as "Days active in
             newsgroup", for example.  If false, the values are displayed as is:
             "DaysActiveInNewsgroup", for example.
             </param>
            
             <remarks>
             This method populates the ComboBox with all values in an enumeration.
             The user sees the string version of each value in the list.  The
             <see cref="P:System.Windows.Forms.ListControl.SelectedValue"/> property returns the selected
             value in the enumeration.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.ComboBoxPlus.PopulateWithObjectsAndText(System.Object[])">
             <summary>
             Populates the ComboBox with arbitrary objects and associated text.
             </summary>
            
             <param name="objectTextPairs">
             One or more object/text pairs.  The text is what gets displayed in the
             ComboBox.  The associated object, which can be of any type, is hidden
             from the user but can be retrieved using the <see cref="P:System.Windows.Forms.ListControl.SelectedValue"/> property.
             </param>
            
             <remarks>
             When you populate the ComboBox with this method, you can set and get
             the selected object with the <see cref="P:System.Windows.Forms.ListControl.SelectedValue"/>
             property.
             </remarks>
            
             <example>
             This example populates a ComboBox with three items.  The user sees
             "None", "10%", and "20%" in the list.  The <see cref="P:System.Windows.Forms.ListControl.SelectedValue"/> property returns either 0, 0.1, or
             0.2, depending on which item the user has selected.
            
             <code>
             comboBoxPlus.PopulateWithObjectsAndText(
             0, "None", 0.1, "10%", 0.2, "20%");
             </code>
            
             </example>
        </member>
        <member name="M:Smrf.AppLib.ComboBoxPlus.SetTextIfEmpty(System.String)">
             <summary>
             Sets the ComboBox's Text property to a specified value if the Text is
             empty.
             </summary>
            
             <param name="newText">
             New text to set.
             </param>
            
             <remarks>
             If the Text is not empty, this method does nothing.
             </remarks>
        </member>
        <member name="T:Smrf.AppLib.FormPlus">
             <summary>
             Represents a Form with additional features.
             </summary>
            
             <remarks>
             This class contains a set of methods for displaying messages and validating
             controls.  It also implements an <see cref="M:Smrf.AppLib.FormPlus.OnFirstActivated"/> virtual
             method that the derived class can use to run time-consuming initialization
             code without preventing the form from appearing.
            
             <para>
             Most of the functionality in this class is also avaialable as a set of
             static methods in the <see cref="T:Smrf.AppLib.FormUtil"/> class.
             </para>
            
             </remarks>
            
             <seealso cref="T:Smrf.AppLib.FormUtil"/>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.#ctor">
            <summary>
            Initializes a new instance of the FormPlus class.
            </summary>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.ShowWarning(System.String)">
             <summary>
             Displays text in a warning message box.
             </summary>
            
             <param name="sText">
             Text to show.
             </param>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.ShowInformation(System.String)">
             <summary>
             Displays text in an information message box.
             </summary>
            
             <param name="sText">
             Text to show.
             </param>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.ShowError(System.String)">
             <summary>
             Displays text in an error message box.
             </summary>
            
             <param name="sText">
             Text to show.
             </param>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.EnableControls(System.Boolean,System.Windows.Forms.Control.ControlCollection)">
             <summary>
             Enables or disables the controls in a collection.
             </summary>
            
             <param name="bEnable">
             true to enable.
             </param>
            
             <param name="oControls">
             The controls to enable or disable.
             </param>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.EnableControls(System.Boolean,System.Windows.Forms.Control[])">
             <summary>
             Enables or disables a set of controls.
             </summary>
            
             <param name="bEnable">
             true to enable.
             </param>
            
             <param name="aoControls">
             The controls to enable or disable.
             </param>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.FindControlByName(System.String)">
             <summary>
             Finds a control on the form.
             </summary>
            
             <param name="sName">
             Value of the control's Name property.
             </param>
            
             <returns>
             The specified control.
             </returns>
            
             <remarks>
             This method searches for the specified control by recursing through the
             form's child controls.  If the control is not found, an exception is
             thrown.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.FindControlByName(System.String,System.Windows.Forms.Control.ControlCollection,System.Windows.Forms.Control@)">
             <summary>
             Finds a control on the form.
             </summary>
            
             <param name="sName">
             Value of the control's Name property.
             </param>
            
             <param name="oChildControls">
             Control collection to recursively search.
             </param>
            
             <param name="oControl">
             Where the found control gets stored.
             </param>
            
             <returns>
             true if the specified control is found.
             </returns>
            
             <remarks>
             This method searches for the specified control by recursing through
             <paramref name="oChildControls" />.  If the control is found, it's
             stored at <paramref name="oControl" /> and true is returned.
             Otherwise, false is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.EnsureVisible">
             <summary>
             Ensures that the form is within the working area of the screen.
             </summary>
            
             <remarks>
             This method resizes the form if it is wider or taller than the screen's
             working area, and moves the form if an edge is outside the screen's
             working area.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.CheckAllCheckBoxes(System.Windows.Forms.Control,System.Boolean)">
             <summary>
             Checks or unchecks all descendent CheckBox controls.
             </summary>
            
             <param name="oParentControl">
             Control whose descendent CheckBoxes should be checked or unchecked.
             </param>
            
             <param name="bCheck">
             true to check all descendent CheckBoxes, false to uncheck them.
             </param>
            
             <remarks>
             This method recurses through all descendents of <paramref
             name="oParentControl" />.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.CheckCheckBoxes(System.Boolean,System.Windows.Forms.CheckBox[])">
             <summary>
             Checks or unchecks all specified CheckBox controls.
             </summary>
            
             <param name="bCheck">
             true to check the CheckBoxes, false to uncheck them.
             </param>
            
             <param name="aoCheckBoxes">
             The CheckBoxes to check or uncheck.
             </param>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.TrimTextBox(System.Windows.Forms.TextBox)">
             <summary>
             Removes leading and trailing spaces from a TextBox.
             </summary>
            
             <param name="oTextBox">
             TextBox to remove spaces from.
             </param>
            
             <returns>
             The trimmed TextBox text.
             </returns>
            
             <remarks>
             This method does not perform any validation.  Use it on a TextBox that
             can contain an empty string.  To validate a TextBox that must contain
             text, use <see cref="M:Smrf.AppLib.FormPlus.ValidateRequiredTextBox(System.Windows.Forms.TextBox,System.String,System.String@)"/> instead of this
             method.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.ValidateRequiredTextBox(System.Windows.Forms.TextBox,System.String,System.String@)">
             <summary>
             Validates a TextBox that must contain text.
             </summary>
            
             <param name="oTextBox">
             TextBox to validate.
             </param>
            
             <param name="sErrorMessage">
             Error message to display if validation fails.
             </param>
            
             <param name="sTrimmedText">
             Where the trimmed text gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the TextBox text is empty after being trimmed, <paramref
             name="sErrorMessage" /> is displayed and false is returned.  Otherwise,
             the TextBox text is trimmed and true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.ValidateRequiredComboBox(System.Windows.Forms.ComboBox,System.String,System.String@)">
             <summary>
             Validates a ComboBox that must contain text.
             </summary>
            
             <param name="oComboBox">
             Control to validate.
             </param>
            
             <param name="sErrorMessage">
             Error message to display if validation fails.
             </param>
            
             <param name="sTrimmedText">
             Where the trimmed text gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the ComboBox text is empty after being trimmed, <paramref
             name="sErrorMessage" /> is displayed and false is returned.  Otherwise,
             the control text is trimmed and true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.ValidateInt32TextBox(System.Windows.Forms.TextBox,System.Int32,System.Int32,System.String,System.Int32@)">
             <summary>
             Validates a TextBox that must contain an Int32.
             </summary>
            
             <param name="oTextBox">
             TextBox to validate.
             </param>
            
             <param name="iMinValue">
             Minimum valid value.
             </param>
            
             <param name="iMaxValue">
             Maximum valid value.
             </param>
            
             <param name="sErrorMessage">
             Error message to display if validation fails.
             </param>
            
             <param name="iInt32">
             Where the validated Int32 gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the TextBox does not contain an Int32 within the specified range,
             <paramref name="sErrorMessage" /> is displayed and false is returned.
             Otherwise, the TextBox text is trimmed and true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.ValidateDoubleTextBox(System.Windows.Forms.TextBox,System.Double,System.Double,System.String,System.Double@)">
             <summary>
             Validates a TextBox that must contain a Double.
             </summary>
            
             <param name="oTextBox">
             TextBox to validate.
             </param>
            
             <param name="dMinValue">
             Minimum valid value.
             </param>
            
             <param name="dMaxValue">
             Maximum valid value.
             </param>
            
             <param name="sErrorMessage">
             Error message to display if validation fails.
             </param>
            
             <param name="dDouble">
             Where the validated Double gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the TextBox does not contain a Double within the specified range,
             <paramref name="sErrorMessage" /> is displayed and false is returned.
             Otherwise, the TextBox text is trimmed and true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.ValidateDirectoryTextBox(System.Windows.Forms.TextBox,System.String,System.String@)">
             <summary>
             Validates a TextBox that must contain an existing directory.
             </summary>
            
             <param name="oTextBox">
             TextBox to validate.
             </param>
            
             <param name="sErrorMessage">
             Error message to display if validation fails.
             </param>
            
             <param name="sDirectory">
             Where the trimmed directory gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the TextBox does not contain an existing directory,
             <paramref name="sErrorMessage" /> is displayed and false is returned.
             Otherwise, the TextBox text is trimmed and true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.ValidateFileTextBox(System.Windows.Forms.TextBox,System.String,System.String@)">
             <summary>
             Validates a TextBox that must contain the name of an existing file.
             </summary>
            
             <param name="oTextBox">
             TextBox to validate.
             </param>
            
             <param name="sErrorMessage">
             Error message to display if validation fails.
             </param>
            
             <param name="sFile">
             Where the trimmed file name gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the TextBox does not contain the name of an existing file,
             <paramref name="sErrorMessage" /> is displayed and false is returned.
             Otherwise, the TextBox text is trimmed and true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.ValidateListBoxSelection(System.Windows.Forms.ListBox,System.String)">
             <summary>
             Validates a ListBox that must have at least one item selected.
             </summary>
            
             <param name="oListBox">
             ListBox to validate.
             </param>
            
             <param name="sErrorMessage">
             Error message to display if validation fails.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the ListBox does not have a selected item, <paramref
             name="sErrorMessage" /> is displayed and false is returned.  Otherwise,
             true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.ValidateNumericUpDown(System.Windows.Forms.NumericUpDown,System.String,System.Decimal@)">
             <summary>
             Validates a NumericUpDown control that contains a Decimal.
             </summary>
            
             <param name="oNumericUpDown">
             NumericUpDown to validate.
             </param>
            
             <param name="sValueDescription">
             Description of what the control contains, in lower case.  Sample:
             "a length".
             </param>
            
             <param name="decValue">
             Where the validated value gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the NumericUpDown has empty Text or contains a number outside the
             control's Minimum and Maximum range, an error message is displayed and
             false is returned.  Otherwise, true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.ValidateNumericUpDown(System.Windows.Forms.NumericUpDown,System.String,System.Double@)">
             <summary>
             Validates a NumericUpDown control that contains a Double.
             </summary>
            
             <param name="oNumericUpDown">
             NumericUpDown to validate.
             </param>
            
             <param name="sValueDescription">
             Description of what the control contains, in lower case.  Sample:
             "a length".
             </param>
            
             <param name="dValue">
             Where the validated value gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the NumericUpDown has empty Text or contains a number outside the
             control's Minimum and Maximum range, an error message is displayed and
             false is returned.  Otherwise, true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.ValidateNumericUpDown(System.Windows.Forms.NumericUpDown,System.String,System.Single@)">
             <summary>
             Validates a NumericUpDown control that contains a Single.
             </summary>
            
             <param name="oNumericUpDown">
             NumericUpDown to validate.
             </param>
            
             <param name="sValueDescription">
             Description of what the control contains, in lower case.  Sample:
             "a length".
             </param>
            
             <param name="fValue">
             Where the validated value gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the NumericUpDown has empty Text or contains a number outside the
             control's Minimum and Maximum range, an error message is displayed and
             false is returned.  Otherwise, true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.ValidateNumericUpDown(System.Windows.Forms.NumericUpDown,System.String,System.Int32@)">
             <summary>
             Validates a NumericUpDown control that contains an Int32.
             </summary>
            
             <param name="oNumericUpDown">
             NumericUpDown to validate.
             </param>
            
             <param name="sValueDescription">
             Description of what the control contains, in lower case.  Sample:
             "a length".
             </param>
            
             <param name="iValue">
             Where the validated value gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the NumericUpDown has empty Text or contains a number outside the
             control's Minimum and Maximum range, an error message is displayed and
             false is returned.  Otherwise, true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.OnInvalidTextBox(System.Windows.Forms.TextBox,System.String)">
             <summary>
             Handles a a TextBox that failed validation.
             </summary>
            
             <param name="oTextBox">
             TextBox.
             </param>
            
             <param name="sErrorMessage">
             Error message to display.
             </param>
            
             <returns>
             Always returns false.
             </returns>
            
             <remarks>
             This method displays an error message, sets focus to the TextBox, and
             returns false.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.OnInvalidComboBox(System.Windows.Forms.ComboBox,System.String)">
             <summary>
             Handles a a ComboBox that failed validation.
             </summary>
            
             <param name="oComboBox">
             ComboBox.
             </param>
            
             <param name="sErrorMessage">
             Error message to display.
             </param>
            
             <returns>
             Always returns false.
             </returns>
            
             <remarks>
             This method displays an error message, sets focus to the ComboBox, and
             returns false.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.OnInvalidDateTimePicker(System.Windows.Forms.DateTimePicker,System.String)">
             <summary>
             Handles a a DateTimePicker that failed validation.
             </summary>
            
             <param name="oDateTimePicker">
             DateTimePicker.
             </param>
            
             <param name="sErrorMessage">
             Error message to display.
             </param>
            
             <returns>
             Always returns false.
             </returns>
            
             <remarks>
             This method displays an error message, sets focus to the
             DateTimePicker, and returns false.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.OnInvalidNumericUpDown(System.Windows.Forms.NumericUpDown,System.String)">
             <summary>
             Handles a a NumericUpDown that failed validation.
             </summary>
            
             <param name="oNumericUpDown">
             NumericUpDown control.
             </param>
            
             <param name="sErrorMessage">
             Error message to display.
             </param>
            
             <returns>
             Always returns false.
             </returns>
            
             <remarks>
             This method displays an error message, sets focus to the NumericUpDown
             control, and returns false.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.OnActivated(System.EventArgs)">
            <summary>
            Handles the Activated event.
            </summary>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.OnInvalidControl(System.Windows.Forms.Control,System.String)">
             <summary>
             Handles a a control that failed validation.
             </summary>
            
             <param name="control">
             The invalid control.
             </param>
            
             <param name="errorMessage">
             Error message to display.
             </param>
            
             <returns>
             Always returns false.
             </returns>
            
             <remarks>
             This method displays an error message, sets focus to the control, and
             returns false.
            
             <para>
             This class contains other OnInvalidXXX() methods that are specialized
             for specific control types.  This method can be used for controls that
             do not have specialized methods.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.OnFirstActivated">
             <summary>
             Gets called the first time the form is activated.
             </summary>
            
             <remarks>
             Override this method to perform time-consuming initialization tasks
             without preventing the form from appearing.
            
             <para>
             If a form executes time-consuming code in its constructor (such as
             getting data from a network server), the form doesn't appear until the
             code has completed, leaving the user with no idea what's going on.
             Waiting until the form is first activated to run lengthy code solves
             this, because the form is visible at that point.
             </para>
            
             <para>
             Do not put time-consuming code in an OnLoad() handler, because the form
             isn't visible when OnLoad() runs.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.EnsureVisibleOnVisibleChanged(System.Object,System.EventArgs)">
             <summary>
             VisibleChanged handler that ensures that the form is not off the screen
             when it's made visible.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
            
             <remarks>
             If the form has a FormBorderStyle of SizableToolWindow, you should set
             the form's VisibleChanged handler to this method.  This is to work
             around an apparent bug in WinForms: If FormBorderStyle is
             SizableToolWindow, you can drag the window below the bottom of the
             screen, where it becomes invisible and impossible to retrieve.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.PreventClosure(System.Object,System.ComponentModel.CancelEventArgs)">
             <summary>
             Closing handler that prevents the form from closing.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
            
             <remarks>
             If the form should be hidden rather than closed when the user clicks
             the X in the form's upper-right corner, set the form's Closing handler
             to this method.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormPlus.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.FormPlus.m_bActivated">
            true if OnActivated() has been called at least once.
        </member>
        <member name="P:Smrf.AppLib.FormPlus.ApplicationName">
             <summary>
             Gets or sets the name of the application.
             </summary>
            
             <value>
             The name of the application.  Can't be null, but can be empty.
             </value>
            
             <remarks>
             The application name is used in the message boxes opened by this
             class's methods.
            
             <para>
             By default, the application name is obtained from the
             "assembly: AssemblyProduct" attribute in the application's
             AssemblyInfo.cs file.  If you want to use a different application name,
             set this property in the form's constructor.
             </para>
            
             </remarks>
        </member>
        <member name="T:Smrf.AppLib.FormUtil">
             <summary>
             Form utility methods.
             </summary>
            
             <remarks>
             This class contains a set of static methods for displaying messages and
             validating controls.  It is meant for use by <see cref="T:System.Windows.Forms.Form"/> and <see cref="T:System.Windows.Forms.UserControl"/> classes.
            
             <para>
             Most of the functionality in this class is also in the <see cref="T:Smrf.AppLib.FormPlus"/> class, which can serve as a base class for derived
             forms.
             </para>
            
             </remarks>
            
             <seealso cref="T:Smrf.AppLib.FormPlus"/>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.#cctor">
            <summary>
            Static constructor for the FormUtil class.
            </summary>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.ShowWarning(System.String)">
             <summary>
             Displays text in a warning message box.
             </summary>
            
             <param name="sText">
             Text to show.
             </param>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.ShowInformation(System.String)">
             <summary>
             Displays text in an information message box.
             </summary>
            
             <param name="sText">
             Text to show.
             </param>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.ShowError(System.String)">
             <summary>
             Displays text in an error message box.
             </summary>
            
             <param name="sText">
             Text to show.
             </param>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.EnableControls(System.Boolean,System.Windows.Forms.Control.ControlCollection)">
             <summary>
             Enables or disables the controls in a collection.
             </summary>
            
             <param name="bEnable">
             true to enable.
             </param>
            
             <param name="oControls">
             The controls to enable or disable.
             </param>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.EnableControls(System.Boolean,System.Windows.Forms.Control[])">
             <summary>
             Enables or disables a set of controls.
             </summary>
            
             <param name="bEnable">
             true to enable.
             </param>
            
             <param name="aoControls">
             The controls to enable or disable.
             </param>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.TrimTextBox(System.Windows.Forms.TextBox)">
             <summary>
             Removes leading and trailing spaces from a TextBox.
             </summary>
            
             <param name="oTextBox">
             TextBox to remove spaces from.
             </param>
            
             <returns>
             The trimmed TextBox text.
             </returns>
            
             <remarks>
             This method does not perform any validation.  Use it on a TextBox that
             can contain an empty string.  To validate a TextBox that must contain
             text, use <see cref="M:Smrf.AppLib.FormUtil.ValidateRequiredTextBox(System.Windows.Forms.TextBox,System.String,System.String@)"/> instead of this
             method.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.ValidateRequiredTextBox(System.Windows.Forms.TextBox,System.String,System.String@)">
             <summary>
             Validates a TextBox that must contain text.
             </summary>
            
             <param name="oTextBox">
             TextBox to validate.
             </param>
            
             <param name="sErrorMessage">
             Error message to display if validation fails.
             </param>
            
             <param name="sTrimmedText">
             Where the trimmed text gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the TextBox text is empty after being trimmed, <paramref
             name="sErrorMessage" /> is displayed and false is returned.  Otherwise,
             the TextBox text is trimmed and true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.ValidateRequiredComboBox(System.Windows.Forms.ComboBox,System.String,System.String@)">
             <summary>
             Validates a ComboBox that must contain text.
             </summary>
            
             <param name="oComboBox">
             Control to validate.
             </param>
            
             <param name="sErrorMessage">
             Error message to display if validation fails.
             </param>
            
             <param name="sTrimmedText">
             Where the trimmed text gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the ComboBox text is empty after being trimmed, <paramref
             name="sErrorMessage" /> is displayed and false is returned.  Otherwise,
             the control text is trimmed and true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.ValidateInt32TextBox(System.Windows.Forms.TextBox,System.Int32,System.Int32,System.String,System.Int32@)">
             <summary>
             Validates a TextBox that must contain an Int32.
             </summary>
            
             <param name="oTextBox">
             TextBox to validate.
             </param>
            
             <param name="iMinValue">
             Minimum valid value.
             </param>
            
             <param name="iMaxValue">
             Maximum valid value.
             </param>
            
             <param name="sErrorMessage">
             Error message to display if validation fails.
             </param>
            
             <param name="iInt32">
             Where the validated Int32 gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the TextBox does not contain an Int32 within the specified range,
             <paramref name="sErrorMessage" /> is displayed and false is returned.
             Otherwise, the TextBox text is trimmed and true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.ValidateDoubleTextBox(System.Windows.Forms.TextBox,System.Double,System.Double,System.String,System.Double@)">
             <summary>
             Validates a TextBox that must contain a Double.
             </summary>
            
             <param name="oTextBox">
             TextBox to validate.
             </param>
            
             <param name="dMinValue">
             Minimum valid value.
             </param>
            
             <param name="dMaxValue">
             Maximum valid value.
             </param>
            
             <param name="sErrorMessage">
             Error message to display if validation fails.
             </param>
            
             <param name="dDouble">
             Where the validated Double gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the TextBox does not contain a Double within the specified range,
             <paramref name="sErrorMessage" /> is displayed and false is returned.
             Otherwise, the TextBox text is trimmed and true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.ValidateDirectoryTextBox(System.Windows.Forms.TextBox,System.String,System.String@)">
             <summary>
             Validates a TextBox that must contain an existing directory.
             </summary>
            
             <param name="oTextBox">
             TextBox to validate.
             </param>
            
             <param name="sErrorMessage">
             Error message to display if validation fails.
             </param>
            
             <param name="sDirectory">
             Where the trimmed directory gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the TextBox does not contain an existing directory,
             <paramref name="sErrorMessage" /> is displayed and false is returned.
             Otherwise, the TextBox text is trimmed and true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.ValidateFileTextBox(System.Windows.Forms.TextBox,System.String,System.String@)">
             <summary>
             Validates a TextBox that must contain the name of an existing file.
             </summary>
            
             <param name="oTextBox">
             TextBox to validate.
             </param>
            
             <param name="sErrorMessage">
             Error message to display if validation fails.
             </param>
            
             <param name="sFile">
             Where the trimmed file name gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the TextBox does not contain the name of an existing file,
             <paramref name="sErrorMessage" /> is displayed and false is returned.
             Otherwise, the TextBox text is trimmed and true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.ValidateListBoxSelection(System.Windows.Forms.ListBox,System.String)">
             <summary>
             Validates a ListBox that must have at least one item selected.
             </summary>
            
             <param name="oListBox">
             ListBox to validate.
             </param>
            
             <param name="sErrorMessage">
             Error message to display if validation fails.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the ListBox does not have a selected item, <paramref
             name="sErrorMessage" /> is displayed and false is returned.  Otherwise,
             true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.ValidateNumericUpDown(System.Windows.Forms.NumericUpDown,System.String,System.Decimal@)">
             <summary>
             Validates a NumericUpDown control that contains a Decimal.
             </summary>
            
             <param name="oNumericUpDown">
             NumericUpDown to validate.
             </param>
            
             <param name="sValueDescription">
             Description of what the control contains, in lower case.  Sample:
             "a length".
             </param>
            
             <param name="decValue">
             Where the validated value gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the NumericUpDown has empty Text or contains a number outside the
             control's Minimum and Maximum range, an error message is displayed and
             false is returned.  Otherwise, true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.ValidateNumericUpDown(System.Windows.Forms.NumericUpDown,System.String,System.Double@)">
             <summary>
             Validates a NumericUpDown control that contains a Double.
             </summary>
            
             <param name="oNumericUpDown">
             NumericUpDown to validate.
             </param>
            
             <param name="sValueDescription">
             Description of what the control contains, in lower case.  Sample:
             "a length".
             </param>
            
             <param name="dValue">
             Where the validated value gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the NumericUpDown has empty Text or contains a number outside the
             control's Minimum and Maximum range, an error message is displayed and
             false is returned.  Otherwise, true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.ValidateNumericUpDown(System.Windows.Forms.NumericUpDown,System.String,System.Single@)">
             <summary>
             Validates a NumericUpDown control that contains a Single.
             </summary>
            
             <param name="oNumericUpDown">
             NumericUpDown to validate.
             </param>
            
             <param name="sValueDescription">
             Description of what the control contains, in lower case.  Sample:
             "a length".
             </param>
            
             <param name="fValue">
             Where the validated value gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the NumericUpDown has empty Text or contains a number outside the
             control's Minimum and Maximum range, an error message is displayed and
             false is returned.  Otherwise, true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.ValidateNumericUpDown(System.Windows.Forms.NumericUpDown,System.String,System.Int32@)">
             <summary>
             Validates a NumericUpDown control that contains an Int32.
             </summary>
            
             <param name="oNumericUpDown">
             NumericUpDown to validate.
             </param>
            
             <param name="sValueDescription">
             Description of what the control contains, in lower case.  Sample:
             "a length".
             </param>
            
             <param name="iValue">
             Where the validated value gets stored.
             </param>
            
             <returns>
             true if validation passes.
             </returns>
            
             <remarks>
             If the NumericUpDown has empty Text or contains a number outside the
             control's Minimum and Maximum range, an error message is displayed and
             false is returned.  Otherwise, true is returned.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.OnInvalidTextBox(System.Windows.Forms.TextBox,System.String)">
             <summary>
             Handles a a TextBox that failed validation.
             </summary>
            
             <param name="oTextBox">
             TextBox.
             </param>
            
             <param name="sErrorMessage">
             Error message to display.
             </param>
            
             <returns>
             Always returns false.
             </returns>
            
             <remarks>
             This method displays an error message, sets focus to the TextBox, and
             returns false.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.OnInvalidComboBox(System.Windows.Forms.ComboBox,System.String)">
             <summary>
             Handles a a ComboBox that failed validation.
             </summary>
            
             <param name="oComboBox">
             ComboBox.
             </param>
            
             <param name="sErrorMessage">
             Error message to display.
             </param>
            
             <returns>
             Always returns false.
             </returns>
            
             <remarks>
             This method displays an error message, sets focus to the ComboBox, and
             returns false.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.OnInvalidDateTimePicker(System.Windows.Forms.DateTimePicker,System.String)">
             <summary>
             Handles a a DateTimePicker that failed validation.
             </summary>
            
             <param name="oDateTimePicker">
             DateTimePicker.
             </param>
            
             <param name="sErrorMessage">
             Error message to display.
             </param>
            
             <returns>
             Always returns false.
             </returns>
            
             <remarks>
             This method displays an error message, sets focus to the
             DateTimePicker, and returns false.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.OnInvalidNumericUpDown(System.Windows.Forms.NumericUpDown,System.String)">
             <summary>
             Handles a a NumericUpDown that failed validation.
             </summary>
            
             <param name="oNumericUpDown">
             NumericUpDown control.
             </param>
            
             <param name="sErrorMessage">
             Error message to display.
             </param>
            
             <returns>
             Always returns false.
             </returns>
            
             <remarks>
             This method displays an error message, sets focus to the NumericUpDown
             control, and returns false.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.FormUtil.OnInvalidControl(System.Windows.Forms.Control,System.String)">
             <summary>
             Handles a a control that failed validation.
             </summary>
            
             <param name="oControl">
             Control.
             </param>
            
             <param name="sErrorMessage">
             Error message to display.
             </param>
            
             <returns>
             Always returns false.
             </returns>
            
             <remarks>
             This method displays an error message, sets focus to the control, and
             returns false.
             </remarks>
        </member>
        <member name="F:Smrf.AppLib.FormUtil.m_sApplicationName">
            String returned by the ApplicationName property.
        </member>
        <member name="P:Smrf.AppLib.FormUtil.ApplicationName">
             <summary>
             Gets or sets the name of the application.
             </summary>
            
             <value>
             The name of the application.  Can't be null, but can be empty.
             </value>
            
             <remarks>
             The application name is used in the message boxes opened by this
             class's methods.
            
             <para>
             By default, the application name is obtained from the
             "assembly: AssemblyProduct" attribute in the application's
             AssemblyInfo.cs file.  If you want to use a different application name,
             set this property before using any other class methods.
             </para>
            
             </remarks>
        </member>
        <member name="T:Smrf.AppLib.HelpLinkLabel">
             <summary>
             Represents a LinkLabel that displays its Tag text in a message box when
             clicked.
             </summary>
            
             <remarks>
             Clicking the LinkLabel opens an "information" message box that shows the
             text stored in the LinkLabel's Tag property.  If the Tag property is not
             set to a String, the click does nothing.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.HelpLinkLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.AppLib.HelpLinkLabel"/> class.
            </summary>
        </member>
        <member name="M:Smrf.AppLib.HelpLinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
             <summary>
             Handles the LinkClicked event.
             </summary>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.AppLib.HelpLinkLabel.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.AppLib.ListControlUtil">
            <summary>
            Utility methods for working with list controls.
            </summary>
        </member>
        <member name="M:Smrf.AppLib.ListControlUtil.PopulateWithEnumValues(System.Windows.Forms.ListControl,System.Type,System.Boolean)">
             <summary>
             Populates a ListControl with all values in an enumeration.
             </summary>
            
             <param name="listControl">
             ListControl to populate.
             </param>
            
             <param name="enumType">
             Enumeration to populate the ListControl with.
             </param>
            
             <param name="formatForUser">
             If true, spaces are inserted between each word in the enum values.  The
             value "DaysActiveInNewsgroup" gets displayed as "Days active in
             newsgroup", for example.  If false, the values are displayed as is:
             "DaysActiveInNewsgroup", for example.
             </param>
            
             <remarks>
             This method populates a ListControl with all values in an enumeration.
             The user sees the string version of each value in the list.  The
             <see cref="P:System.Windows.Forms.ListControl.SelectedValue"/> property returns the selected
             value in the enumeration.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.ListControlUtil.PopulateWithObjectsAndText(System.Windows.Forms.ListControl,System.Object[])">
             <summary>
             Populates a ListControl with arbitrary objects and associated text.
             </summary>
            
             <param name="listControl">
             Object to populate.
             </param>
            
             <param name="objectTextPairs">
             One or more object/text pairs.  The text is what gets displayed in the
             ListControl.  The associated object, which can be of any type, is
             hidden from the user but can be retrieved using the
             <see cref="P:System.Windows.Forms.ListControl.SelectedValue"/>
             property.
             </param>
            
             <remarks>
             When you populate a ListControl with this method, you can set and get
             the selected object with the <see cref="P:System.Windows.Forms.ListControl.SelectedValue"/>
             property.
             </remarks>
            
             <example>
             See <see cref="T:Smrf.AppLib.ComboBoxPlus"/> for an example.
             </example>
        </member>
        <member name="T:Smrf.AppLib.StartProcessLinkLabel">
             <summary>
             Represents a LinkLabel that starts a specified process when clicked.
             </summary>
            
             <remarks>
             Clicking a link in the LinkLabel causes <see cref="M:System.Diagnostics.Process.Start(System.String)"/> to be called with the text stored in the
             LinkLabel's Tag property.  If the Tag is not set to a String, the click
             does nothing.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.StartProcessLinkLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.AppLib.StartProcessLinkLabel"/>
            class.
            </summary>
        </member>
        <member name="M:Smrf.AppLib.StartProcessLinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
             <summary>
             Handles the LinkClicked event.
             </summary>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.AppLib.StartProcessLinkLabel.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.AppLib.ToolStripPlus">
            <summary>
            Represents a ToolStrip with additional features.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.ToolStripPlus.WM_MOUSEACTIVATE">
            
        </member>
        <member name="F:Smrf.AppLib.ToolStripPlus.MA_ACTIVATE">
            
        </member>
        <member name="F:Smrf.AppLib.ToolStripPlus.MA_ACTIVATEANDEAT">
            
        </member>
        <member name="F:Smrf.AppLib.ToolStripPlus.MA_NOACTIVATE">
            
        </member>
        <member name="F:Smrf.AppLib.ToolStripPlus.MA_NOACTIVATEANDEAT">
            
        </member>
        <member name="M:Smrf.AppLib.ToolStripPlus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.AppLib.ToolStripPlus"/> class.
            </summary>
        </member>
        <member name="M:Smrf.AppLib.ToolStripPlus.WndProc(System.Windows.Forms.Message@)">
             <summary>
             Processes Windows messages.
             </summary>
            
             <param name="m">
             The Windows message to process.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ToolStripPlus.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.ToolStripPlus.m_bClickThrough">
            Indicates whether click-through is used.
        </member>
        <member name="P:Smrf.AppLib.ToolStripPlus.ClickThrough">
             <summary>
             Gets or sets a flag indicating whether click-through is used.
             </summary>
            
             <value>
             true if clicking a control in the ToolStrip activates the ToolStrip AND
             clicks the clicked control.  The default is true.
             </value>
            
             <remarks>
             In a standard ToolStrip, if window B is active when a control in
             window A's ToolStrip is clicked, the click activates window A but
             doesn't click the control.  A second click on the control is then
             required.  When this property is true, only a single click is required 
             to both activate the ToolStrip and click the control.
            
             <para>
             The code to accomplish this is borrowed from Rick Brewster:
             </para>
            
             <para>
             http://blogs.msdn.com/rickbrew/archive/2006/01/09/511003.aspx
             </para>
            
             </remarks>
        </member>
        <member name="T:Smrf.AppLib.TrackBarWithDelay">
             <summary>
             TrackBar control that delays its <see cref="E:System.Windows.Forms.TrackBar.Scroll"/> event until
             the thumb has stopped moving.
             </summary>
            
             <remarks>
             This control fires a <see cref="E:System.Windows.Forms.TrackBar.Scroll"/> event <see cref="P:Smrf.AppLib.TrackBarWithDelay.ScrollDelayMs"/> milliseconds after the thumb was last moved.  Use
             this control instead of TrackBar in applications where the event handler
             code is slow and handling every <see cref="E:System.Windows.Forms.TrackBar.Scroll"/> event would
             result in sluggish performance.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.TrackBarWithDelay.#ctor">
            <summary>
            Initializes a new instance of the TrackBarWithDelay class.
            </summary>
        </member>
        <member name="M:Smrf.AppLib.TrackBarWithDelay.OnScroll(System.EventArgs)">
             <summary>
             Handles the Scroll event.
             </summary>
            
             <param name="e">
             Standard event arguments.
             </param>
        </member>
        <member name="M:Smrf.AppLib.TrackBarWithDelay.m_oDelayTimer_Tick(System.Object,System.EventArgs)">
             <summary>
             Handles the Tick event on the delay timer.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.AppLib.TrackBarWithDelay.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.TrackBarWithDelay.m_oDelayTimer">
            Timer used to delay the Scroll event.
        </member>
        <member name="P:Smrf.AppLib.TrackBarWithDelay.ScrollDelayMs">
             <summary>
             Gets or sets the delay after the thumb was last moved before the <see cref="E:System.Windows.Forms.TrackBar.Scroll"/> event fires.
             </summary>
            
             <value>
             The delay, in milliseconds.  The default value is 50 ms.
             </value>
        </member>
        <member name="T:Smrf.AppLib.OpenFileDialog2">
             <summary>
             Represents a smart OpenFileDialog that knows how to get a file name from
             the user and open an object from the file.  Abstract.
             </summary>
            
             <remarks>
             This is an abstract base class.  Each class derived from this one is
             responsible for opening one type of file and creating an object from the
             file contents.  A file type might be an image or an XML document, for
             example.
            
             A derived class must implement GetDialogTitle(), GetFilter(), and
             OpenObject().  It should also implement a public method called
             ShowDialogAndOpenXXX(), where XXX is Image or XML, for example.
             ShowDialogAndOpenXXX() should call ShowDialogAndOpenObject() in this base
             class to do most of the work.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.OpenFileDialog2.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the OpenFileDialog2 class.
             </summary>
            
             <param name="sInitialDirectory">
             Initial directory the dialog will display.  Use an empty string to let
             the dialog select an initial directory.
             </param>
            
             <param name="sInitialFileName">
             Initial file name.  Can be a complete path, a path without an
             extension, a file name, or a file name without an extension.
             </param>
        </member>
        <member name="M:Smrf.AppLib.OpenFileDialog2.ShowDialogAndOpenObject(System.Object@)">
             <summary>
             Opens a file and creates an object from the file contents.
             </summary>
            
             <param name="oObject">
             Where the object created from the file contents will be stored.
             </param>
            
             <returns>
             DialogResult.OK if the user selected a file name and the file was
             successfully opened.
             </returns>
            
             <remarks>
             This method allows the user to select a file name.  It then opens the
             file and creates an object from the file contents.  The virtual method
             OpenObject() implemented in the derived class does the actual opening.
             All other details are handled by this base-class method.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.OpenFileDialog2.GetDialogTitle">
             <summary>
             Returns the title to use for the dialog.
             </summary>
            
             <returns>
             Title to use for the dialog.  Sample: "Open XML".
             </returns>
            
             <remarks>
             Derived classes must implement this virtual method.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.OpenFileDialog2.GetFilter">
             <summary>
             Returns the filter to use for the dialog.
             </summary>
            
             <returns>
             Filter to use for the dialog.
             </returns>
            
             <remarks>
             Derived classes must implement this virtual method.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.OpenFileDialog2.OpenObject(System.String,System.Object@)">
             <summary>
             Create an object from a file.
             </summary>
            
             <param name="sFileName">
             File name to open.
             </param>
            
             <param name="oObject">
             Where the new object gets stored.
             </param>
            
             <remarks>
             Derived classes must implement this virtual method.  Any exceptions
             thrown by the derived method are caught and handled by this base class.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.OpenFileDialog2.OnOpenError(System.String)">
             <summary>
             Gets called when an error occurs while opening a file.
             </summary>
            
             <param name="sErrorDescription">
             Open error description.
             </param>
        </member>
        <member name="M:Smrf.AppLib.OpenFileDialog2.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.OpenFileDialog2.m_oOpenFileDialog">
            Common dialog.
        </member>
        <member name="P:Smrf.AppLib.OpenFileDialog2.FileName">
             <summary>
             Gets the name of the file that was opened.
             </summary>
            
             <value>
             The name of the file that was opened.
             </value>
            
             <remarks>
             This can be used by the caller after the dialog exits to determine
             which file was opened.
             </remarks>
        </member>
        <member name="T:Smrf.AppLib.SaveFileDialog2">
             <summary>
             Represents a smart SaveFileDialog that knows how to get a file name from
             the user and save an object to the file.  Abstract.
             </summary>
            
             <remarks>
             This is an abstract base class.  Each class derived from this one is
             responsible for saving one type of object, such as an image or an XML
             document.
            
             A derived class must implement GetDialogTitle(), GetFilter(), and
             SaveObject().  It should also implement a public method called
             ShowDialogAndSaveXXX(), where XXX is Image or XML, for example.
             ShowDialogAndSaveXXX() should call ShowDialogAndSaveObject() in this base
             class to do most of the work.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.SaveFileDialog2.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the SaveFileDialog2 class.
             </summary>
            
             <param name="sInitialDirectory">
             Initial directory the dialog will display.  Use an empty string to let
             the dialog select an initial directory.
             </param>
            
             <param name="sInitialFileName">
             Initial file name.  Can be a complete path, a path without an
             extension, a file name, or a file name without an extension.
             </param>
        </member>
        <member name="M:Smrf.AppLib.SaveFileDialog2.ShowDialogAndSaveObject(System.Object)">
             <summary>
             Shows the file save dialog and saves the object to the selected file.
             </summary>
            
             <param name="oObject">
             Object to save.
             </param>
            
             <returns>
             DialogResult.  DialogResult.OK if the user selected a file name and
             the object was successfully saved.
             </returns>
            
             <remarks>
             This method allows the user to select a file name and format.  It
             then saves the object in the selected format.  The virtual method
             SaveObject() implemented in the derived class does the actual saving.
             All other details are handled by this base-class method.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.SaveFileDialog2.GetNameOfFileToSave">
             <summary>
             Returns the full name of the file to save.
             </summary>
            
             <returns>
             String.  Full name of the file to save, including the extension.
             </returns>
            
             <remarks>
             This method works around an odd behavior in SaveFileDialog.  If the
             user enters a file name that contains a period, SaveFileDialog does not
             add an extension to the file name returned by the FileName property.
             If the user enters "A.B" into the file name text box and the selected
             filter is "JPEG (*.jpg)", for example, the FileName property returns
             "A.B" instead of "A.B.jpg".  It probably assumes that the user wants an
             extension of ".B", so it doesn't add an extension of its own.
            
             This method adds the extension if it's missing.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.SaveFileDialog2.GetDialogTitle(System.Object)">
             <summary>
             Returns the title to use for the dialog.
             </summary>
            
             <param name="oObjectBeingSaved">
             Object being saved.
             </param>
            
             <returns>
             Title to use for the dialog.  Sample: "Save As Image".
             </returns>
            
             <remarks>
             Derived classes must implement this virtual method.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.SaveFileDialog2.GetFilter">
             <summary>
             Returns the filter to use for the dialog.
             </summary>
            
             <returns>
             Filter to use for the dialog.
             </returns>
            
             <remarks>
             Derived classes must implement this virtual method.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.SaveFileDialog2.GetInitialFilterIndex">
             <summary>
             Returns the initial one-based filter index to use for the dialog.
             </summary>
            
             <returns>
             One-based filter index to use for the dialog.
             </returns>
            
             <remarks>
             Derived classes can optionally implement this virtual method.  The
             base-class implementation returns 1.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.SaveFileDialog2.SaveObject(System.Object,System.String)">
             <summary>
             Saves the object.
             </summary>
            
             <param name="oObject">
             Object to save.
             </param>
            
             <param name="sFileName">
             File name to save the object to.
             </param>
            
             <remarks>
             Derived classes must implement this virtual method.  Any exceptions
             thrown by the derived method are caught and handled by this base class.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.SaveFileDialog2.OnSaveError(System.String)">
             <summary>
             Gets called when an error occurs while saving the object.
             </summary>
            
             <param name="sErrorDescription">
             Save error description.
             </param>
        </member>
        <member name="M:Smrf.AppLib.SaveFileDialog2.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.SaveFileDialog2.m_oSaveFileDialog">
            Common dialog.
        </member>
        <member name="T:Smrf.AppLib.SaveImageFileDialog">
             <summary>
             Represents a dialog box for saving an image file.
             </summary>
            
             <remarks>
             Call ShowDialogAndSaveImage() to allow the user to save an image in a
             format of his choice to a location of his choice.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.SaveImageFileDialog.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the SaveImageFileDialog class.
             </summary>
            
             <param name="sInitialDirectory">
             Initial directory the dialog will display.  Use an empty string to let
             the dialog select an initial directory.
             </param>
            
             <param name="sInitialFileName">
             Initial file name.  Can be a complete path, a path without an
             extension, a file name, or a file name without an extension.
             </param>
        </member>
        <member name="M:Smrf.AppLib.SaveImageFileDialog.ShowDialogAndSaveImage(System.Drawing.Image)">
             <summary>
             Shows the file save dialog and saves the image to the selected file.
             </summary>
            
             <param name="oImage">
             Image to save.
             </param>
            
             <returns>
             DialogResult.OK if the user selected a file name and the image was
             successfully saved.
             </returns>
            
             <remarks>
             This method allows the user to select an image file name and format.
             It then saves the image in the selected format.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.SaveImageFileDialog.GetDialogTitle(System.Object)">
             <summary>
             Returns the title to use for the dialog.
             </summary>
            
             <param name="oObjectBeingSaved">
             Object being saved.
             </param>
            
             <returns>
             Title to use for the dialog.
             </returns>
        </member>
        <member name="M:Smrf.AppLib.SaveImageFileDialog.GetFilter">
             <summary>
             Returns the filter to use for the dialog.
             </summary>
            
             <returns>
             Filter to use for the dialog.
             </returns>
        </member>
        <member name="M:Smrf.AppLib.SaveImageFileDialog.GetInitialFilterIndex">
             <summary>
             Returns the initial one-based filter index to use for the dialog.
             </summary>
            
             <returns>
             One-based filter index to use for the dialog.
             </returns>
        </member>
        <member name="M:Smrf.AppLib.SaveImageFileDialog.SaveObject(System.Object,System.String)">
             <summary>
             Saves the object to the specified file.
             </summary>
            
             <param name="oObject">
             Object to save.
             </param>
            
             <param name="sFileName">
             File name to save the object to.
             </param>
            
             <remarks>
             This is called by the base-class ShowDialogAndSaveObject() method.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.SaveImageFileDialog.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.SaveImageFileDialog.m_sDialogTitle">
            Dialog title.
        </member>
        <member name="P:Smrf.AppLib.SaveImageFileDialog.DialogTitle">
             <summary>
             Gets or sets the dialog's title.
             </summary>
            
             <value>
             The dialog's title.  Can't be null or empty.  The default is
             "Save As Image".
             </value>
        </member>
        <member name="T:Smrf.AppLib.FormSettings">
             <summary>
             Saves a form's window state and rectangle in the user's settings.
             </summary>
            
             <remarks>
             This can be used as a base class for storing user settings in a Windows
             Forms application.  This class automatically saves the window state,
             location, and optionally size (if the form is resizable) of a specified
             form when the form closes, and restores them when the form is loaded.
            
             <para>
             Derive a class from this one, add any form-specific user setting properties
             to the derived class, instantiate the dervied class in the form's
             constructor, and save the instantiated object in a member field.
             </para>
            
             <para>
             It is not necessary to call <see cref="M:System.Configuration.ApplicationSettingsBase.Save"/>
             when the form is closing.  This class does that automatically.
             </para>
            
             <para>
             This is for .NET 2.0 and later applications only.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.AppLib.FormSettings.FormWindowStateKey">
            Name of the settings key for the FormWindowState property.
        </member>
        <member name="F:Smrf.AppLib.FormSettings.FormSizeKey">
            Name of the settings key for the FormSize property.
        </member>
        <member name="F:Smrf.AppLib.FormSettings.FormLocationKey">
            Name of the settings key for the FormLocation property.
        </member>
        <member name="F:Smrf.AppLib.FormSettings.HasBeenSavedKey">
            Name of the settings key for the HasBeenSaved property.
        </member>
        <member name="M:Smrf.AppLib.FormSettings.#ctor(System.Windows.Forms.Form,System.Boolean)">
             <summary>
             Initializes a new instance of the FormSettings class.
             </summary>
            
             <param name="form">
             The form to save settings for.
             </param>
            
             <param name="formIsFixedSize">
             true if <paramref name="form" /> is of fixed size, false if it is
             resizable.  If false, the form's size is restored along with the form's
             window state and location.
             </param>
        </member>
        <member name="M:Smrf.AppLib.FormSettings.RestoreFormWindow(System.Windows.Forms.Form)">
             <summary>
             Restores the form's window state and rectangle.
             </summary>
            
             <param name="oForm">
             The form to restore.
             </param>
        </member>
        <member name="M:Smrf.AppLib.FormSettings.SaveFormWindow(System.Windows.Forms.Form)">
             <summary>
             Saves the form's window state and rectangle.
             </summary>
            
             <param name="oForm">
             The form whose window state and rectangle should be saved.
             </param>
        </member>
        <member name="M:Smrf.AppLib.FormSettings.Form_Load(System.Object,System.EventArgs)">
             <summary>
             Handles the Load event on the form that owns this object.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.AppLib.FormSettings.Form_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
             <summary>
             Handles the FormClosing event on the form that owns this object.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.AppLib.FormSettings.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.FormSettings.m_bFormIsFixedSize">
            true if the Form passed to the constructor is of fixed size.
        </member>
        <member name="P:Smrf.AppLib.FormSettings.FormWindowState">
             <summary>
             Gets or sets the WindowState value to use for the form when the form
             loads.
             </summary>
            
             <value>
             <see cref="P:Smrf.AppLib.FormSettings.FormWindowState"/> value to use for the form.  Can't be
             Minimized.  The default is Normal.
             </value>
            
             <remarks>
             Don't set this to Minimized.  Loading the form in a minimized state
             would confuse the user.
             </remarks>
        </member>
        <member name="P:Smrf.AppLib.FormSettings.FormSize">
             <summary>
             Gets or sets the Size value to use for the form when the form loads.
             </summary>
            
             <value>
             Size of the form, as a <see cref="T:System.Drawing.Size"/>.  The width and height must
             be greater than 0.  The default is (600, 400).
             </value>
        </member>
        <member name="P:Smrf.AppLib.FormSettings.FormLocation">
             <summary>
             Gets or sets the Location value to use for the form when the form
             loads.
             </summary>
            
             <value>
             Location of the form, as a <see cref="T:System.Drawing.Point"/>.  The default is
             (0, 0).
             </value>
        </member>
        <member name="P:Smrf.AppLib.FormSettings.HasBeenSaved">
             <summary>
             Gets or sets a flag indicating whether the settings have ever been
             saved.
             </summary>
            
             <value>
             true if the settings in this class have been saved at least once via
             <see cref="M:System.Configuration.ApplicationSettingsBase.Save"/>.
             </value>
            
             <remarks>
             If false is returned, it means that all other properties will return
             default values instead of values read from a settings file.
             </remarks>
        </member>
        <member name="P:Smrf.AppLib.FormSettings.ArgumentChecker">
             <summary>
             Gets a new initialized ArgumentChecker object.
             </summary>
            
             <value>
             A new initialized ArgumentChecker object.
             </value>
        </member>
        <member name="T:Smrf.AppLib.MenuUtil">
             <summary>
             Menu utility methods.
             </summary>
            
             <remarks>
             This class contains utility methods for dealing with menus.  All methods
             are static.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.MenuUtil.#ctor">
             <summary>
             Do not use this constructor.
             </summary>
            
             <remarks>
             Do not use this constructor.  All MenuUtil methods are static.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.MenuUtil.EnableMenuItems(System.Boolean,System.Windows.Forms.MenuItem[])">
             <summary>
             Enables or disables one or more menu items.
             </summary>
            
             <param name="bEnable">
             true to enable the menu items, false to disable them.
             </param>
            
             <param name="aoMenuItems">
             One or more menu items to enable or disable.
             </param>
        </member>
        <member name="M:Smrf.AppLib.MenuUtil.EnableToolStripMenuItems(System.Boolean,System.Windows.Forms.ToolStripMenuItem[])">
             <summary>
             Enables or disables one or more tool strip menu items.
             </summary>
            
             <param name="bEnable">
             true to enable the items, false to disable them.
             </param>
            
             <param name="aoToolStripMenuItems">
             One or more tool strip menu items to enable or disable.
             </param>
            
             <remarks>
             This can be used only in .NET 2.0 and later applications.  You must
             define a "NET20" compiler constant.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.MenuUtil.EnableAllDescendentToolStripMenuItems(System.Boolean,System.Windows.Forms.ToolStripMenuItem)">
             <summary>
             Enables or disables all descendent tool strip menu items of a specified
             parent tool strip menu item.
             </summary>
            
             <param name="bEnable">
             true to enable the items, false to disable them.
             </param>
            
             <param name="oParentToolStripMenuItem">
             Parent tool strip menu item whose descendent tool strip menu items
             should be enabled or disabled.
             </param>
            
             <remarks>
             This method recurses through all descendent tool strip menu items of
             <paramref name="oParentToolStripMenuItem" /> and enables or disables
             them.
            
             <para>
             This can be used only in .NET 2.0 and later applications.  You must
             define a "NET20" compiler constant.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.MenuUtil.GetMenuPath(System.Windows.Forms.ToolStripMenuItem[])">
             <summary>
             Gets a string describing the path to a tool strip menu item.
             </summary>
            
             <param name="aoToolStripMenuItemss">
             Sequence of one or more menu items.  Each item must be a child of the
             previous item.  Sample: mniFile, mniFileNew, mniFileNewDocument.
             </param>
            
             <returns>
             A string describing the path to the last menu item in <paramref
             name="aoToolStripMenuItemss" />.  Sample: "File, New, Document".
             </returns>
            
             <remarks>
             Use this method to obtain a displayable path to a menu item in a robust
             manner.  Instead of hardcoding the string "File, New, Document" in a
             user message, for example, pass the sequence of menu item to this
             method and use the returned string in the message.  Then if the text of
             any of the menu items is changed, the message will change
             automatically.  Also, if one of the menu items is moved or deleted, an
             exception is thrown to alert the programmer to the problem.
            
             <para>
             This can be used only in .NET 2.0 and later applications.  You must
             define a "NET20" compiler constant.
             </para>
            
             </remarks>
        </member>
        <member name="T:Smrf.AppLib.ObjectWithText">
             <summary>
             Stores an object along with text that describes the object.
             </summary>
            
             <remarks>
             <see cref="M:Smrf.AppLib.ObjectWithText.ToString"/> is overridden to return the text.
            
             <para>
             This object can be used to populate a ListBox or ComboBox with arbitrary
             objects.  See ComboBoxPlus.PopulateWithObjectsAndText.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.ObjectWithText.#ctor(System.Object,System.String)">
             <summary>
             Initializes a new instance of the ObjectWithText class.
             </summary>
            
             <param name="oObject">
             An arbitrary object, or null.
             </param>
            
             <param name="sText">
             Text describing the object.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ObjectWithText.ToString">
            <summary>
            This member overrides Object.ToString.
            </summary>
        </member>
        <member name="M:Smrf.AppLib.ObjectWithText.CompareTo(System.Object)">
             <summary>
             Compares the current instance with another object of the same type.
             </summary>
            
             <param name="oOtherObject">
             Object to compare to.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ObjectWithText.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.ObjectWithText.m_oObject">
            An arbitrary object, or null.
        </member>
        <member name="F:Smrf.AppLib.ObjectWithText.m_sText">
            Text describing the object.
        </member>
        <member name="P:Smrf.AppLib.ObjectWithText.Object">
             <summary>
             Gets or sets the arbitrary object.
             </summary>
            
             <value>
             An arbitrary object, or null.
             </value>
        </member>
        <member name="P:Smrf.AppLib.ObjectWithText.Text">
             <summary>
             Gets or sets the text describing the object.
             </summary>
            
             <value>
             Text describing the object.
             </value>
        </member>
        <member name="T:Smrf.AppLib.SaveableImageFormats">
             <summary>
             Contains information about image formats that can be saved to disk.
             </summary>
            
             <remarks>
             This class encapsulates information about image formats that can be saved
             to disk.  All properties and methods are static.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.SaveableImageFormats.GetFileExtension(System.Drawing.Imaging.ImageFormat)">
             <summary>
             Returns a file extension corresponding to a saveable image format.
             </summary>
            
             <param name="saveableImageFormat">
             One of the ImageFormat values returned by <cref name="ImageFormats" />.
             </param>
            
             <returns>
             The returned file extension is in lower case and does not include a
             period.  Sample: "bmp".
             </returns>
        </member>
        <member name="M:Smrf.AppLib.SaveableImageFormats.InitializeListControl(System.Windows.Forms.ListControl)">
             <summary>
             Initializes a ListControl with image formats that can be saved to disk.
             </summary>
            
             <param name="listControl">
             ListControl to initialize.
             </param>
            
             <remarks>
             After this method is called, the <see cref="P:System.Windows.Forms.ListControl.SelectedValue"/> property can be used to get the
             ImageFormat value selected by the user.
             </remarks>
        </member>
        <member name="F:Smrf.AppLib.SaveableImageFormats.ImageFormats">
            <summary>
            An array of image formats that can be saved to disk.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.SaveableImageFormats.Filter">
            <summary>
            A filter string for the image formats that can be saved to disk,
            suitable for use in a common dialog.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.SaveableImageFormats.PngFilterIndexOneBased">
            <summary>
            One-based index of the PNG filter returned by <see cref="F:Smrf.AppLib.SaveableImageFormats.Filter"/>.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.SaveableImageFormats.FileExtensions">
            <summary>
            File extensions that correspond to <see cref="F:Smrf.AppLib.SaveableImageFormats.ImageFormats"/>.
            </summary>
        </member>
        <member name="T:Smrf.SocialNetworkLib.AttachmentFilter">
            <summary>
            Specifies how attachments are filtered on by <see cref="T:Smrf.SocialNetworkLib.EmailNetworkAnalyzer"/>.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.AttachmentFilter.HasAttachment">
            <summary>
            Include only emails that have an attachment.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.AttachmentFilter.NoAttachment">
            <summary>
            Include only emails that do not have an attachment.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.AttachmentFilter.HasAttachmentFromParticipant1">
            <summary>
            Include only emails that have an attachment and are from participant 1.
            </summary>
        </member>
        <member name="T:Smrf.SocialNetworkLib.EmailNetworkAnalyzer">
             <summary>
             Analyzes a user's email social network.
             </summary>
            
             <remarks>
             Use one of the <see cref="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetwork"/> overloads to
             synchronously analyze a user's email social network, or use <see cref="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsync(Smrf.SocialNetworkLib.EmailParticipantCriteria[],System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{Smrf.SocialNetworkLib.AttachmentFilter},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean,System.Boolean)"/> to do it asynchronously.
             </remarks>
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.WdsConnectionString">
            The connection string to use for Windows Desktop Search.
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.OleDbCommandTimeoutSeconds">
            Command timeout for the OleDbCommand object, in seconds.
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.BaseQuery">
            Base query that returns all email items.
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.KeySeparator">
            Character used to separate two participants in the aggregated
            dictionary key.
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AsyncCancelInterval">
            Number of records to process before checking whether a cancellation of
            an asynchronous analysis has been requested.
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeMethodName">
            Name of the method used to analyze email.  Gets used in error messages.
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.SocialNetworkLib.EmailNetworkAnalyzer"/>
            class.
            </summary>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetwork">
             <overloads>
             Synchronously analyzes a user's email social network.
             </overloads>
            
             <summary>
             Synchronously analyzes a user's entire email social network.
             </summary>
            
             <returns>
             An array of zero or more <see cref="T:Smrf.SocialNetworkLib.EmailParticipantPair"/> objects,
             one for each pair of participants in the user's email social network.
             The return value is never null.
             </returns>
            
             <remarks>
             This method uses the Windows Desktop Search index to analyze the user's
             email.  For each email item in the index, an edge weight of 1 is
             assigned to each From-To and From-Cc participant pair.  For example, if
             an email item has these fields:
            
             <code>
             From: John
             To: Mary, Bob
             Cc: Sarah
             </code>
            
             <para>
             then the following participant pairs are created:
             </para>
            
             <code>
             John, Mary, 1
             John, Bob, 1
             John, Sarah, 1
             </code>
            
             <para>
             The process is repeated for every email item.  If a second email item
             has these fields, for example:
             </para>
            
             <code>
             From: John
             To: Sarah
             </code>
            
             <para>
             then the following participant pair is created:
             </para>
            
             <code>
             John, Sarah, 1
             </code>
            
             <para>
             The process is repeated for every email item and the results are
             aggregated.  For the two emails in this example, the aggregated results
             look like this:
             </para>
            
             <code>
             John, Mary, 1
             John, Bob, 1
             John, Sarah, 2
             </code>
            
             <para>
             The aggregated set of <see cref="T:Smrf.SocialNetworkLib.EmailParticipantPair"/> objects is
             returned.
             </para>
            
             <para>
             If a connection to the Windows Desktop Search index can't be made, a
             <see cref="T:Smrf.SocialNetworkLib.WdsConnectionFailureException"/> is thrown.  If a
             connection is made but the query fails, an <see cref="T:System.Data.OleDb.OleDbException"/> is thrown.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetwork(Smrf.SocialNetworkLib.EmailParticipantCriteria[],System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{Smrf.SocialNetworkLib.AttachmentFilter},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean,System.Boolean)">
             <summary>
             Synchronously analyzes the part of a user's email social network that
             satisfies specified criteria.
             </summary>
            
             <param name="participantsCriteria">
             An array of <see cref="T:Smrf.SocialNetworkLib.EmailParticipantCriteria"/> objects, one for
             each participant to filter on, or null to not filter on participants.
             For each element in the array, <see cref="P:Smrf.SocialNetworkLib.EmailParticipantCriteria.Participant"/> must be specified, but
             <see cref="P:Smrf.SocialNetworkLib.EmailParticipantCriteria.IncludedIn"/> can be <see cref="F:Smrf.SocialNetworkLib.IncludedIn.None"/>.
             </param>
            
             <param name="startTime">
             If specified, only emails sent on or after the specified time are
             included in the aggregated results.  Use null to specify "no start
             time."
             </param>
            
             <param name="endTime">
             If specified, only emails sent on or before the specified time are
             included in the aggregated results.  Use null to specify "no end time."
             </param>
            
             <param name="subjectText">
             Subject text to filter on, or null to not filter on subject text.
             Can't be an empty string.  If specified, only emails that include the
             specified subject text are included in the aggregated results.
             </param>
            
             <param name="bodyText">
             Body text to filter on, or null to not filter on body text.  Can't be
             an empty string.  If specified, only emails that include the specified
             body text are included in the aggregated results.
             </param>
            
             <param name="folder">
             Email folder to filter on, or null to not filter on the email folder.
             Can't be an empty string.  If specified, only emails in the specified
             folder are included in the aggregated results.  Sample: "Inbox".
             </param>
            
             <param name="minimumSize">
             If specified, only emails that have a size greater than or equal to the
             specified value are included in the aggregated results.
             </param>
            
             <param name="maximumSize">
             If specified, only emails that have a size less than or equal to the
             specified value are included in the aggregated results.
             </param>
            
             <param name="attachmentFilter">
             If not null, specifies how attachments are used to determine which
             emails are included in the aggregated results.  Use null to specify
             "don't care."
             </param>
            
             <param name="hasCc">
             If specified, only emails that have or don't have a Cc line are
             included in the aggregated results.  Use null to specify "don't care."
             </param>
            
             <param name="hasBcc">
             If specified, only emails that have or don't have a Bcc line are
             included in the aggregated results.  Use null to specify "don't care."
             </param>
            
             <param name="isReplyFromParticipant1">
             If specified, only emails that are or are not replies from the
             participant are included in the aggregated results.  Use null to
             specify "don't care."
            
             <para>
             [IMPORTANT NOTE: As of April 2008, the System.Message.IsFwdOrReply
             message property needed to implement this is always null.  Specifying
             true or false for this parameter will always return an empty array.
             The parameter is retained in case the missing property is fixed in a
             future version of Windows Desktop Search.]
             </para>
            
             </param>
            
             <param name="useCcForEdgeWeights">
             If true, an edge weight of one is assigned to the sender and each
             participant on the Cc line.  (An edge weight of one is always assigned
             to the sender and each participant on the To line.)
             </param>
            
             <param name="useBccForEdgeWeights">
             If true, an edge weight of one is assigned to the sender and each
             participant on the Bcc line.  (An edge weight of one is always assigned
             to the sender and each participant on the To line.)
             </param>
            
             <returns>
             An array of zero or more <see cref="T:Smrf.SocialNetworkLib.EmailParticipantPair"/> objects,
             one for each pair of participants in the user's email social network
             that satisfy the specified criteria.  The return value is never null.
             </returns>
            
             <remarks>
             This overload does the same thing as the <see cref="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetwork"/> overload, but only those emails that
             match the specified criteria are aggregated.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsync(Smrf.SocialNetworkLib.EmailParticipantCriteria[],System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{Smrf.SocialNetworkLib.AttachmentFilter},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean,System.Boolean)">
             <summary>
             Asynchronously analyzes the part of a user's email social network that
             satisfies specified criteria.
             </summary>
            
             <param name="participantsCriteria">
             See the synchronous method.
             </param>
            
             <param name="startTime">
             See the synchronous method.
             </param>
            
             <param name="endTime">
             See the synchronous method.
             </param>
            
             <param name="subjectText">
             See the synchronous method.
             </param>
            
             <param name="bodyText">
             See the synchronous method.
             </param>
            
             <param name="folder">
             See the synchronous method.
             </param>
            
             <param name="minimumSize">
             See the synchronous method.
             </param>
            
             <param name="maximumSize">
             See the synchronous method.
             </param>
            
             <param name="attachmentFilter">
             See the synchronous method.
             </param>
            
             <param name="hasCc">
             See the synchronous method.
             </param>
            
             <param name="hasBcc">
             See the synchronous method.
             </param>
            
             <param name="isReplyFromParticipant1">
             See the synchronous method.
             </param>
            
             <param name="useCcForEdgeWeights">
             See the synchronous method.
             </param>
            
             <param name="useBccForEdgeWeights">
             See the synchronous method.
             </param>
            
             <remarks>
             When the analysis completes, the <see cref="E:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalysisCompleted"/> event
             fires.  The <see cref="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result"/> property
             will return an array of zero or more <see cref="T:Smrf.SocialNetworkLib.EmailParticipantPair"/>
             objects, one for each pair of participants in the user's email social
             network that satisfy the specified criteria.  The property is never
             null.
            
             <para>
             To cancel the analysis, call <see cref="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.CancelAsync"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.CancelAsync">
             <summary>
             Cancels the analysis started by <see cref="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsync(Smrf.SocialNetworkLib.EmailParticipantCriteria[],System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{Smrf.SocialNetworkLib.AttachmentFilter},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean,System.Boolean)"/>.
             </summary>
            
             <remarks>
             When the analysis cancels, the <see cref="E:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalysisCompleted"/> event
             fires.  The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/> property
             will be true.
            
             <para>
             Important note: If the background thread started by <see cref="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsync(Smrf.SocialNetworkLib.EmailParticipantCriteria[],System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{Smrf.SocialNetworkLib.AttachmentFilter},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean,System.Boolean)"/> is running a Windows Desktop Search
             query when <see cref="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.CancelAsync"/> is called, the analysis won't
             cancel until the query completes.  If the background thread is
             processing the recordset returned by the query, the analysis will
             cancel quickly.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.GetDataReader(System.String)">
             <summary>
             Gets a data reader for reading specified email items.
             </summary>
            
             <param name="sQuery">
             A Windows Desktop Search query specifying the email items to get a data
             reader for.
             </param>
            
             <returns>
             An <see cref="T:System.Data.OleDb.OleDbDataReader"/> object for reading the specified
             email items.
             </returns>
            
             <remarks>
             If a connection to the Windows Desktop Search index can't be made, a
             <see cref="T:Smrf.SocialNetworkLib.WdsConnectionFailureException"/> is thrown.  If a
             connection is made but the query fails, an <see cref="T:System.Data.OleDb.OleDbException"/> is thrown.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkInternal(Smrf.SocialNetworkLib.EmailParticipantCriteria[],System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{Smrf.SocialNetworkLib.AttachmentFilter},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Analyzes the part of a user's email social network that satisfies
             specified criteria.
             </summary>
            
             <param name="participantsCriteria">
             See the synchronous method.
             </param>
            
             <param name="startTime">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="endTime">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="subjectText">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="bodyText">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="folder">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="minimumSize">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="maximumSize">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="attachmentFilter">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="hasCc">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="hasBcc">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="isReplyFromParticipant1">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="useCcForEdgeWeights">
             See the synchronous method.
             </param>
            
             <param name="useBccForEdgeWeights">
             See the synchronous method.
             </param>
            
             <param name="backgroundWorker">
             A BackgroundWorker object if this method is being called
             asynchronously, or null if it is being called synchronously.
             </param>
            
             <param name="doWorkEventArgs">
             A DoWorkEventArgs object if this method is being called
             asynchronously, or null if it is being called synchronously.
             </param>
            
             <returns>
             See AnalyzeEmailNetwork().
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkInternal(System.Data.OleDb.OleDbDataReader,System.Boolean,System.Boolean,System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Analyzes a user's email social network.
             </summary>
            
             <param name="oDataReader">
             An <see cref="T:System.Data.OleDb.OleDbDataReader"/> object for reading email items.
             </param>
            
             <param name="bUseCcForEdgeWeights">
             See the synchronous AnalyzeEmailNetwork() method.
             </param>
            
             <param name="bUseBccForEdgeWeights">
             See the synchronous AnalyzeEmailNetwork() method.
             </param>
            
             <param name="oBackgroundWorker">
             A BackgroundWorker object if this method is being called
             asynchronously, or null if it is being called synchronously.
             </param>
            
             <param name="oDoWorkEventArgs">
             A DoWorkEventArgs object if this method is being called
             asynchronously, or null if it is being called synchronously.
             </param>
            
             <returns>
             An array of zero or more <see cref="T:Smrf.SocialNetworkLib.EmailParticipantPair"/> objects,
             one for each pair of participants in the set of email items.  The
             return value is never null.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeOneEmail(System.Object,System.Object,System.Object,System.Object,System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Int32})">
             <summary>
             Analyzes the participants in one email.
             </summary>
            
             <param name="oFromField">
             The email's "From" fields.  Can be DBNull.
             </param>
            
             <param name="oToField">
             The email's "To" fields.  Can be DBNull.
             </param>
            
             <param name="oCcField">
             The email's "Cc" fields.  Can be DBNull.
             </param>
            
             <param name="oBccField">
             The email's "Bcc" fields.  Can be DBNull.
             </param>
            
             <param name="bUseCcForEdgeWeights">
             See the synchronous AnalyzeEmailNetwork() method.
             </param>
            
             <param name="bUseBccForEdgeWeights">
             See the synchronous AnalyzeEmailNetwork() method.
             </param>
            
             <param name="oAggregatedDictionary">
             Aggregated participant pairs.  The key is the pair of participants in
             the format used by ParticipantsToKey() and the value is the edge
             weight between the participants.
             </param>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeOneEmailField(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.Dictionary{System.String,System.Int32})">
             <summary>
             Analyzes the participants in one email field.
             </summary>
            
             <param name="sFrom">
             The email's sender, in lower case.
             </param>
            
             <param name="oField">
             The field that might contain participants.  Can be either DBNull or an
             array of strings.
             </param>
            
             <param name="oPerEmailDictionary">
             The key is a participant and the value is not used.
             </param>
            
             <param name="oAggregatedDictionary">
             Aggregated participant pairs.  The key is the pair of participants in
             the format used by ParticipantsToKey() and the value is the edge
             weight between the participants.
             </param>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.ParticipantsToKey(System.String,System.String)">
             <summary>
             Appends two participants into a dictionary key.
             </summary>
            
             <param name="sParticipant1">
             First participant.
             </param>
            
             <param name="sParticipant2">
             Second participant.
             </param>
            
             <returns>
             A key appropriate for use in the aggregated dictionary.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.KeyToParticipants(System.String,System.String@,System.String@)">
             <summary>
             Splits a dictionary key into two participants.
             </summary>
            
             <param name="sKey">
             Key from the aggregated dictionary.  This must be a string created by
             <see cref="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.ParticipantsToKey(System.String,System.String)"/>.
             </param>
            
             <param name="sParticipant1">
             Where the first participant gets stored.
             </param>
            
             <param name="sParticipant2">
             Where the second participant gets stored.
             </param>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.CheckAnalyzeMethodArguments(Smrf.SocialNetworkLib.EmailParticipantCriteria[],System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{Smrf.SocialNetworkLib.AttachmentFilter},System.Nullable{System.Boolean})">
             <summary>
             Checks the arguments passed to AnalyzeEmailNetwork().
             </summary>
            
             <param name="participantsCriteria">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="startTime">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="endTime">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="subjectText">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="bodyText">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="folder">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="minimumSize">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="maximumSize">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="attachmentFilter">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="isReplyFromParticipant1">
             See AnalyzeEmailNetwork().
             </param>
            
             <remarks>
             This method throws an exception if any arguments are invalid.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.CheckAnalyzeMethodArgument(System.String,System.String)">
             <summary>
             Checks a string argument passed to AnalyzeEmailNetwork().
             </summary>
            
             <param name="sArgument">
             The argument to check.  Can be null but can't be empty.
             </param>
            
             <param name="sParameterName">
             Name of the parameter.
             </param>
            
             <remarks>
             This method throws an exception if <paramref name="sArgument" /> is an
             empty string.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.CreateQuery(Smrf.SocialNetworkLib.EmailParticipantCriteria[],System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{Smrf.SocialNetworkLib.AttachmentFilter},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
             <summary>
             Creates a query that uses specified criteria.
             </summary>
            
             <param name="participantsCriteria">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="startTime">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="endTime">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="subjectText">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="bodyText">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="folder">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="minimumSize">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="maximumSize">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="attachmentFilter">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="hasCc">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="hasBcc">
             See AnalyzeEmailNetwork().
             </param>
            
             <param name="isReplyFromParticipant1">
             See AnalyzeEmailNetwork().
             </param>
            
             <returns>
             A query that uses the specified criteria.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AppendParticipantClauseToQuery(System.String,Smrf.SocialNetworkLib.IncludedIn,Smrf.SocialNetworkLib.IncludedIn,System.Text.StringBuilder,System.Boolean@)">
             <summary>
             Appends a participant clause to a query.
             </summary>
            
             <param name="sEscapedParticipant">
             The participant to use in the clause.
             </param>
            
             <param name="eIncludedIn">
             The IncludedIn value from a ParticipantCriteria object.
             </param>
            
             <param name="eFlagToCheck">
             The flag to check in <paramref name="eIncludedIn" />.
             </param>
            
             <param name="oStringBuilder">
             The query to append to.
             </param>
            
             <param name="bParticipantClauseAppended">
             true if a participant clause has already been appended.  Gets updated
             by this method.
             </param>
            
             <remarks>
             If <paramref name="eIncludedIn" /> includes <paramref
             name="eFlagToCheck" />, this method appends a clause that looks like
             this, in pseudocode: " Contains(To, Participant)".  If necessary, the
             clause is prepended with " OR".
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.FormatTime(System.DateTime)">
             <summary>
             Formats a DateTime for use in a query.
             </summary>
            
             <returns>
             A formatted DateTime.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.EscapeStringForContains(System.String)">
             <summary>
             Escapes a string for use within a SQL CONTAINS clause.
             </summary>
            
             <param name="sString">
             The string to escape.  Can be null.
             </param>
            
             <returns>
             The escaped string, or null.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.EscapeStringForEquals(System.String)">
             <summary>
             Escapes a string for use within a SQL equals clause.
             </summary>
            
             <param name="sString">
             The string to escape.  Can be null.
             </param>
            
             <returns>
             The escaped string, or null.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Handles the DoWork event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Source of the event.
             </param>
            
             <param name="e">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.BackgroundWorker_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
             <summary>
             Handles the RunWorkerCompleted event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Source of the event.
             </param>
            
             <param name="e">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.m_oBackgroundWorker">
            Used for asynchronous analysis.  null if an asynchronous analysis is
            not in progress.
        </member>
        <member name="P:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.IsBusy">
             <summary>
             Gets a flag indicating whether an asynchronous operation is in
             progress.
             </summary>
            
             <value>
             true if an asynchronous operation is in progress.
             </value>
        </member>
        <member name="E:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalysisCompleted">
            <summary>
            Occurs when the analysis started by <see cref="M:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsync(Smrf.SocialNetworkLib.EmailParticipantCriteria[],System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{Smrf.SocialNetworkLib.AttachmentFilter},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean,System.Boolean)"/> completes, is cancelled, or
            encounters an error.
            </summary>
        </member>
        <member name="P:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.ClassName">
             <summary>
             Gets the full name of this class.
             </summary>
            
             <value>
             The full name of this class, suitable for use in error messages.
             </value>
        </member>
        <member name="P:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.ArgumentChecker">
             <summary>
             Gets a new initialized <see cref="P:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.ArgumentChecker"/> object.
             </summary>
            
             <value>
             A new initialized <see cref="P:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.ArgumentChecker"/> object.
             </value>
            
             <remarks>
             The returned object can be used to check the validity of property
             values and method parameters.
             </remarks>
        </member>
        <member name="T:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsyncArgs">
            <summary>
            Contains the arguments needed to asynchronously analyze an email
            network.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsyncArgs.ParticipantsCriteria">
            
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsyncArgs.StartTime">
            
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsyncArgs.EndTime">
            
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsyncArgs.SubjectText">
            
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsyncArgs.BodyText">
            
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsyncArgs.Folder">
            
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsyncArgs.MinimumSize">
            
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsyncArgs.MaximumSize">
            
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsyncArgs.AttachmentFilter">
            
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsyncArgs.HasCc">
            
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsyncArgs.HasBcc">
            
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsyncArgs.IsReplyFromParticipant1">
            
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsyncArgs.UseCcForEdgeWeights">
            
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailNetworkAnalyzer.AnalyzeEmailNetworkAsyncArgs.UseBccForEdgeWeights">
            
        </member>
        <member name="T:Smrf.SocialNetworkLib.IncludedIn">
             <summary>
             Specifies which email fields a participant was included in.
             </summary>
            
             <remarks>
             These can be ORed together.
             </remarks>
        </member>
        <member name="F:Smrf.SocialNetworkLib.IncludedIn.None">
            <summary>
            The participant wasn't included in any email fields.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.IncludedIn.From">
            <summary>
            The participant was included in the From field.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.IncludedIn.To">
            <summary>
            The participant was included in the To field.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.IncludedIn.Cc">
            <summary>
            The participant was included in the Cc field.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.IncludedIn.Bcc">
            <summary>
            The participant was included in the Bcc field.
            </summary>
        </member>
        <member name="T:Smrf.SocialNetworkLib.EmailParticipantCriteria">
             <summary>
             Stores search critera for one participant in an email social network.
             </summary>
            
             <remarks>
             An array of <see cref="T:Smrf.SocialNetworkLib.EmailParticipantCriteria"/> objects gets passed to
             EmailNetworkAnalyzer.AnalyzeEmailNetwork().
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailParticipantCriteria.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.SocialNetworkLib.EmailParticipantCriteria"/> class.
            </summary>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailParticipantCriteria.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailParticipantCriteria.m_sParticipant">
            The String that identifies the participant.  Can be null or empty.
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailParticipantCriteria.m_eIncludedIn">
            The email fields the participant must be included in.
        </member>
        <member name="P:Smrf.SocialNetworkLib.EmailParticipantCriteria.Participant">
             <summary>
             Gets or sets the participant.
             </summary>
            
             <value>
             The String that identifies the participant.  Can be null or empty.  The
             default is null.
             </value>
        </member>
        <member name="P:Smrf.SocialNetworkLib.EmailParticipantCriteria.IncludedIn">
             <summary>
             Gets or sets the email fields the participant must be included in.
             </summary>
            
             <value>
             The email fields the participant must be included in, as an ORed
             combination of <see cref="T:Smrf.SocialNetworkLib.IncludedIn"/>
             flags.  The default is <see cref="F:Smrf.SocialNetworkLib.IncludedIn.None"/>.
             </value>
        </member>
        <member name="T:Smrf.SocialNetworkLib.EmailParticipantPair">
            <summary>
            Represents a pair of participants in an email social network.
            </summary>
        </member>
        <member name="T:Smrf.SocialNetworkLib.ParticipantPair">
            <summary>
            Represents a pair of participants in a social network.
            </summary>
        </member>
        <member name="M:Smrf.SocialNetworkLib.ParticipantPair.#ctor(System.String,System.String)">
             <overloads>
             Initializes a new instance of the <see cref="T:Smrf.SocialNetworkLib.ParticipantPair"/> class.
             </overloads>
            
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.SocialNetworkLib.ParticipantPair"/> class
             with specified values.
             </summary>
            
             <param name="participant1">
             The first participant.  Can't be null or empty.
             </param>
            
             <param name="participant2">
             The second participant.  Can't be null or empty.
             </param>
        </member>
        <member name="M:Smrf.SocialNetworkLib.ParticipantPair.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.SocialNetworkLib.ParticipantPair"/> class
             with default values.
             </summary>
            
             <remarks>
             Do not use this constructor.  It is for XML serialization only.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.ParticipantPair.ToString">
             <summary>
             Returns a String that represents the current object. 
             </summary>
            
             <returns>
             A string representation of the object.
             </returns>
        </member>
        <member name="M:Smrf.SocialNetworkLib.ParticipantPair.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.ParticipantPair.m_sParticipant1">
            The first participant.
        </member>
        <member name="F:Smrf.SocialNetworkLib.ParticipantPair.m_sParticipant2">
            The second participant.
        </member>
        <member name="P:Smrf.SocialNetworkLib.ParticipantPair.Participant1">
             <summary>
             Gets or sets the first participant.
             </summary>
            
             <value>
             The first participant, as a String.  Can't be null or empty.
             </value>
        </member>
        <member name="P:Smrf.SocialNetworkLib.ParticipantPair.Participant2">
             <summary>
             Gets or sets the second participant.
             </summary>
            
             <value>
             The second participant, as a String.  Can't be null or empty.
             </value>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailParticipantPair.#ctor(System.String,System.String,System.Int32)">
             <overloads>
             Initializes a new instance of the <see cref="T:Smrf.SocialNetworkLib.EmailParticipantPair"/>
             class.
             </overloads>
            
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.SocialNetworkLib.EmailParticipantPair"/>
             class with specified values.
             </summary>
            
             <param name="participant1">
             The first participant, as an email address.  Can't be null or empty.
             </param>
            
             <param name="participant2">
             The second participant, as an email address.  Can't be null or empty.
             </param>
            
             <param name="edgeWeight">
             The strength of the tie between the participants.  Must be
             non-negative.
             </param>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailParticipantPair.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.SocialNetworkLib.EmailParticipantPair"/>
             class with default values.
             </summary>
            
             <remarks>
             Do not use this constructor.  It is for XML serialization only.
             </remarks>
        </member>
        <member name="M:Smrf.SocialNetworkLib.EmailParticipantPair.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.SocialNetworkLib.EmailParticipantPair.m_iEdgeWeight">
            The strength of the tie between the participants.
        </member>
        <member name="P:Smrf.SocialNetworkLib.EmailParticipantPair.EdgeWeight">
             <summary>
             Gets or sets the strength of the tie between the participants.
             </summary>
            
             <value>
             The strength of the tie between the participants, as an Int32.  Must be
             non-negative.
             </value>
        </member>
        <member name="T:Smrf.SocialNetworkLib.WdsConnectionFailureException">
            <summary>
            Represents an exception thrown when a connection can't be made to the
            Windows Desktop Search index.
            </summary>
        </member>
        <member name="M:Smrf.SocialNetworkLib.WdsConnectionFailureException.#ctor(System.Exception)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.SocialNetworkLib.WdsConnectionFailureException"/>  class.
             </summary>
            
             <param name="innerException">
             The exception that was caught while attempting to connect to the
             Windows Desktop Search index.
             </param>
        </member>
        <member name="M:Smrf.SocialNetworkLib.WdsConnectionFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Do not use this constructor.  It is for binary serialization only.
            </summary>
        </member>
        <member name="M:Smrf.SocialNetworkLib.WdsConnectionFailureException.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl">
             <summary>
             Provides TrackBars for setting the zoom and scale properties on a
             <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/>.
             </summary>
            
             <remarks>
             Set the <see cref="P:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.NodeXLControl"/> property to
             an initialized <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/>.  Once this
             is done, the TrackBars within this control will set the zoom and scale
             properties on the <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/>, and if
             the user zooms the graph by scrolling the mouse within the <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/>, the zoom TrackBar within this
             control is automatically updated.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.MinimumGraphScale">
            Minimum and maximum values to use for the NodeXLControl.GraphScale
            property.  Note that only a portion of the available GraphScale range
            is used.
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.MaximumGraphScale">
            
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.TrackBarFactor">
            Conversion factor that allows the integer TrackBar to control a Double
            property in the NodeXLControl.
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.NodeXLControlValueToTrackBarValue(System.Double)">
             <summary>
             Converts a graph zoom or graph scale value from the NodeXLControl to a
             value that can be used in one of this control's TrackBars.
             </summary>
            
             <param name="dNodeXLControlValue">
             A graph zoom or graph scale value from the NodeXLControl.
             </param>
            
             <returns>
             A converted value for use in a TrackBar.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.TrackBarValueToNodeXLControlValue(System.Int32)">
             <summary>
             Converts a graph zoom or graph scale value from one of this control's
             TrackBars to a value that can be used in the NodeXLControl.
             </summary>
            
             <param name="iTrackBarValue">
             A graph zoom or graph scale value from a TrackBar.
             </param>
            
             <returns>
             A converted value for use in the NodeXLControl.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.m_oNodeXLControl_GraphZoomChanged(System.Object,System.EventArgs)">
             <summary>
             Handles the GraphZoomChanged event on the m_oNodeXLControl object.
             </summary>
            
             <param name="oSender">
             Standard event argument.
             </param>
            
             <param name="oEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.m_oNodeXLControl_GraphScaleChanged(System.Object,System.EventArgs)">
             <summary>
             Handles the GraphScaleChanged event on the m_oNodeXLControl object.
             </summary>
            
             <param name="oSender">
             Standard event argument.
             </param>
            
             <param name="oEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.tbGraphZoom_Scroll(System.Object,System.EventArgs)">
             <summary>
             Handles the Scroll event on the tbGraphZoom TrackBar.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.tbGraphScale_Scroll(System.Object,System.EventArgs)">
             <summary>
             Handles the Scroll event on the tbGraphScale TrackBar.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.m_oNodeXLControl">
            The NodeXLControl whose zoom and scale are being controlled by this
            control, or null if not set yet.
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.m_bChangingNodeXLControlValue">
            Protects against an endless loop when setting a NodeXLControl property.
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.NodeXLControl">
             <summary>
             Gets or sets the <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/> whose
             zoom and scale are being controlled by this control.
             </summary>
            
             <value>
             Set this to an initialized <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/>.  It is null by default.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.ClassName">
             <summary>
             Gets the full name of the class.
             </summary>
            
             <value>
             The full name of the class, suitable for use in error messages.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.ArgumentChecker">
             <summary>
             Gets a new initialized <see cref="P:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.ArgumentChecker"/> object.
             </summary>
            
             <value>
             A new initialized <see cref="P:Smrf.NodeXL.ApplicationUtil.GraphZoomAndScaleControl.ArgumentChecker"/> object.
             </value>
            
             <remarks>
             The returned object can be used to check the validity of property
             values and method parameters.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.ApplicationUtil.LayoutManager">
             <summary>
             Helper class for managing graph layouts.
             </summary>
            
             <remarks>
             This class defines a set of available layouts.  (A layout is a class that
             implements <see cref="T:Smrf.NodeXL.Layouts.ILayout"/>.  It provides a <see cref="P:Smrf.NodeXL.ApplicationUtil.LayoutManager.Layout"/>
             property for keeping track of the layout type currently in use, a <see cref="E:Smrf.NodeXL.ApplicationUtil.LayoutManager.LayoutChanged"/> event that is raised when the layout is changed,
             and a <see cref="M:Smrf.NodeXL.ApplicationUtil.LayoutManager.CreateLayout"/> method for creating a layout of the
             current type.
            
             <para>
             Use the derived <see cref="T:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu"/> class if your
             application uses ToolStripMenuItems for selecting the current layout.  Use
             the derived <see cref="T:Smrf.NodeXL.ApplicationUtil.LayoutManagerForToolStripSplitButton"/> class if
             your application uses a ToolStripSplitButton for selecting the current
             layout.
             </para>
            
             </remarks>
            
             <seealso cref="T:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu"/>
             <seealso cref="T:Smrf.NodeXL.ApplicationUtil.LayoutManagerForToolStripSplitButton"/>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.LayoutManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.ApplicationUtil.LayoutManager"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.LayoutManager.CreateLayout">
             <summary>
             Creates a layout of the current type.
             </summary>
            
             <returns>
             A layout of type <see cref="P:Smrf.NodeXL.ApplicationUtil.LayoutManager.Layout"/>.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.LayoutManager.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutManager.m_eLayout">
            Current layout type.
        </member>
        <member name="P:Smrf.NodeXL.ApplicationUtil.LayoutManager.Layout">
             <summary>
             Gets or sets the layout type to use.
             </summary>
            
             <value>
             The layout type to use, as a <see cref="T:Smrf.NodeXL.ApplicationUtil.LayoutType"/>.  The default is
             <see cref="F:Smrf.NodeXL.ApplicationUtil.LayoutType.FruchtermanReingold"/>.
             </value>
        </member>
        <member name="E:Smrf.NodeXL.ApplicationUtil.LayoutManager.LayoutChanged">
             <summary>
             Occurs when the <see cref="P:Smrf.NodeXL.ApplicationUtil.LayoutManager.Layout"/> property changes.
             </summary>
            
             <seealso cref="P:Smrf.NodeXL.ApplicationUtil.LayoutManager.Layout"/>
        </member>
        <member name="P:Smrf.NodeXL.ApplicationUtil.LayoutManager.ClassName">
             <summary>
             Gets the full name of the class.
             </summary>
            
             <value>
             The full name of the class, suitable for use in error messages.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.ApplicationUtil.LayoutManager.ArgumentChecker">
             <summary>
             Gets a new initialized <see cref="P:Smrf.NodeXL.ApplicationUtil.LayoutManager.ArgumentChecker"/> object.
             </summary>
            
             <value>
             A new initialized <see cref="P:Smrf.NodeXL.ApplicationUtil.LayoutManager.ArgumentChecker"/> object.
             </value>
            
             <remarks>
             The returned object can be used to check the validity of property
             values and method parameters.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu">
             <summary>
             Helper class for managing graph layouts.
             </summary>
            
             <remarks>
             This class is meant for use in applications that allow the user to select
             a graph layout via a parent "Layout" menu that has one child menu item per
             available layout.  It provides methods for populating the menu and for
             creating a layout of the selected type.
            
             <para>
             Call <see cref="M:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu.AddMenuItems(System.Windows.Forms.ToolStripDropDownItem)"/> during application initialization.  When
             the user selects one of the menu items added by this method, the <see cref="E:Smrf.NodeXL.ApplicationUtil.LayoutManager.LayoutChanged"/> event fires.  In the event handler,
             call <see cref="M:Smrf.NodeXL.ApplicationUtil.LayoutManager.CreateLayout"/> to create a layout of the
             selected type.
             </para>
            
             </remarks>
            
             <seealso cref="T:Smrf.NodeXL.ApplicationUtil.LayoutManager"/>
             <seealso cref="T:Smrf.NodeXL.ApplicationUtil.LayoutManagerForToolStripSplitButton"/>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu"/>
            class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu.AddMenuItems(System.Windows.Forms.ToolStripDropDownItem)">
             <summary>
             Adds a set of child menu items to a parent menu item, one for each
             layout supported by this class.
             </summary>
            
             <param name="parentDropDownItem">
             Parent item to add child menu items to.  This can be either a
             ToolStripMenuItem or a ToolStripDropDownButton.
             </param>
            
             <remarks>
             When one of the child menu items is selected, the <see cref="P:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu.Layout"/>
             property is changed and the <see cref="E:Smrf.NodeXL.ApplicationUtil.LayoutManager.LayoutChanged"/>
             event fires.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu.AddMenuItem(System.Windows.Forms.ToolStripDropDownItem,Smrf.NodeXL.ApplicationUtil.LayoutType,System.String,System.String)">
             <summary>
             Adds a child menu item to a parent menu item for one layout supported
             by this class.
             </summary>
            
             <param name="oParentDropDownItem">
             Parent item to add the child menu item to.
             </param>
            
             <param name="eLayoutType">
             Layout represented by the child menu item.
             </param>
            
             <param name="sMenuText">
             Text for the menu item.
             </param>
             
             <param name="sToolTipText">
             Tooltip for the menu item.
             </param>
             
             <returns>
             The new child menu item.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu.AddMenuItemSeparator(System.Windows.Forms.ToolStripDropDownItem)">
             <summary>
             Adds a separator menu item to a parent menu item.
             </summary>
            
             <param name="oParentDropDownItem">
             Parent item to add a separator menu item to.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu.MenuItem_Click(System.Object,System.EventArgs)">
             <summary>
             Handles the Click event on each of the child menu items added by <see cref="M:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu.AddMenuItems(System.Windows.Forms.ToolStripDropDownItem)"/>.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu.m_aoMenuItems">
            One menu item for each layout in the LayoutType enumeration, or null if
            AddMenuItems() hasn't been called yet.  The items are indexed by the
            LayoutType enumeration values cast to Int32s.
        </member>
        <member name="P:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu.Layout">
             <summary>
             Gets or sets the layout type to use.
             </summary>
            
             <value>
             The layout type to use, as a <see cref="T:Smrf.NodeXL.ApplicationUtil.LayoutType"/>. The default
             is <see cref="F:Smrf.NodeXL.ApplicationUtil.LayoutType.FruchtermanReingold"/>.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu.LayoutText">
             <summary>
             Gets the menu text displayed for the current layout type.
             </summary>
            
             <value>
             The menu text for the current layout type, without the ampersand that
             specifies a menu shortcut key.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.ApplicationUtil.LayoutManagerForToolStripSplitButton">
             <summary>
             Helper class for managing graph layouts.
             </summary>
            
             <remarks>
             This class is meant for use in applications that allow the user to select
             a graph layout via a ToolStripSplitButton that has one item per available
             layout.  It provides methods for populating the ToolStripSplitButton and
             for creating a layout of the selected type.
            
             <para>
             Call <see cref="M:Smrf.NodeXL.ApplicationUtil.LayoutManagerForToolStripSplitButton.AddItems(System.Windows.Forms.ToolStripSplitButton)"/> during application initialization.  When the
             user clicks one of the items added by this method, the <see cref="E:Smrf.NodeXL.ApplicationUtil.LayoutManager.LayoutChanged"/> event fires.  In the event handler,
             call <see cref="M:Smrf.NodeXL.ApplicationUtil.LayoutManager.CreateLayout"/> to create a layout of the
             selected type.
             </para>
            
             <para>
             The ToolStripSplitButton object used with this class ends up behaving like
             a ToolStripComboBox with a DropDownStyle of DropDownList.  It improves on
             the ToolStripComboBox, however, in that its drop-down list can contain
             other clickable items, whereas the ToolStripComboBox can contain nothing
             but items that display text.  If the caller has added drop-down items to
             the ToolStripSplitButton object before calling <see cref="M:Smrf.NodeXL.ApplicationUtil.LayoutManagerForToolStripSplitButton.AddItems(System.Windows.Forms.ToolStripSplitButton)"/>,
             this class will preserve those items.
             </para>
            
             </remarks>
            
             <seealso cref="T:Smrf.NodeXL.ApplicationUtil.LayoutManager"/>
             <seealso cref="T:Smrf.NodeXL.ApplicationUtil.LayoutManagerForMenu"/>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.LayoutManagerForToolStripSplitButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.ApplicationUtil.LayoutManagerForToolStripSplitButton"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.LayoutManagerForToolStripSplitButton.AddItems(System.Windows.Forms.ToolStripSplitButton)">
             <summary>
             Adds a set of items to a ToolStripSplitButton, one for each layout
             supported by this class.
             </summary>
            
             <param name="toolStripSplitButton">
             ToolStripSplitButton to add items to.
             </param>
            
             <remarks>
             When the ToolStripSplitButton's selection is changed, the <see cref="P:Smrf.NodeXL.ApplicationUtil.LayoutManagerForToolStripSplitButton.Layout"/> property is changed and the <see cref="E:Smrf.NodeXL.ApplicationUtil.LayoutManager.LayoutChanged"/> event fires.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.LayoutManagerForToolStripSplitButton.OnLayoutMenuItemClick(System.Object,System.EventArgs)">
             <summary>
             Handles the Click event on every drop-down ToolStripMenuItem that
             represents a layout type.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.LayoutManagerForToolStripSplitButton.m_oToolStripSplitButton_ButtonClick(System.Object,System.EventArgs)">
             <summary>
             Handles the ButtonClick event on the standard button portion of the
             ToolStripSplitButton.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.LayoutManagerForToolStripSplitButton.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutManagerForToolStripSplitButton.m_oToolStripSplitButton">
            ToolStripSplitButton that contains one item for each available layout,
            or null if AddItems() hasn't been called yet.
        </member>
        <member name="P:Smrf.NodeXL.ApplicationUtil.LayoutManagerForToolStripSplitButton.Layout">
             <summary>
             Gets or sets the layout type to use.
             </summary>
            
             <value>
             The layout type to use, as a <see cref="T:Smrf.NodeXL.ApplicationUtil.LayoutType"/>.  The default
             is <see cref="F:Smrf.NodeXL.ApplicationUtil.LayoutType.FruchtermanReingold"/>.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.ApplicationUtil.LayoutType">
            <summary>
            Specifies the layouts supported by the <see cref="T:Smrf.NodeXL.ApplicationUtil.LayoutManager"/> class.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutType.Circle">
            <summary>
            Use a <see cref="T:Smrf.NodeXL.Layouts.CircleLayout"/>.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutType.Spiral">
            <summary>
            Use a <see cref="T:Smrf.NodeXL.Layouts.SpiralLayout"/>.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutType.SinusoidHorizontal">
            <summary>
            Use a <see cref="T:Smrf.NodeXL.Layouts.SinusoidHorizontalLayout"/>.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutType.SinusoidVertical">
            <summary>
            Use a <see cref="T:Smrf.NodeXL.Layouts.SinusoidVerticalLayout"/>.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutType.FruchtermanReingold">
            <summary>
            Use a <see cref="T:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout"/>.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutType.Grid">
            <summary>
            Use a <see cref="T:Smrf.NodeXL.Layouts.GridLayout"/>.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutType.Random">
            <summary>
            Use a <see cref="T:Smrf.NodeXL.Layouts.RandomLayout"/>.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutType.Sugiyama">
            <summary>
            Use a <see cref="T:Smrf.NodeXL.Layouts.SugiyamaLayout"/>.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutType.Null">
            <summary>
            Use a <see cref="T:Smrf.NodeXL.Layouts.NullLayout"/>.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutType.Polar">
            <summary>
            Use a <see cref="T:Smrf.NodeXL.Layouts.PolarLayout"/>.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutType.PolarAbsolute">
            <summary>
            Use a <see cref="T:Smrf.NodeXL.Layouts.PolarAbsoluteLayout"/>.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutType.HarelKorenFastMultiscale">
            <summary>
            Use a <see cref="T:Smrf.NodeXL.Layouts.HarelKorenFastMultiscaleLayout"/>.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.ApplicationUtil.LayoutInfo">
            <summary>
            Provides information about a layout supported by the <see cref="T:Smrf.NodeXL.ApplicationUtil.LayoutManager"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.LayoutInfo.#ctor(Smrf.NodeXL.ApplicationUtil.LayoutType,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.ApplicationUtil.LayoutInfo"/> class.
             </summary>
            
             <param name="layout">
             Layout type.
             </param>
            
             <param name="menuText">
             Text to display in a menu item that represents the layout.  Must
             contain an ampersand that specifies the menu shortcut key.
             </param>
            
             <param name="description">
             Friendly description of the layout.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.LayoutInfo.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutInfo.m_eLayout">
            Layout type.
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutInfo.m_sMenuText">
            Text to display in a menu item that represents the layout.
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.LayoutInfo.m_sDescription">
            Friendly description of the layout.
        </member>
        <member name="P:Smrf.NodeXL.ApplicationUtil.LayoutInfo.Layout">
             <summary>
             Gets the layout type.
             </summary>
            
             <value>
             The layout type.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.ApplicationUtil.LayoutInfo.MenuText">
             <summary>
             Gets the text to display in a menu item that represents the layout.
             </summary>
            
             <value>
             The menu text to display.  Contains an ampersand that specifies the
             menu shortcut key.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.ApplicationUtil.LayoutInfo.Text">
             <summary>
             Gets the text to display in an item that represents the layout.
             </summary>
            
             <value>
             The text to display.  This is the same as <see cref="P:Smrf.NodeXL.ApplicationUtil.LayoutInfo.MenuText"/>, but
             without the ampersand that specifies a menu shortcut key.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.ApplicationUtil.LayoutInfo.Description">
             <summary>
             Gets the friendly description of the layout.
             </summary>
            
             <value>
             The friendly description.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.ApplicationUtil.AllLayouts">
            <summary>
            Provides information about all layouts supported by the <see cref="T:Smrf.NodeXL.ApplicationUtil.LayoutManager"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.AllLayouts.GetAllLayouts">
             <summary>
             Gets information about all layouts supported by the <see cref="T:Smrf.NodeXL.ApplicationUtil.LayoutManager"/> class.
             </summary>
            
             <returns>
             An array of <see cref="T:Smrf.NodeXL.ApplicationUtil.LayoutInfo"/> and <see cref="F:Smrf.NodeXL.ApplicationUtil.AllLayouts.LayoutGroupSeparator"/> objects.
             </returns>
            
             <remarks>
             Array entries that are the constant <see cref="F:Smrf.NodeXL.ApplicationUtil.AllLayouts.LayoutGroupSeparator"/>
             represent a separator between groups of related layouts.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.ApplicationUtil.AllLayouts.CreateLayout(Smrf.NodeXL.ApplicationUtil.LayoutType)">
             <summary>
             Creates a layout of a specified type.
             </summary>
            
             <param name="layoutType">
             The type of layout to create.
             </param>
            
             <returns>
             A layout of type <paramref name="layoutType" />.
             </returns>
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.AllLayouts.LayoutGroupSeparator">
            Indicates that a group separator should be inserted between groups of
            related layouts.
        </member>
        <member name="F:Smrf.NodeXL.ApplicationUtil.AllLayouts.m_aoAllLayouts">
             Information about all layouts in the LayoutType enumeration.
            
             IMPORTANT: Derived classes assume that there is one array entry for
             each layout in the LayoutType enumeration.  There may be additional
             entries that are set to the LayoutGroupSeparator constant.
            
             Note: The descriptions are terminated with periods because they appear
             as "SuperTips" within the Excel ribbon, and SuperTips in Excel are
             complete sentences.
        </member>
    </members>
</doc>
