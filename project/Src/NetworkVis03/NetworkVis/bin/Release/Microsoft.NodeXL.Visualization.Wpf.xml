<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.NodeXL.Visualization.Wpf</name>
    </assembly>
    <members>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.RectangleVertexDrawingHistory">
            <summary>
            Retains information about how one vertex was drawn as a rectangle.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory">
             <summary>
             Retains information about how one vertex was drawn.
             </summary>
            
             <remarks>
             This is an abstract base class.  There is one concrete derived class for
             each type of vertex that can be drawn.  The derived classes must implement
             the <see cref="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.GetEdgeEndpoint(Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory,System.Windows.Point@)"/> and <see cref="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.GetSelfLoopEndpoint(Microsoft.Research.CommunityTechnologies.GraphicsLib.RectangleEdge)"/> methods.
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.DrawingHistory">
             <summary>
             Retains information about how an object was drawn.
             </summary>
            
             <remarks>
             This is a base class for a family of classes that retain information about
             how various objects were drawn using the DrawingVisual class.
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.VisualizationBase">
            <summary>
            Base class for most classes in the <see cref="N:Microsoft.NodeXL.Visualization.Wpf"/> namespace.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VisualizationBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.VisualizationBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VisualizationBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VisualizationBase.Int32Format">
            <summary>
            String format used for most Int32s.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VisualizationBase.SingleFormat">
            <summary>
            String format used for most Singles.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VisualizationBase.DoubleFormat">
            <summary>
            String format used for most Doubles.
            </summary>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.VisualizationBase.ClassName">
             <summary>
             Gets the full name of the derived class.
             </summary>
            
             <value>
             The full name of the derived class, suitable for use in error messages.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.VisualizationBase.ArgumentChecker">
             <summary>
             Gets a new initialized <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VisualizationBase.ArgumentChecker"/> object.
             </summary>
            
             <value>
             A new initialized <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VisualizationBase.ArgumentChecker"/> object.
             </value>
            
             <remarks>
             The returned object can be used to check the validity of property
             values and method parameters.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DrawingHistory.#ctor(System.Windows.Media.DrawingVisual,System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.DrawingHistory"/> class.
             </summary>
            
             <param name="drawingVisual">
             The DrawingVisual object that was used to draw the object.
             </param>
            
             <param name="drawnAsSelected">
             true if the object was drawn as selected.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DrawingHistory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.DrawingHistory.m_oDrawingVisual">
            The DrawingVisual object that was used to draw the object.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.DrawingHistory.m_bDrawnAsSelected">
            true if the object was drawn as selected.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.DrawingHistory.DrawingVisual">
             <summary>
             Gets the DrawingVisual object that was used to draw the object.
             </summary>
            
             <value>
             The DrawingVisual object that was used to draw the object.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.DrawingHistory.DrawnAsSelected">
             <summary>
             Gets a flag indicating whether the object was drawn as selected.
             </summary>
            
             <value>
             true if the object was drawn as selected.
             </value>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.#ctor(Microsoft.NodeXL.Core.IVertex,System.Windows.Media.DrawingVisual,System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory"/>
             class.
             </summary>
            
             <param name="vertex">
             The vertex that was drawn.
             </param>
            
             <param name="drawingVisual">
             The DrawingVisual object that was used to draw the vertex.
             </param>
            
             <param name="drawnAsSelected">
             true if the vertex was drawn as selected.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.GetEdgeEndpoint(Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory,System.Windows.Point@)">
             <summary>
             Gets the endpoint of an edge that is connected to <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/>.
             </summary>
            
             <param name="otherVertexDrawingHistory">
             The <paramref name="VertexDrawingHistory"/> object that retains
             information about how the edge's other vertex was drawn.
             </param>
            
             <param name="edgeEndpoint">
             Where the edge endpoint gets stored.  The endpoint is somewhere on <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.GetSelfLoopEndpoint(Microsoft.Research.CommunityTechnologies.GraphicsLib.RectangleEdge)">
             <summary>
             Gets the endpoint of an edge that is connected to <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/>
             and is a self-loop.
             </summary>
            
             <param name="farthestGraphRectangleEdge">
             The edge of the graph rectangle that is farthest from <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/>.
             </param>
            
             <returns>
             The self-loop endpoint.  The endpoint is somewhere on <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/>.
             </returns>
            
             <remarks>
             A self-loop is an edge that connects a vertex to itself.  This method
             determines the single endpoint of the self-loop, which gets drawn as a
             line looping back to its starting point.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.GetEdgeEndpointOnCircle(System.Windows.Point,System.Double,System.Windows.Point,System.Windows.Point@)">
             <summary>
             Gets an edge endpoint on a vertex that was drawn as a circle.
             vertex.
             </summary>
            
             <param name="oVertexALocation">
             Location of the edge vertex that was drawn as a circle.
             </param>
            
             <param name="dVertexARadius">
             The radius that was used to draw the vertex.
             </param>
            
             <param name="oVertexBLocation">
             Location of the edge's other vertex.
             </param>
            
             <param name="oEdgeEndpoint">
             Where the edge endpoint on the vertex A end of the edge gets stored.
             The endpoint is at the intersection of the line connecting the vertex
             locations and the circle that was drawn for VertexA.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.GetEdgeEndpointOnRectangle(System.Windows.Point,System.Windows.Rect,System.Windows.Point,System.Windows.Point@)">
             <summary>
             Gets an edge endpoint on a vertex that was drawn as a rectangle.
             </summary>
            
             <param name="oVertexALocation">
             Location of the edge vertex that was drawn as a rectangle.
             </param>
            
             <param name="oVertexARectangle">
             The rectangle that was drawn for the vertex.
             </param>
            
             <param name="oVertexBLocation">
             Location of the edge's other vertex.
             </param>
            
             <param name="oEdgeEndpoint">
             Where the endpoint on the VertexA end of the edge gets stored.  The
             endpoint is at the intersection of the line connecting the vertex
             locations and <paramref name="oVertexARectangle" />.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.GetSelfLoopEndpointOnRectangle(System.Windows.Rect,Microsoft.Research.CommunityTechnologies.GraphicsLib.RectangleEdge)">
             <summary>
             Gets a self-loop endpoint on a vertex that is drawn as a rectangle.
             </summary>
            
             <param name="oVertexRectangle">
             The rectangle used to draw the vertex.
             </param>
            
             <param name="eFarthestGraphRectangleEdge">
             The edge of the graph rectangle that is farthest from the vertex.
             </param>
            
             <returns>
             The self-loop endpoint.  The endpoint is at the center of one of the
             edges of <paramref name="oVertexRectangle" />.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.GetBoundingSquare(System.Double)">
             <summary>
             Gets a square centered on the vertex.
             </summary>
            
             <param name="dHalfWidth">
             Half the width of the square.
             </param>
            
             <returns>
             A rectangle with the specified half-width, centered on the vertex.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.GetEdgeAngle(System.Windows.Point,System.Windows.Point)">
             <summary>
             Gets the angle between two vertices.
             </summary>
            
             <param name="oVertexALocation">
             Location of the edge's first vertex.
             </param>
            
             <param name="oVertexBLocation">
             Location of the edge's second vertex.
             </param>
            
             <returns>
             The angle between the two vertices, in radians.  Ranges between 0 and
             PI (0 to 180 degrees) and 0 to -PI (0 to -180 degrees).
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.m_oVertex">
            The vertex that was drawn.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex">
             <summary>
             Gets the vertex that was drawn.
             </summary>
            
             <value>
             The vertex that was drawn, as an <see cref="T:Microsoft.NodeXL.Core.IVertex"/>
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.VertexLocation">
             <summary>
             Gets the location of the vertex that was drawn.
             </summary>
            
             <value>
             The location of the vertex that was drawn, as a <see cref="T:System.Windows.Point"/>.
             </value>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.RectangleVertexDrawingHistory.#ctor(Microsoft.NodeXL.Core.IVertex,System.Windows.Media.DrawingVisual,System.Boolean,System.Windows.Rect)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.RectangleVertexDrawingHistory"/>
             class.
             </summary>
            
             <param name="vertex">
             The vertex that was drawn.
             </param>
            
             <param name="drawingVisual">
             The DrawingVisual object that was used to draw the vertex.
             </param>
            
             <param name="drawnAsSelected">
             true if the vertex was drawn as selected.
             </param>
            
             <param name="rectangle">
             The rectangle that was drawn for <paramref name="vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.RectangleVertexDrawingHistory.GetEdgeEndpoint(Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory,System.Windows.Point@)">
             <summary>
             Gets the endpoint of an edge that is connected to <see cref="T:Microsoft.NodeXL.Core.Vertex"/>.
             </summary>
            
             <param name="otherVertexDrawingHistory">
             The <paramref name="VertexDrawingHistory"/> object that retains
             information about how the edge's other vertex was drawn.
             </param>
            
             <param name="edgeEndpoint">
             Where the edge endpoint gets stored.  The endpoint is somewhere on <see cref="T:Microsoft.NodeXL.Core.Vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.RectangleVertexDrawingHistory.GetSelfLoopEndpoint(Microsoft.Research.CommunityTechnologies.GraphicsLib.RectangleEdge)">
             <summary>
             Gets the endpoint of an edge that is connected to <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/> and is a self-loop.
             </summary>
            
             <param name="farthestGraphRectangleEdge">
             The edge of the graph rectangle that is farthest from <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/>.
             </param>
            
             <returns>
             The self-loop endpoint.  The endpoint is somewhere on <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/>.
             </returns>
            
             <remarks>
             A self-loop is an edge that connects a vertex to itself.  This method
             determines the single endpoint of the self-loop, which gets drawn as a
             line looping back to its starting point.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.RectangleVertexDrawingHistory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.RectangleVertexDrawingHistory.m_oRectangle">
            The rectangle that was drawn.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.RectangleVertexDrawingHistory.Rectangle">
             <summary>
             Gets the rectangle that was drawn.
             </summary>
            
             <value>
             The rectangle that was drawn, as a Rect.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.CircleVertexDrawingHistory">
            <summary>
            Retains information about how one vertex was drawn as a <see cref="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.Circle"/>.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.CircleVertexDrawingHistory.#ctor(Microsoft.NodeXL.Core.IVertex,System.Windows.Media.DrawingVisual,System.Boolean,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.CircleVertexDrawingHistory"/>
             class.
             </summary>
            
             <param name="vertex">
             The vertex that was drawn.
             </param>
            
             <param name="drawingVisual">
             The DrawingVisual object that was used to draw the vertex.
             </param>
            
             <param name="drawnAsSelected">
             true if the vertex was drawn as selected.
             </param>
            
             <param name="radius">
             The radius of <paramref name="vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.CircleVertexDrawingHistory.GetEdgeEndpoint(Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory,System.Windows.Point@)">
             <summary>
             Gets the endpoint of an edge that is connected to <see cref="T:Microsoft.NodeXL.Core.Vertex"/>.
             </summary>
            
             <param name="otherVertexDrawingHistory">
             The <paramref name="VertexDrawingHistory"/> object that retains
             information about how the edge's other vertex was drawn.
             </param>
            
             <param name="edgeEndpoint">
             Where the edge endpoint gets stored.  The endpoint is somewhere on <see cref="T:Microsoft.NodeXL.Core.Vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.CircleVertexDrawingHistory.GetSelfLoopEndpoint(Microsoft.Research.CommunityTechnologies.GraphicsLib.RectangleEdge)">
             <summary>
             Gets the endpoint of an edge that is connected to <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/> and is a self-loop.
             </summary>
            
             <param name="farthestGraphRectangleEdge">
             The edge of the graph rectangle that is farthest from <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/>.
             </param>
            
             <returns>
             The self-loop endpoint.  The endpoint is somewhere on <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/>.
             </returns>
            
             <remarks>
             A self-loop is an edge that connects a vertex to itself.  This method
             determines the single endpoint of the self-loop, which gets drawn as a
             line looping back to its starting point.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.CircleVertexDrawingHistory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.CircleVertexDrawingHistory.m_dRadius">
            The radius of the vertex.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.CircleVertexDrawingHistory.Radius">
             <summary>
             Gets the radius of the vertex that was drawn.
             </summary>
            
             <value>
             The radius of the vertex that was drawn, as a Double.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual">
             <summary>
             Visual object that renders a NodeXL graph.
             </summary>
            
             <remarks>
             This class wraps a <see cref="T:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer"/> object and renders the
             drawn graph as a Visual.
            
             <para>
             To draw a graph that has already been laid out, call the <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)"/> method on the object returned by the
             <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual.GraphDrawer"/> property.  Note that neither <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual.GraphDrawer"/> nor <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual"/> lays out the graph.
             You should lay out the graph using one of the provided layout classes
             before calling <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)"/>.
             </para>
            
             <para>
             <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual"/> is a lower-level alternative to using
             NodeXLControl, which is a FrameworkElement class meant for use in WPF
             desktop applications.  Unlike <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual"/> and <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual.GraphDrawer"/>, NodeXLControl automatically lays out the graph
             before drawing it.  Use <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual"/> where the overhead
             of a FrameworkElement is not required or more control over the graph's
             layout is needed.
             </para>
            
             <para>
             Another alternative is to use <see cref="T:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer"/> directly.
             However, <see cref="T:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer"/> cannot be directly rendered.  You
             must implement a custom wrapper that hosts the GraphDrawer.<see cref="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.VisualCollection"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual.GetVisualChild(System.Int32)">
             <summary>
             Returns a child at the specified index from a collection of child
             elements. 
             </summary>
            
             <param name="index">
             The zero-based index of the requested child element in the collection.
             </param>
            
             <returns>
             The requested child element.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual.m_oGraphDrawer">
            The object that draws the graph.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual.GraphDrawer">
             <summary>
             Gets the object that draws a graph.
             </summary>
            
             <value>
             The <see cref="T:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer"/> object that draws a graph.
             </value>
            
             <remarks>
             To draw a graph, call the <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)"/>
             method on the returned object.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual.VisualChildrenCount">
             <summary>
             Gets the number of visual child elements within this element.
             </summary>
            
             <value>
             The number of visual child elements for this element.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer">
             <summary>
             Draws a NodeXL graph onto a collection of Visual objects.
             </summary>
            
             <remarks>
             This is used to draw a NodeXL graph in a WPF application.  It contains a
             collection of Visual objects that represent the graph's vertices and
             edges.  Call <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)"/> to draw a laid-out NodeXL graph onto
             the contained <see cref="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.VisualCollection"/>.
            
             <para>
             <see cref="T:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer"/> does not lay out the graph.  You should lay out
             the graph using one of the provided layout classes before calling <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)"/>.
             </para>
            
             <para>
             A <see cref="T:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer"/> cannot be directly rendered and is typically
             not used directly by an application.  Applications typically use one of two
             other NodeXL graph-drawing classes:
             </para>
            
             <list type="number">
            
             <item><description>
             NodeXLControl, which is a FrameworkElement that wraps a <see cref="T:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer"/> and hosts its <see cref="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.VisualCollection"/>.  NodeXLControl is meant for use in
             WPF desktop applications.  It automatically lays out the graph before
             drawing it.
             </description></item>
            
             <item><description>
             <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual"/>, which is a Visual that wraps a <see cref="T:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer"/> and hosts its <see cref="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.VisualCollection"/>.  This is a lower-level alternative
             to NodeXLControl and can be used anywhere a Visual is more appropriate than
             a FrameworkElement.  Like <see cref="T:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer"/>, <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual"/> does not lay out the graph before drawing it.
             </description></item>
            
             </list>
            
             <para>
             If you do use <see cref="T:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer"/> directly, rendering the graph
             requires a custom wrapper that hosts the GraphDrawer.<see cref="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.VisualCollection"/> object.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.DrawerBase">
            <summary>
            Base class for classes that perform drawing operations.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DrawerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.DrawerBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DrawerBase.CreateFrozenSolidColorBrush(System.Windows.Media.Color)">
             <summary>
             Creates a SolidColorBrush and freezes it.
             </summary>
            
             <param name="oColor">
             The brush color.
             </param>
            
             <returns>
             A new frozen SolidColorBrush.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DrawerBase.CreateFrozenPen(System.Windows.Media.Brush,System.Double)">
             <summary>
             Creates a Pen and freezes it.
             </summary>
            
             <param name="oBrush">
             The brush to use.
             </param>
            
             <param name="dThickness">
             The pen thickness.
             </param>
            
             <returns>
             A new frozen Pen.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DrawerBase.FireRedrawRequired">
            <summary>
            Fires the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.DrawerBase.RedrawRequired"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DrawerBase.FireLayoutRequired">
            <summary>
            Fires the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.DrawerBase.LayoutRequired"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DrawerBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="E:Microsoft.NodeXL.Visualization.Wpf.DrawerBase.RedrawRequired">
             <summary>
             Occurs when a change occurs that requires a graph redraw.
             </summary>
            
             <remarks>
             The event is fired when a change is made to the object that might
             affect the appearance of the graph.  The object owner should redraw the
             graph but does not have to lay out the graph again.
             </remarks>
        </member>
        <member name="E:Microsoft.NodeXL.Visualization.Wpf.DrawerBase.LayoutRequired">
             <summary>
             Occurs when a change occurs that requires the graph to be laid out
             again.
             </summary>
            
             <remarks>
             The event is fired when any change is made to the object that might
             affect the layout of the graph.  The owner should lay out the graph and
             redraw it in response to the event.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.#ctor(System.Windows.Media.Visual)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer"/> class.
             </summary>
            
             <param name="parentVisual">
             The parent of the contained <see cref="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.VisualCollection"/>.  This is usually a
             FrameworkElement that is hosting the collection.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)">
             <summary>
             Draws a laid-out graph onto the contained collection of Visual objects.
             </summary>
            
             <param name="graph">
             The graph to draw onto the contained collection of Visual objects.  The
             graph should have already been laid out.  You can use one of the
             supplied layout classes to do this.
             </param>
            
             <param name="graphDrawingContext">
             Provides access to objects needed for graph-drawing operations.
             </param>
            
             <remarks>
             If you want to add a Visual on top of the graph, call <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.AddVisualOnTopOfGraph(System.Windows.Media.Visual)"/> after this method returns.
            
             <para>
             The collection of Visual objects is accessible via the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.VisualCollection"/> property.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.TryGetVertexFromPoint(System.Windows.Point,Microsoft.NodeXL.Core.IVertex@)">
             <summary>
             Attempts to get the vertex containing a specified <see cref="T:System.Windows.Point"/>.
             </summary>
            
             <param name="point">
             Point to get a vertex for.
             </param>
            
             <param name="vertex">
             Where the <see cref="T:Microsoft.NodeXL.Core.IVertex"/> object gets stored if true is
             returned.
             </param>
            
             <returns>
             true if a vertex containing the point was found, false if not.
             </returns>
            
             <remarks>
             This method looks for a vertex that contains <paramref name="point"/>.
             If there is such a vertex, the vertex is stored at <paramref name="vertex"/> and true is returned.  Otherwise, <paramref name="vertex"/> is set to null and false is returned.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.GetVerticesFromRectangle(System.Windows.Rect)">
             <summary>
             Gets any vertices that intersect a specified <see cref="T:System.Windows.Rect"/>.
             </summary>
            
             <param name="rectangle">
             Rectangle to use.
             </param>
            
             <returns>
             A collection of vertices that intersect <paramref name="rectangle"/>.
             </returns>
            
             <remarks>
             This method return a collection of all vertices that intersect
             <paramref name="rectangle"/>.  The returned collection may be empty
             but is never null.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.RedrawVertex(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)">
             <summary>
             Redraws a vertex that was drawn by <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)"/>.
             </summary>
            
             <param name="vertex">
             The vertex to redraw onto the contained collection of Visual objects.
             </param>
            
             <param name="graphDrawingContext">
             Provides access to objects needed for graph-drawing operations.  This
             must be the same object that was passed to <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)"/> the
             last time the entire graph was drawn.
             </param>
            
             <remarks>
             Use this method to redraw a vertex whose attributes (such as its
             selected state) have changed without incurring the overhead of
             redrawing the entire graph.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.RedrawEdge(Microsoft.NodeXL.Core.IEdge,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)">
             <summary>
             Redraws an edge that was drawn by <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)"/>.
             </summary>
            
             <param name="edge">
             The edge to redraw onto the contained collection of Visual objects.
             </param>
            
             <param name="graphDrawingContext">
             Provides access to objects needed for graph-drawing operations.  This
             must be the same object that was passed to <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)"/> the
             last time the entire graph was drawn.
             </param>
            
             <remarks>
             Use this method to redraw an edge whose attributes (such as its
             selected state) have changed without incurring the overhead of
             redrawing the entire graph.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.AddVisualOnTopOfGraph(System.Windows.Media.Visual)">
             <summary>
             Adds a caller-supplied Visual on top of the graph.
             </summary>
            
             <param name="visual">
             The Visual to add on top of the graph.
             </param>
            
             <remarks>
             Call this method after calling <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)"/> to add a Visual
             on top of the graph.  The added Visual gets removed when <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)"/> is called again.  You can also remove the Visual
             without redrawing the graph by calling <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.RemoveVisualFromTopOfGraph(System.Windows.Media.Visual)"/>.
            
             <para>
             An InvalidOperationException is thrown if the Visual has already been
             added.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.RemoveVisualFromTopOfGraph(System.Windows.Media.Visual)">
             <summary>
             Removes the caller-supplied Visual from the top of the graph.
             </summary>
            
             <param name="visual">
             The Visual to remove from the top of the graph.
             </param>
            
             <remarks>
             Use this method to remove the Visual added to the top of the graph by
             <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.AddVisualOnTopOfGraph(System.Windows.Media.Visual)"/> without redrawing the graph.  The
             Visual also gets removed if <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)"/> is called again.
            
             <para>
             If the Visual doesn't exist in the VisualCollection, which will occur
             if <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)"/> was called after the Visual was added, this
             method does nothing.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawBackground(Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)">
             <summary>
             Draws the graph's background.
             </summary>
            
             <param name="oGraphDrawingContext">
             Provides access to objects needed for graph-drawing operations.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawVertex(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)">
             <summary>
             Draws a vertex onto the contained collection of Visual objects.
             </summary>
            
             <param name="oVertex">
             The vertex to draw onto the contained collection of Visual objects.
             </param>
            
             <param name="oGraphDrawingContext">
             Provides access to objects needed for graph-drawing operations.
             </param>
            
             <remarks>
             This method adds a DrawingVisual for the vertex to
             m_oAllVertexDrawingVisuals and adds a VertexDrawingHistory to
             oGraphDrawingContext.VertexDrawingHistories.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawEdge(Microsoft.NodeXL.Core.IEdge,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)">
             <summary>
             Draws an edge onto the contained collection of Visual objects.
             </summary>
            
             <param name="oEdge">
             The edge to draw onto the contained collection of Visual objects.
             </param>
            
             <param name="oGraphDrawingContext">
             Provides access to objects needed for graph-drawing operations.
             </param>
            
             <remarks>
             This method adds a DrawingVisual for the edge to either
             m_oUnselectedEdgeDrawingVisuals or m_oSelectedEdgeDrawingVisuals, and
             adds an EdgeDrawingHistory to
             oGraphDrawingContext.EdgeDrawingHistories.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.GetEdgeDrawingVisuals(Microsoft.NodeXL.Visualization.Wpf.EdgeDrawingHistory)">
             <summary>
             Gets a DrawingVisual that contains all the visuals for either 
             unselected edges or selected edges.
             </summary>
            
             <param name="oEdgeDrawingHistory">
             Determines which DrawingVisual gets returned.
             </param>
            
             <returns>
             If <paramref name="oEdgeDrawingHistory" /> indicates that the edge was
             drawn as unselected, then the DrawingVisual that contains all the
             visuals for unselected edges is returned.  Otherwise, the DrawingVisual
             that contains all the visuals for selected edges is returned.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.SaveVertexOnDrawingVisual(Microsoft.NodeXL.Core.IVertex,System.Windows.Media.DrawingVisual)">
             <summary>
             Saves a vertex on the DrawingVisual with which the vertex was drawn.
             </summary>
            
             <param name="oVertex">
             The vertex that was drawn.
             </param>
            
             <param name="oDrawingVisual">
             The DrawingVisual with which <paramref name="oVertex"/> was drawn.
             </param>
            
             <remarks>
             The vertex can be retrieved from the DrawingVisual with <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.RetrieveVertexFromDrawingVisual(System.Windows.Media.DrawingVisual)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.RetrieveVertexFromDrawingVisual(System.Windows.Media.DrawingVisual)">
             <summary>
             Retrieves a vertex from the DrawingVisual with which the vertex was
             drawn.
             </summary>
            
             <param name="oDrawingVisual">
             The DrawingVisual to retrieve a vertex from.
             </param>
            
             <returns>
             The vertex that was drawn with <paramref name="oDrawingVisual"/>.
             </returns>
            
             <remarks>
             This method retrieves the vertex that was saved on a DrawingVisual by
             <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.SaveVertexOnDrawingVisual(Microsoft.NodeXL.Core.IVertex,System.Windows.Media.DrawingVisual)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.m_oVisualCollection">
            Collection of Visual objects that represent the graph's vertices and
            edges.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.m_oAllVertexDrawingVisuals">
            Visual that contains all the vertex visuals, or null if the graph
            hasn't been drawn yet.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.m_oUnselectedEdgeDrawingVisuals">
            Visual that contains all the visuals for unselected edges, or null if
            the graph hasn't been drawn yet.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.m_oSelectedEdgeDrawingVisuals">
            Visual that contains all the visuals for selected edges, or null if the
            graph hasn't been drawn yet.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.m_oVertexDrawer">
            Draws the graph's vertices.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.m_oEdgeDrawer">
            Draws the graph's edges.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.m_oBackColor">
            Background color.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.VisualCollection">
             <summary>
             Gets the VisualCollection that contains the Visual objects representing
             the graph's vertices and edges.
             </summary>
            
             <value>
             The VisualCollection that contains the Visual objects representing the
             graph's vertices and edges.
             </value>
            
             <remarks>
             This should be treated as read-only and used only to host the graph in
             a FrameworkElement.  Its contents should not be modified.  If you want
             to add a Visual on top of the graph, call <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.AddVisualOnTopOfGraph(System.Windows.Media.Visual)"/> after calling <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)"/>.
            
             <para>
             <see cref="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.DrawGraph(Microsoft.NodeXL.Core.IGraph,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)"/> draws a NodeXL graph onto this collection.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.VertexDrawer">
             <summary>
             Gets the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer"/> used to draw the graph's
             vertices.
             </summary>
            
             <value>
             The <see cref="T:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer"/> used to draw the graph's vertices.
             </value>
            
             <remarks>
             This property is provided to allow the caller to access the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer"/> properties and methods that affect the
             graph's appearance, such as <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.Shape"/>.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.EdgeDrawer">
             <summary>
             Gets the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer"/> used to draw the graph's edges.
             </summary>
            
             <value>
             The <see cref="T:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer"/> used to draw the graph's edges.
             </value>
            
             <remarks>
             This property is provided to allow the caller to access the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer"/> properties that affect the graph's appearance,
             such as <see cref="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.Width"/>.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.BackColor">
             <summary>
             Gets or sets the graph's background color.
             </summary>
            
             <value>
             The graph's background color, as a <see cref="T:System.Windows.Media.Color"/>.  The default value is
             SystemColors.<see cref="P:System.Windows.SystemColors.WindowColor"/>.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.SolidDiamondVertexDrawingHistory">
            <summary>
            Retains information about how one vertex was drawn as a <see cref="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.SolidDiamond"/>.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.DiamondVertexDrawingHistory">
            <summary>
            Retains information about how one vertex was drawn as a <see cref="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.Diamond"/>.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DiamondVertexDrawingHistory.#ctor(Microsoft.NodeXL.Core.IVertex,System.Windows.Media.DrawingVisual,System.Boolean,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.DiamondVertexDrawingHistory"/>
             class.
             </summary>
            
             <param name="vertex">
             The vertex that was drawn.
             </param>
            
             <param name="drawingVisual">
             The DrawingVisual object that was used to draw the vertex.
             </param>
            
             <param name="drawnAsSelected">
             true if the vertex was drawn as selected.
             </param>
            
             <param name="halfWidth">
             The half-width of the diamond that was drawn for <paramref name="vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DiamondVertexDrawingHistory.GetEdgeEndpoint(Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory,System.Windows.Point@)">
             <summary>
             Gets the endpoint of an edge that is connected to <see cref="T:Microsoft.NodeXL.Core.Vertex"/>.
             </summary>
            
             <param name="otherVertexDrawingHistory">
             The <paramref name="VertexDrawingHistory"/> object that retains
             information about how the edge's other vertex was drawn.
             </param>
            
             <param name="edgeEndpoint">
             Where the edge endpoint gets stored.  The endpoint is somewhere on <see cref="T:Microsoft.NodeXL.Core.Vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DiamondVertexDrawingHistory.GetSelfLoopEndpoint(Microsoft.Research.CommunityTechnologies.GraphicsLib.RectangleEdge)">
             <summary>
             Gets the endpoint of an edge that is connected to <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/> and is a self-loop.
             </summary>
            
             <param name="farthestGraphRectangleEdge">
             The edge of the graph rectangle that is farthest from <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/>.
             </param>
            
             <returns>
             The self-loop endpoint.  The endpoint is somewhere on <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/>.
             </returns>
            
             <remarks>
             A self-loop is an edge that connects a vertex to itself.  This method
             determines the single endpoint of the self-loop, which gets drawn as a
             line looping back to its starting point.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DiamondVertexDrawingHistory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.DiamondVertexDrawingHistory.m_dHalfWidth">
            The half-width of the diamond that was drawn.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.DiamondVertexDrawingHistory.HalfWidth">
             <summary>
             Gets the half-width of the diamond that was drawn.
             </summary>
            
             <value>
             The half-width of the diamond that was drawn, as a Double.
             </value>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.SolidDiamondVertexDrawingHistory.#ctor(Microsoft.NodeXL.Core.IVertex,System.Windows.Media.DrawingVisual,System.Boolean,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.SolidDiamondVertexDrawingHistory"/>
             class.
             </summary>
            
             <param name="vertex">
             The vertex that was drawn.
             </param>
            
             <param name="drawingVisual">
             The DrawingVisual object that was used to draw the vertex.
             </param>
            
             <param name="drawnAsSelected">
             true if the vertex was drawn as selected.
             </param>
            
             <param name="halfWidth">
             The half-width of the diamond that was drawn for <paramref name="vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.SolidDiamondVertexDrawingHistory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.PrimaryLabelVertexDrawingHistory">
            <summary>
            Retains information about how one vertex was drawn as a primary label.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.PrimaryLabelVertexDrawingHistory.#ctor(Microsoft.NodeXL.Core.IVertex,System.Windows.Media.DrawingVisual,System.Boolean,System.Windows.Rect)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.PrimaryLabelVertexDrawingHistory"/>
             class.
             </summary>
            
             <param name="vertex">
             The vertex that was drawn.
             </param>
            
             <param name="drawingVisual">
             The DrawingVisual object that was used to draw the vertex.
             </param>
            
             <param name="drawnAsSelected">
             true if the vertex was drawn as selected.
             </param>
            
             <param name="rectangle">
             The rectangle that was drawn for <paramref name="vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.PrimaryLabelVertexDrawingHistory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil">
             <summary>
             Utility methods for drawing with WPF.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.#cctor">
            <summary>
            Static constructor for the WpfGraphicsUtil class.
            </summary>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.ColorToWpfColor(System.Drawing.Color)">
             <overloads>
             Converts a System.Drawing.Color to a System.Windows.Media.Color.
             </overloads>
            
             <summary>
             Converts a System.Drawing.Color to a System.Windows.Media.Color using
             the alpha value of the System.Drawing.Color.
             </summary>
            
             <param name="color">
             The System.Drawing.Color to convert.
             </param>
            
             <returns>
             <paramref name="color" /> converted to a System.Windows.Media color.
             The alpha value is the same as the alpha value of <paramref
             name="color" />.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.ColorToWpfColor(System.Drawing.Color,System.Byte)">
             <summary>
             Converts a System.Drawing.Color to a System.Windows.Media.Color using a
             new alpha value.
             </summary>
            
             <param name="color">
             The System.Drawing.Color to convert.
             </param>
            
             <param name="newAlpha">
             The new alpha value to use.  The alpha value of <paramref
             name="color" /> is ignored.
             </param>
            
             <returns>
             <paramref name="color" /> converted to a System.Windows.Media color,
             with an alpha value of <paramref name="newAlpha" />.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.KnownColorToWpfColor(System.Drawing.KnownColor)">
             <summary>
             Converts a System.Drawing.KnownColor to a System.Windows.Media.Color.
             </summary>
            
             <param name="knownColor">
             The System.Drawing.KnownColor to convert.
             </param>
            
             <returns>
             <paramref name="knownColor" /> converted to a
             System.Windows.Media color.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.VisualToBitmap(System.Windows.Media.Visual,System.Int32,System.Int32)">
             <summary>
             Renders a Visual to a System.Drawing.Bitmap.
             </summary>
            
             <param name="visual">
             The Visual to render.
             </param>
            
             <param name="bitmapWidth">
             Bitmap width, in pixels.
             </param>
            
             <param name="bitmapHeight">
             Bitmap height, in pixels.
             </param>
            
             <returns>
             A System.Drawing.Bitmap with the specified dimensions.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.RectToRectangle(System.Windows.Rect)">
             <summary>
             Converts a System.Windows.Rect to a System.Drawing.Rectangle.
             </summary>
            
             <param name="rect">
             The System.Windows.Rect to convert.
             </param>
            
             <returns>
             <paramref name="rect" /> converted to a System.Drawing.Rectangle.
             </returns>
            
             <remarks>
             The conversion is performed via a ceiling on the left and top
             coordinates and a floor on the right and bottom coordinates.  This
             forces the converted rectangle to be no larger than the original.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.RectangleToRect(System.Drawing.Rectangle)">
             <summary>
             Converts a System.Drawing.Rectangle to a System.Windows.Rect.
             </summary>
            
             <param name="rectangle">
             The System.Drawing.Rectangle to convert.
             </param>
            
             <returns>
             <paramref name="rectangle" /> converted to a System.Windows.Rect.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.WpfPointToPoint(System.Windows.Point)">
             <summary>
             Converts a System.Windows.Point to a System.Drawing.Point.
             </summary>
            
             <param name="point">
             The System.Windows.Point to convert.
             </param>
            
             <returns>
             <paramref name="point" /> converted to a System.Drawing.Point.
             </returns>
            
             <remarks>
             The conversion from Double coordinates to Int32 coordinates is
             performed via truncation.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.PointFToWpfPoint(System.Drawing.PointF)">
             <summary>
             Converts a System.Drawing.PointF to a System.Windows.Point.
             </summary>
            
             <param name="pointF">
             The System.Drawing.PointF to convert.
             </param>
            
             <returns>
             <paramref name="pointF" /> converted to a System.Windows.Point.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.GetAngleBetweenPoints(System.Windows.Point,System.Windows.Point)">
             <summary>
             Gets the angle between two points.
             </summary>
            
             <param name="point1">
             The first point.
             </param>
            
             <param name="point2">
             The second point.
             </param>
            
             <returns>
             The angle between the two points, in radians, as computed by
             Math.Atan2.  Ranges between 0 and PI (0 to 180 degrees) and 0 to -PI
             (0 to -180 degrees).
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.SquareFromCenterAndHalfWidth(System.Windows.Point,System.Double)">
             <summary>
             Returns a square given a center point and half-width.
             </summary>
            
             <param name="center">
             The square's center.
             </param>
            
             <param name="halfWidth">
             One half the width of the square.
             </param>
            
             <returns>
             The specified square, as a System.Windows.Rect.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.DiamondFromCenterAndHalfWidth(System.Windows.Point,System.Double)">
             <summary>
             Creates a PathGeometry that represents a diamond centered on a
             specified point.
             </summary>
            
             <param name="center">
             The diamond's center.
             </param>
            
             <param name="halfWidth">
             One half the width of the diamond.
             </param>
            
             <returns>
             A PathGeometry that represents the specified diamond.  The PathGeometry
             is frozen.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.TriangleFromCenterAndHalfWidth(System.Windows.Point,System.Double)">
             <summary>
             Creates a PathGeometry that represents a triangle centered on a
             specified point.
             </summary>
            
             <param name="center">
             The triangle's center.
             </param>
            
             <param name="halfWidth">
             One half the width of the square that bounds the triangle.
             </param>
            
             <returns>
             A PathGeometry that represents the specified triangle.  The
             PathGeometry is frozen.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.TriangleBoundsFromCenterAndHalfWidth(System.Windows.Point,System.Double)">
             <summary>
             Creates a rectangle that bounds a triangle centered on a specified
             point.
             </summary>
            
             <param name="center">
             The triangle's center.
             </param>
            
             <param name="halfWidth">
             One half the width of the square that bounds the triangle.
             </param>
            
             <returns>
             A rectangle that bounds the specified triangle.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.PathGeometryFromPoints(System.Windows.Point,System.Windows.Point[])">
             <summary>
             Creates a PathGeometry from a sequence of points.
             </summary>
            
             <param name="startPoint">
             The first point in the sequence.
             </param>
            
             <param name="otherPoints">
             The other points in the sequence.
             </param>
            
             <returns>
             A PathGeometry consisting of LineSegments connecting the specified
             points.  The PathGeometry is closed and frozen.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.GetRectangleMinusMargin(System.Windows.Rect,System.Double)">
             <summary>
             Subtracts a margin from a rectangle.
             </summary>
            
             <param name="rectangle">
             The rectangle to subtract the margin from.
             </param>
            
             <param name="margin">
             The margin to subtract from each edge.  Must be greater than or equal
             to zero.
             </param>
            
             <returns>
             <paramref name="rectangle" /> with <paramref name="margin" />
             subtracted from each side, or Rect.Empty.
             </returns>
            
             <remarks>
             If <paramref name="rectangle" /> is narrower or shorter than twice the
             <paramref name="margin" />, Rect.Empty is returned.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.MoveRectangleWithinBounds(System.Windows.Rect,System.Windows.Rect,System.Boolean)">
             <summary>
             Moves a rectangle so it is contained within an outer bounding
             rectangle.
             </summary>
            
             <param name="rectangle">
             The rectangle that needs to be contained within <paramref
             name="boundingRectangle" />.
             </param>
            
             <param name="boundingRectangle">
             The rectangle that <paramref name="rectangle" /> needs to be contained
             within.
             </param>
            
             <param name="resizeRectangleIfNecessary">
             If this is true and moving <paramref name="rectangle" /> isn't enough
             to contain it within <paramref name="boundingRectangle" />, <paramref
             name="rectangle" /> is resized to force it to be contained.  If this is
             false, any excess is left hanging over the right and bottom edges of
             <paramref name="boundingRectangle" />.
             </param>
            
             <returns>
             A copy of <paramref name="rectangle" /> that is contained within
             <paramref name="boundingRectangle" />.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.GetFarthestRectangleEdge(System.Windows.Point,System.Windows.Rect)">
             <summary>
             Determines which edge of a rectangle is farthest from a point within
             the rectangle.
             </summary>
            
             <param name="point">
             The point to use.  Should be contained within <paramref name="rectangle"/>.
             </param>
            
             <param name="rectangle">
             The rectangle to use.
             </param>
            
             <returns>
             The edge of <paramref name="rectangle"/> that is farthest from
             <paramref name="point"/>, as a <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.RectangleEdge"/>.
             </returns>
            
             <remarks>
             If the width or height of <paramref name="rectangle"/> is zero, or
             <paramref name="point"/> is not contained within <paramref name="rectangle"/>, RectangleEdge.Left is arbitrarily returned.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.GetRotatedMatrix(System.Windows.Point,System.Double)">
             <summary>
             Gets an identity Matrix rotatated a specified angle about a point.
             </summary>
            
             <param name="centerOfRotation">
             The center of rotation.
             </param>
            
             <param name="angleToRotateDegrees">
             The angle to rotate the Matrix, in degrees.
             </param>
            
             <returns>
             A new identity Matrix rotated <paramref name="angleToRotateDegrees" />
             about <paramref name="centerOfRotation" />.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.FreezeIfFreezable(System.Windows.Freezable)">
             <summary>
             Freezes a freezable object if possible.
             </summary>
            
             <param name="freezable">
             The object to freeze.
             </param>
            
             <returns>
             true if the object was frozen.
             </returns>
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.Cosine30Degrees">
            Used in equilateral triangle calculations.
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfGraphicsUtil.Tangent30Degrees">
            
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext">
            <summary>
            Provides access to objects needed for graph-drawing operations.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.#ctor(System.Windows.Rect,System.Int32,System.Windows.Media.Color)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext"/>
             class.
             </summary>
            
             <param name="graphRectangle">
             The <see cref="T:System.Windows.Rect"/> the graph is being drawn within.
             </param>
            
             <param name="margin">
             The margin that was used to lay out the graph.  If <paramref name="graphRectangle"/> is {L=0, T=0, R=50, B=30} and <paramref name="margin"/> is 5, for example, then the graph was laid out within
             the rectangle {L=5, T=5, R=45, B=25}.
             </param>
            
             <param name="backColor">
             The graph's background color.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.m_oGraphRectangle">
            Rectangle to draw within.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.m_iMargin">
            Margin the graph was laid out within.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.m_oBackColor">
            The graph's background color.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.m_oVertexDrawingHistories">
            Dictionary of objects that retain information about each vertex that
            was drawn.  The key is the IVertex.ID and the value is a
            VertexDrawingHistory object for that vertex.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.m_oEdgeDrawingHistories">
            Dictionary of objects that retain information about each edge that was
            drawn.  The key is the IEdge.ID and the value is an EdgeDrawingHistory
            object for that edge.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.GraphRectangle">
             <summary>
             Gets the rectangle the graph is being drawn within.
             </summary>
            
             <value>
             The rectangle the graph is being drawn within, as a <see cref="T:System.Windows.Rect"/>.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.GraphRectangleMinusMargin">
             <summary>
             Gets the rectangle the graph is being drawn within, reduced on all
             sides by the margin.
             </summary>
            
             <value>
             The rectangle the graph is being drawn within, as a <see cref="T:System.Windows.Rect"/>, reduced by <see cref="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.Margin"/>.
             </value>
            
             <remarks>
             If the graph rectangle is narrower or shorter than twice the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.Margin"/>, Rect.Empty is returned.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.Margin">
             <summary>
             Gets the margin the graph was laid out within.
             </summary>
            
             <value>
             The margin that was used to lay out the graph.  Always greater than or
             equal to zero.
             </value>
            
             <remarks>
             If <see cref="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.GraphRectangle"/> is {L=0, T=0, R=50, B=30} and <see cref="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.Margin"/> is 5, for example, then the graph was laid out within
             the rectangle {L=5, T=5, R=45, B=25}.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.BackColor">
             <summary>
             Gets the graph's background color.
             </summary>
            
             <value>
             The graph's background color.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.VertexDrawingHistories">
             <summary>
             Gets a dictionary of objects that retain information about each vertex
             that was drawn.
             </summary>
            
             <value>
             A dictionary of objects that retain information about each vertex that
             was drawn.
             </value>
            
             <remarks>
             The key is the IVertex.ID and the value is a VertexDrawingHistory
             object for that vertex.
            
             <para>
             If a vertex isn't drawn (if it has a <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.Visibility"/> value
             of <see cref="F:Microsoft.NodeXL.Core.VisibilityKeyValue.Filtered"/>,
             for example), it does not get added to the dictionary.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext.EdgeDrawingHistories">
             <summary>
             Gets a dictionary of objects that retain information about each edge
             that was drawn.
             </summary>
            
             <value>
             A dictionary of objects that retain information about each edge that
             was drawn.
             </value>
            
             <remarks>
             The key is the IEdge.ID and the value is an EdgeDrawingHistory object
             for that edge.
            
             <para>
             If an edge isn't drawn (if it has a <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.Visibility"/> value
             of <see cref="F:Microsoft.NodeXL.Core.VisibilityKeyValue.Filtered"/>,
             for example), it does not get added to the dictionary.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.SolidSquareVertexDrawingHistory">
            <summary>
            Retains information about how one vertex was drawn as a <see cref="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.SolidSquare"/>.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.SquareVertexDrawingHistory">
            <summary>
            Retains information about how one vertex was drawn as a <see cref="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.Square"/>.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.SquareVertexDrawingHistory.#ctor(Microsoft.NodeXL.Core.IVertex,System.Windows.Media.DrawingVisual,System.Boolean,System.Windows.Rect)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.SquareVertexDrawingHistory"/>
             class.
             </summary>
            
             <param name="vertex">
             The vertex that was drawn.
             </param>
            
             <param name="drawingVisual">
             The DrawingVisual object that was used to draw the vertex.
             </param>
            
             <param name="drawnAsSelected">
             true if the vertex was drawn as selected.
             </param>
            
             <param name="square">
             The square that was drawn for <paramref name="vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.SquareVertexDrawingHistory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.SolidSquareVertexDrawingHistory.#ctor(Microsoft.NodeXL.Core.IVertex,System.Windows.Media.DrawingVisual,System.Boolean,System.Windows.Rect)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.SolidSquareVertexDrawingHistory"/>
             class.
             </summary>
            
             <param name="vertex">
             The vertex that was drawn.
             </param>
            
             <param name="drawingVisual">
             The DrawingVisual object that was used to draw the vertex.
             </param>
            
             <param name="drawnAsSelected">
             true if the vertex was drawn as selected.
             </param>
            
             <param name="rectangle">
             The rectangle that was drawn for <paramref name="vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.SolidSquareVertexDrawingHistory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.SolidTriangleVertexDrawingHistory">
            <summary>
            Retains information about how one vertex was drawn as a <see cref="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.SolidTriangle"/>.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.TriangleVertexDrawingHistory">
            <summary>
            Retains information about how one vertex was drawn as a <see cref="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.Triangle"/>.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.TriangleVertexDrawingHistory.#ctor(Microsoft.NodeXL.Core.IVertex,System.Windows.Media.DrawingVisual,System.Boolean,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.TriangleVertexDrawingHistory"/>
             class.
             </summary>
            
             <param name="vertex">
             The vertex that was drawn.
             </param>
            
             <param name="drawingVisual">
             The DrawingVisual object that was used to draw the vertex.
             </param>
            
             <param name="drawnAsSelected">
             true if the vertex was drawn as selected.
             </param>
            
             <param name="halfWidth">
             The half-width of the triangle that was drawn for <paramref name="vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.TriangleVertexDrawingHistory.GetEdgeEndpoint(Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory,System.Windows.Point@)">
             <summary>
             Gets the endpoint of an edge that is connected to <see cref="T:Microsoft.NodeXL.Core.Vertex"/>.
             </summary>
            
             <param name="otherVertexDrawingHistory">
             The <paramref name="VertexDrawingHistory"/> object that retains
             information about how the edge's other vertex was drawn.
             </param>
            
             <param name="edgeEndpoint">
             Where the edge endpoint gets stored.  The endpoint is somewhere on <see cref="T:Microsoft.NodeXL.Core.Vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.TriangleVertexDrawingHistory.GetSelfLoopEndpoint(Microsoft.Research.CommunityTechnologies.GraphicsLib.RectangleEdge)">
             <summary>
             Gets the endpoint of an edge that is connected to <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/> and is a self-loop.
             </summary>
            
             <param name="farthestGraphRectangleEdge">
             The edge of the graph rectangle that is farthest from <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/>.
             </param>
            
             <returns>
             The self-loop endpoint.  The endpoint is somewhere on <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory.Vertex"/>.
             </returns>
            
             <remarks>
             A self-loop is an edge that connects a vertex to itself.  This method
             determines the single endpoint of the self-loop, which gets drawn as a
             line looping back to its starting point.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.TriangleVertexDrawingHistory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.TriangleVertexDrawingHistory.m_dHalfWidth">
            The half-width of the triangle that was drawn.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.TriangleVertexDrawingHistory.HalfWidth">
             <summary>
             Gets the half-width of the triangle that was drawn.
             </summary>
            
             <value>
             The half-width of the triangle that was drawn, as a Double.
             </value>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.SolidTriangleVertexDrawingHistory.#ctor(Microsoft.NodeXL.Core.IVertex,System.Windows.Media.DrawingVisual,System.Boolean,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.SolidTriangleVertexDrawingHistory"/>
             class.
             </summary>
            
             <param name="vertex">
             The vertex that was drawn.
             </param>
            
             <param name="drawingVisual">
             The DrawingVisual object that was used to draw the vertex.
             </param>
            
             <param name="drawnAsSelected">
             true if the vertex was drawn as selected.
             </param>
            
             <param name="halfWidth">
             The half-width of the triangle that was drawn for <paramref name="vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.SolidTriangleVertexDrawingHistory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.ImageVertexDrawingHistory">
            <summary>
            Retains information about how one vertex was drawn as an image.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.ImageVertexDrawingHistory.#ctor(Microsoft.NodeXL.Core.IVertex,System.Windows.Media.DrawingVisual,System.Boolean,System.Windows.Rect)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.ImageVertexDrawingHistory"/>
             class.
             </summary>
            
             <param name="vertex">
             The vertex that was drawn.
             </param>
            
             <param name="drawingVisual">
             The DrawingVisual object that was used to draw the vertex.
             </param>
            
             <param name="drawnAsSelected">
             true if the vertex was drawn as selected.
             </param>
            
             <param name="rectangle">
             The rectangle that was drawn for <paramref name="vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.ImageVertexDrawingHistory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker">
             <summary>
             Contains methods that check method arguments and property values.
             </summary>
            
             <remarks>
             This can be used by a class that wants to check values passed to its
             property setters and arguments passed to its methods.  The CheckXXX()
             methods in this class throw an exception if a parameter value or method
             argument is invalid.
            
             <para>
             This class is marked internal to avoid compiler error CS0433 ("The
             type ... exists in both ...") when an executable references two or more
             assemblies that use this class.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.#ctor(System.String)">
             <summary>
             Initializes a new instance of the ArgumentChecker class.
             </summary>
            
             <param name="sOwnerClassName">
             Class name of the object that created this object.  The class name gets
             prepended to all exception messages.  Sample: "MyClass".
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotNull(System.String,System.Object)">
             <summary>
             Throws an exception if a property value is null.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEmpty(System.String,System.String)">
             <summary>
             Throws an exception if a string property value is null or has a length
             of zero.
             </summary>
            
             <param name="sPropertyName">
             Name of the string property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Double)">
             <summary>
             Throws an exception if a Double property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Decimal)">
             <summary>
             Throws an exception if a Decimal property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="decPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotNegative(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is negative.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
            
             <param name="sInvalidValue">
             Invalid value for <paramref name="sPropertyValue" />.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iInvalidValue">
             Invalid value for <paramref name="iPropertyValue" />.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Int32,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="iMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Single,System.Single,System.Single)">
             <summary>
             Throws an exception if a Single property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="fPropertyValue">
             Property value to check.
             </param>
            
             <param name="fMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="fMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Double,System.Double,System.Double)">
             <summary>
             Throws an exception if a Double property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
            
             <param name="dMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="dMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyIsDefined(System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a property value is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oPropertyValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNull(System.String,System.String,System.Object)">
             <summary>
             Throws an exception if a method argument is null.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotEmpty(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string method argument is null or has a length
             of zero.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="sArgumentValue">
             Argument value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Double)">
             <summary>
             Throws an exception if a Double method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="dArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentIsDefined(System.String,System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a method argument is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oArgumentValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is an inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is no inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is an inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is no inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.m_sOwnerClassName">
            Class name of the object that created this object.
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase">
            <summary>
            Base class for classes that draw vertices and edges.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.DefaultPenThickness">
            Default pen thickness.
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.GetVisibility(Microsoft.NodeXL.Core.IMetadataProvider)">
             <summary>
             Gets the visibility of a vertex or edge.
             </summary>
            
             <param name="oVertexOrEdge">
             The vertex or edge.
             </param>
            
             <returns>
             If the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.Visibility"/> key is present on
             <paramref name="oVertexOrEdge"/>, the key's value is returned as a
             <see cref="T:Microsoft.NodeXL.Core.VisibilityKeyValue"/>.  Otherwise, <see cref="F:Microsoft.NodeXL.Core.VisibilityKeyValue.Visible"/> is returned.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.GetDrawAsSelected(Microsoft.NodeXL.Core.IMetadataProvider)">
             <summary>
             Gets a flag indicating whether a vertex or edge should be drawn as
             selected.
             </summary>
            
             <param name="oVertexOrEdge">
             The vertex or edge.
             </param>
            
             <returns>
             true if the edge or vertex should be drawn as selected.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.GetColor(Microsoft.NodeXL.Core.IMetadataProvider,Microsoft.NodeXL.Core.VisibilityKeyValue,System.Boolean)">
             <overloads>
             Gets the color of a vertex or edge.
             </overloads>
            
             <summary>
             Gets the color of a vertex or edge.
             </summary>
            
             <param name="oVertexOrEdge">
             The vertex or edge to get the color for.
             </param>
            
             <param name="eVisibility">
             The visibility of the vertex or edge.  This can be obtained with <see cref="M:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.GetVisibility(Microsoft.NodeXL.Core.IMetadataProvider)"/>.
             </param>
            
             <param name="bDrawAsSelected">
             true if <paramref name="oVertexOrEdge"/> should be drawn as selected.
             </param>
            
             <returns>
             The color of the vertex or edge.  This includes any per-vertex or
             per-edge alpha value specified on the vertex or edge, along with the
             visibility specified by <paramref name="eVisibility"/>.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.GetColor(Microsoft.NodeXL.Core.IMetadataProvider,Microsoft.NodeXL.Core.VisibilityKeyValue,System.String,System.Windows.Media.Color,System.Boolean)">
             <summary>
             Gets the color of a vertex or edge given a default color and a metadata
             key.
             </summary>
            
             <param name="oVertexOrEdge">
             The vertex or edge to get the color for.
             </param>
            
             <param name="eVisibility">
             The visibility of the vertex or edge.  This can be obtained with <see cref="M:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.GetVisibility(Microsoft.NodeXL.Core.IMetadataProvider)"/>.  Not used if <paramref name="bApplyAlpha"/>
             is false.
             </param>
            
             <param name="sKey">
             The metadata key to check for a per-vertex or per-edge color.
             </param>
            
             <param name="oDefaultColor">
             The default color to use if <paramref name="sKey"/> isn't specified
             on the vertex or edge.
             </param>
            
             <param name="bApplyAlpha">
             If true, <paramref name="eVisibility"/> and any per-vertex or per-edge
             alpha value is applied to the color.
             </param>
            
             <returns>
             The color of the vertex or edge.  If <paramref name="bApplyAlpha"/> is
             true, this includes any per-vertex or per-edge alpha value specified on
             the vertex or edge, along with the visibility specified by <paramref name="eVisibility"/>.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.GetAlpha(Microsoft.NodeXL.Core.IMetadataProvider,Microsoft.NodeXL.Core.VisibilityKeyValue,System.Byte)">
             <summary>
             Get the alpha value to use for a vertex or edge.
             </summary>
            
             <param name="oVertexOrEdge">
             The vertex or edge to get the alpha value for.
             </param>
            
             <param name="eVisibility">
             The visibility of the vertex or edge.  This can be obtained with <see cref="M:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.GetVisibility(Microsoft.NodeXL.Core.IMetadataProvider)"/>.
             </param>
            
             <param name="btDefaultAlpha">
             The alpha value to return in the vertex or edge is visible and has no
             per-vertex or per-edge alpha.
             </param>
            
             <returns>
             The alpha value to use, between 0 (transparent) and 255 (opaque).
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.TryGetColorValue(Microsoft.NodeXL.Core.IMetadataProvider,System.String,System.Windows.Media.Color@)">
             <summary>
             Attempts to get a color from a vertex or edge's metadata.
             </summary>
            
             <param name="oVertexOrEdge">
             The vertex or edge to get the color for.
             </param>
            
             <param name="sKey">
             The color's key.
             </param>
            
             <param name="oColor">
             Where the color gets stored if true is returned.
             </param>
            
             <returns>
             true if the vertex or edge contains the specified color key.
             </returns>
            
             <remarks>
             The value of the specified key can be of type
             System.Windows.Media.Color or System.Drawing.Color.  If it is of type
             System.Drawing.Color, it gets converted to type
             System.Windows.Media.Color.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.CreateDrawingObjects">
            <summary>
            Creates a set of drawing objects for use by the derived class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.GetBrush(System.Windows.Media.Color)">
             <summary>
             Gets a SolidColorBrush to use to draw a vertex or edge.
             </summary>
            
             <param name="oColor">
             The vertex or edge color.
             </param>
            
             <returns>
             A SolidColorBrush to use to draw a vertex or edge.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.GetPen(System.Windows.Media.Color,System.Double)">
             <summary>
             Gets a pen to use to draw a vertex or edge.
             </summary>
            
             <param name="oColor">
             The vertex or edge color.
             </param>
            
             <param name="dThickness">
             The pen thickness.
             </param>
            
             <returns>
             A pen to use to draw a vertex or edge.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.m_bUseSelection">
            true if vertices or edges marked as selected should be drawn as
            selected, false to draw all vertices or edges as unselected.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.m_oColor">
            Color of an unselected vertex or edge.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.m_oSelectedColor">
            Color of a selected vertex or edge.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.m_btFilteredAlpha">
            Alpha value to use for vertices and edges that are filtered.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.m_oDefaultBrush">
            Default brush to use.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.m_oDefaultPen">
            Default pen to use.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.UseSelection">
             <summary>
             Gets or sets a flag indicating whether the selected state of a vertex
             or edge should be used.
             </summary>
            
             <value>
             If true, a vertex or edge is drawn using either <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.Color"/> or
             <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.SelectedColor"/>, depending on whether the vertex or edge
             has been marked as selected with the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.IsSelected"/> key.  If false,
             <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.Color"/> is used regardless of whether the vertex or edge
             has been marked as selected.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.Color">
             <summary>
             Gets or sets the default color of unselected vertices or edges.
             </summary>
            
             <value>
             The default color of unselected vertices or edges, as a <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.Color"/>.  The default value is <see cref="P:System.Windows.SystemColors.WindowTextColor"/>.
             </value>
            
             <remarks>
             See <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.UseSelection"/> for details on selected vs. unselected
             vertices and edges.
            
             <para>
             The default color of an unselected vertex or edge can be overridden by
             setting the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerColor"/> key on the
             vertex or edge.  The key's value can be of type System.Drawing.Color or
             System.Windows.Media.Color.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.SelectedColor"/>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.SelectedColor">
             <summary>
             Gets or sets the color of selected vertices or edges.
             </summary>
            
             <value>
             The color of selected vertices or edges, as a <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.Color"/>.
             The default value is <see cref="P:System.Windows.SystemColors.HighlightColor"/>.
             </value>
            
             <remarks>
             See <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.UseSelection"/> for details on selected vs. unselected
             vertices or edges.
            
             <para>
             The color of selected vertices and edges cannot be overridden on a
             per-vertex or per-edge basis.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.Color"/>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.FilteredAlpha">
             <summary>
             Gets or sets the alpha value to use for vertices and edges that are
             filtered.
             </summary>
            
             <value>
             The alpha value to use for vertices and edges that have a <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.Visibility"/> value of <see cref="F:Microsoft.NodeXL.Core.VisibilityKeyValue.Filtered"/>.  Must be between 0 (invisible)
             and 255 (opaque).  The default value is 10.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.SphereVertexDrawingHistory">
            <summary>
            Retains information about how one vertex was drawn as a <see cref="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.Sphere"/>.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.SphereVertexDrawingHistory.#ctor(Microsoft.NodeXL.Core.IVertex,System.Windows.Media.DrawingVisual,System.Boolean,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.SphereVertexDrawingHistory"/>
             class.
             </summary>
            
             <param name="vertex">
             The vertex that was drawn.
             </param>
            
             <param name="drawingVisual">
             The DrawingVisual object that was used to draw the vertex.
             </param>
            
             <param name="drawnAsSelected">
             true if the vertex was drawn as selected.
             </param>
            
             <param name="radius">
             The radius of <paramref name="vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.SphereVertexDrawingHistory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer">
             <summary>
             Draws a graph's edges.
             </summary>
            
             <remarks>
             This class is responsible for drawing a graph's edges.  The default edge
             appearance is determined by this class's properties.  The appearance of an
             individual edge can be overridden by adding appropriate metadata to the
             edge.  The following metadata keys are honored:
            
             <list type="bullet">
            
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.Visibility"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerColor"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerAlpha"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerEdgeWidth"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.IsSelected"/></item>
            
             </list>
            
             <para>
             The values of the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerColor"/> key can be
             of type System.Windows.Media.Color or System.Drawing.Color.
             </para>
            
             <para>
             If <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.UseSelection"/> is true, an edge is
             drawn using either <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.Color"/> and <see cref="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.Width"/> or <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.SelectedColor"/>
             and <see cref="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.SelectedWidth"/>, depending on whether the edge has been
             marked as selected.  If <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.UseSelection"/> is false, <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.Color"/> and <see cref="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.Width"/> are used
             regardless of whether the edge has been marked as selected.
             </para>
            
             <para>
             When drawing the graph, call <see cref="M:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.TryDrawEdge(Microsoft.NodeXL.Core.IEdge,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext,Microsoft.NodeXL.Visualization.Wpf.EdgeDrawingHistory@)"/> for each of the
             graph's edges.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.SelfLoopCircleRadius">
            Radius of a self-loop edge, which is drawn as a circle.
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.TryDrawEdge(Microsoft.NodeXL.Core.IEdge,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext,Microsoft.NodeXL.Visualization.Wpf.EdgeDrawingHistory@)">
             <summary>
             Draws an edge.
             </summary>
            
             <param name="edge">
             The edge to draw.
             </param>
            
             <param name="graphDrawingContext">
             Provides access to objects needed for graph-drawing operations.
             </param>
            
             <param name="edgeDrawingHistory">
             Where an <see cref="T:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawingHistory"/> object that retains
             information about how the edge was drawn gets stored if true is
             returned.
             </param>
            
             <returns>
             true if the edge was drawn, false if the edge is hidden.
             </returns>
            
             <remarks>
             This method should be called repeatedly while a graph is being drawn,
             once for each of the graph's edges.  The <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on all of the graph's vertices must
             be set by ILayout.LayOutGraph before this method is called.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.SetWidthOrSelectedWidthProperty(System.Double,System.String,System.Double@)">
             <summary>
             Sets the value of the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.Width"/> or <see cref="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.SelectedWidth"/> property.
             </summary>
            
             <param name="dNewPropertyValue">
             The new property value.
             </param>
            
             <param name="sPropertyName">
             The name of the property, either "Width" or "SelectedWidth".
             </param>
            
             <param name="dProperty">
             The field for the property value.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.TryDrawSelfLoop(Microsoft.NodeXL.Core.IVertex,System.Windows.Media.DrawingContext,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext,System.Windows.Media.Color,System.Double,System.Boolean)">
             <summary>
             Attempts to draw an edge that is a self-loop.
             </summary>
            
             <param name="oVertex">
             The vertex to connect to itself.
             </param>
            
             <param name="oDrawingContext">
             The DrawingContext to use.
             </param>
            
             <param name="oGraphDrawingContext">
             Provides access to objects needed for graph-drawing operations.
             </param>
            
             <param name="oColor">
             The edge color.
             </param>
            
             <param name="dWidth">
             The edge width.
             </param>
            
             <param name="bDrawArrow">
             true if an arrow should be drawn on the self-loop.
             </param>
            
             <returns>
             true if the self loop was drawn, false if the edge's vertex is hidden.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.DrawSelfLoopAt(System.Windows.Media.DrawingContext,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext,System.Windows.Media.Color,System.Double,System.Windows.Point,Microsoft.Research.CommunityTechnologies.GraphicsLib.RectangleEdge,System.Boolean)">
             <summary>
             Draws an edge that is a self-loop at a specified endpoint.
             </summary>
            
             <param name="oDrawingContext">
             The DrawingContext to use.
             </param>
            
             <param name="oGraphDrawingContext">
             Provides access to objects needed for graph-drawing operations.
             </param>
            
             <param name="oColor">
             The edge color.
             </param>
            
             <param name="dWidth">
             The edge width.
             </param>
            
             <param name="oSelfLoopEndpoint">
             The point on the vertex at which to draw the self-loop.
             </param>
            
             <param name="eFarthestGraphRectangleEdge">
             The edge of the graph rectangle that is farthest from the vertex.
             </param>
            
             <param name="bDrawArrow">
             true if an arrow should be drawn on the self-loop.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.GetWidth(Microsoft.NodeXL.Core.IEdge,System.Boolean)">
             <summary>
             Gets the width of an edge.
             </summary>
            
             <param name="oEdge">
             The edge to get the width for.
             </param>
            
             <param name="bDrawAsSelected">
             true to draw the edge as selected.
             </param>
            
             <returns>
             The width of the edge.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.TryGetEdgeEndpoints(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext,System.Windows.Point@,System.Windows.Point@)">
             <summary>
             Attempts to get the endpoints of the edge.
             </summary>
            
             <param name="oVertex1">
             The edge's first vertex.
             </param>
            
             <param name="oVertex2">
             The edge's second vertex.
             </param>
            
             <param name="oGraphDrawingContext">
             Provides access to objects needed for graph-drawing operations.
             </param>
            
             <param name="oEdgeEndpoint1">
             Where the edge's first endpoint gets stored if true is returned.
             </param>
            
             <param name="oEdgeEndpoint2">
             Where the edge's second endpoint gets stored if true is returned.
             </param>
            
             <returns>
             true if the endpoints were obtained, false if one of the edge's
             vertices is hidden.
             </returns>
            
             <remarks>
             The edge's first endpoint is the endpoint on the <paramref
             name="oVertex1" /> side of the edge.  The edge's second endpoint is the
             endpoint on the <paramref name="oVertex2" /> side of the edge.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.DrawArrow(System.Windows.Media.DrawingContext,System.Windows.Point,System.Double,System.Windows.Media.Color,System.Double)">
             <summary>
             Draws an arrow whose tip is at a specified point.
             </summary>
            
             <param name="oDrawingContext">
             The DrawingContext to use.
             </param>
            
             <param name="oArrowTipLocation">
             Where the tip of the arrow gets drawn.
             </param>
            
             <param name="dArrowAngle">
             The angle of the arrow.  Ranges between 0 and PI radians (0 to 180
             degrees) and 0 to -PI radians (0 to -180 degrees).  If 0, the arrow
             points to the right.
             </param>
            
             <param name="oColor">
             The color of the arrow.
             </param>
            
             <param name="dEdgeWidth">
             The width of the edge that will connect to the arrow.
             </param>
            
             <returns>
             The point at the center of the flat end of the arrow.  This can be used
             when drawing the line that connects to the arrow.  (Don't draw a line
             to <paramref name="oArrowTipLocation" />, because the line's endcap
             will overlap the tip of the arrow.)
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.MinimumWidth">
            <summary>
            Minimum value of the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.Width"/> and <see cref="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.SelectedWidth"/> properties.  The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.MaximumWidth">
            <summary>
            Maximum value of the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.Width"/> and <see cref="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.SelectedWidth"/> properties.  The value is 20.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.MinimumRelativeArrowSize">
            <summary>
            Minimum value of the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.RelativeArrowSize"/> property.  The
            value is 0.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.MaximumRelativeArrowSize">
            <summary>
            Maximum value of the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.RelativeArrowSize"/> property.  The
            value is 20.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.m_dWidth">
            Width of an unselected edge.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.m_dSelectedWidth">
            Width of a selected edge.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.m_bDrawArrowOnDirectedEdge">
            true to draw an arrow on directed edges.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.m_dRelativeArrowSize">
            Width and height of arrows, relative to the pen width.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.Width">
             <summary>
             Gets or sets the default width of unselected edges.
             </summary>
            
             <value>
             The default width of unselected edges, as a <see cref="T:System.Double"/>.
             Must be between <see cref="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.MinimumWidth"/> and <see cref="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.MaximumWidth"/>, inclusive.  The default value is 1.
             </value>
            
             <remarks>
             The default width of an unselected edge can be overridden by setting
             the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerEdgeWidth"/> key on the edge.
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.SelectedWidth"/>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.SelectedWidth">
             <summary>
             Gets or sets the width of selected edges.
             </summary>
            
             <value>
             The width of selected edges, as a <see cref="T:System.Double"/>.  Must be
             between <see cref="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.MinimumWidth"/> and <see cref="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.MaximumWidth"/>,
             inclusive.  The default value is 2.
             </value>
            
             <remarks>
             The width of selected edges cannot be set on a per-edge basis.
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.Width"/>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.DrawArrowOnDirectedEdge">
             <summary>
             Gets or sets a flag that determines whether an arrow should be drawn on
             directed edges.
             </summary>
            
             <value>
             true to draw an arrow on directed edges, false otherwise.  The default
             value is true.
             </value>
            
             <remarks>
             By default, an edge with <see cref="P:Microsoft.NodeXL.Core.IEdge.IsDirected"/> set to true is
             drawn with an arrow pointing to the front vertex.  If this property is
             set to false, the arrow is not drawn.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.RelativeArrowSize">
             <summary>
             Gets or sets the relative size of arrowheads on directed edges.
             </summary>
            
             <value>
             The relative size of arrowheads, as a <see cref="T:System.Double"/>.  Must be
             between <see cref="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.MinimumRelativeArrowSize"/> and <see cref="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.MaximumRelativeArrowSize"/>, inclusive.  The default value is 3.
             </value>
            
             <remarks>
             The value is relative to <see cref="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.Width"/> and <see cref="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.SelectedWidth"/>.  If the width or selected width is increased,
             the arrow size on unselected or selected edges is increased
             proportionally.
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawingHistory">
            <summary>
            Retains information about how one edge was drawn.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawingHistory.#ctor(Microsoft.NodeXL.Core.IEdge,System.Windows.Media.DrawingVisual,System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawingHistory"/>
             class.
             </summary>
            
             <param name="edge">
             The edge that was drawn.
             </param>
            
             <param name="drawingVisual">
             The DrawingVisual object that was used to draw the edge.
             </param>
            
             <param name="drawnAsSelected">
             true if the edge was drawn as selected.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawingHistory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawingHistory.m_oEdge">
            The edge that was drawn.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawingHistory.Edge">
             <summary>
             Gets the edge that was drawn.
             </summary>
            
             <value>
             The edge that was drawn, as an <see cref="T:Microsoft.NodeXL.Core.IEdge"/>
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.DiskVertexDrawingHistory">
            <summary>
            Retains information about how one vertex was drawn as a <see cref="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.Disk"/>.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DiskVertexDrawingHistory.#ctor(Microsoft.NodeXL.Core.IVertex,System.Windows.Media.DrawingVisual,System.Boolean,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.DiskVertexDrawingHistory"/>
             class.
             </summary>
            
             <param name="vertex">
             The vertex that was drawn.
             </param>
            
             <param name="drawingVisual">
             The DrawingVisual object that was used to draw the vertex.
             </param>
            
             <param name="drawnAsSelected">
             true if the vertex was drawn as selected.
             </param>
            
             <param name="radius">
             The radius of <paramref name="vertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DiskVertexDrawingHistory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingPrecedence">
            <summary>
            Specifies the order in which the metadata keys that specify primary label,
            image, and shape are checked.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingPrecedence.Shape">
            <summary>
            Draw the vertex as a shape.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingPrecedence.Image">
            <summary>
            If an image key exists, draw the vertex as an image.  Otherwise, draw
            the vertex as a shape.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingPrecedence.PrimaryLabel">
            <summary>
            If a primary label key exists, draw the vertex as a primary label.
            Otherwise, if an image key exists, draw the vertex as an image.
            Otherwise, draw the vertex as a shape.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer">
             <summary>
             Draws a graph's vertices.
             </summary>
            
             <remarks>
             This class is responsible for drawing a graph's vertices.  The default
             vertex appearance is determined by this class's properties.  The
             appearance of an individual vertex can be overridden by adding appropriate
             metadata to the vertex.  The following metadata keys are honored:
            
             <list type="bullet">
            
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.Visibility"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerColor"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerAlpha"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexShape"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexRadius"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.IsSelected"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexPrimaryLabel"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexPrimaryLabelFillColor"/>
                 </item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexSecondaryLabel"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexImage"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexDrawingPrecedence"/></item>
            
             </list>
            
             <para>
             If <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.UseSelection"/> is true, a vertex is
             drawn using <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.Color"/> or <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.SelectedColor"/>, depending on whether the
             vertex has been marked as selected.  If <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.UseSelection"/> is false, <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.Color"/> is used regardless of whether the
             vertex has been marked as selected.
             </para>
            
             <para>
             If the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexDrawingPrecedence"/> key
             is not present, <see cref="T:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer"/> looks for the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexPrimaryLabel"/>, <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexImage"/>, and <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexShape"/> keys, in that order.  If none
             of these keys are present, the vertex is drawn as the shape specified by
             the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.Shape"/> property.
             </para>
            
             <para>
             If a vertex has the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexPrimaryLabel"/> key, the vertex is
             drawn as a rectangle containing the text specified by the key's value.  The
             default color of the text and the rectangle's outline is <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexAndEdgeDrawerBase.Color"/>, but can be overridden with the
             <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerColor"/> key.  The default fill color
             of the rectangle is <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.PrimaryLabelFillColor"/>, but can be
             overridden with the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexPrimaryLabelFillColor"/> key.
             </para>
            
             <para>
             If a vertex has the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexImage"/> key, the vertex is
             drawn as the image specified by the key's value.
             </para>
            
             <para>
             If a vertex has the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexSecondaryLabel"/> key, the vertex is
             annotated with the text specified by the key's value.
             </para>
            
             <para>
             The values of the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerColor"/> and
             <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexPrimaryLabelFillColor"/> keys
             can be of type System.Windows.Media.Color or System.Drawing.Color.
             </para>
            
             <para>
             When drawing the graph, call <see cref="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.TryDrawVertex(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext,Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory@)"/> for each of the
             graph's vertices.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.MaximumPrimaryLabelWidth">
            Maximum width of a primary label, not including the label padding, in
            device-independent units.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.MaximumPrimaryLabelHeight">
            Maximum height of a primary label, not including the label padding, in
            device-independent units.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.PrimaryLabelPadding">
            Padding between the primary label text and label outline, in
            device-independent units.
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.TryDrawVertex(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext,Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory@)">
             <summary>
             Draws a vertex after moving it if necessary.
             </summary>
            
             <param name="vertex">
             The vertex to draw.
             </param>
            
             <param name="graphDrawingContext">
             Provides access to objects needed for graph-drawing operations.
             </param>
            
             <param name="vertexDrawingHistory">
             Where a <see cref="T:Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory"/> object that retains
             information about how the vertex was drawn gets stored if true is
             returned.
             </param>
            
             <returns>
             true if the vertex was drawn, false if the vertex is hidden.
             </returns>
            
             <remarks>
             This method should be called repeatedly while a graph is being drawn,
             once for each of the graph's vertices.  The <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> property on all of the graph's vertices must
             be set by ILayout.LayOutGraph before this method is called.
            
             <para>
             If the vertex falls outside the graph rectangle, it gets moved before
             being drawn.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.SetFont(System.Windows.Media.FontFamily,System.Double)">
             <summary>
             Sets the font used to draw primary and secondary labels.
             </summary>
            
             <param name="fontFamily">
             The FontFamily to use.
             </param>
            
             <param name="emSize">
             The font size to use, in ems.
             </param>
            
             <remarks>
             The default font is the SystemFonts.MessageFontFamily at size 10.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.DrawShape(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext,System.Windows.Media.DrawingContext,System.Windows.Media.DrawingVisual,Microsoft.NodeXL.Core.VisibilityKeyValue,System.Boolean,System.String)">
             <summary>
             Draws a vertex as a specified shape.
             </summary>
            
             <param name="oVertex">
             The vertex to draw.
             </param>
            
             <param name="oGraphDrawingContext">
             Provides access to objects needed for graph-drawing operations.
             </param>
            
             <param name="oDrawingContext">
             The DrawingContext to use.
             </param>
            
             <param name="oDrawingVisual">
             The <see cref="T:System.Windows.Media.DrawingVisual"/> object from which <paramref name="oDrawingContext"/> was obtained.
             </param>
            
             <param name="eVisibility">
             The visibility of the vertex.
             </param>
            
             <param name="bDrawAsSelected">
             true to draw the vertex as selected.
             </param>
            
             <param name="sSecondaryLabel">
             The secondary label to draw, or null if there is no secondary label.
             </param>
            
             <returns>
             A VertexDrawingHistory object that retains information about how the
             vertex was drawn.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.DrawImage(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext,System.Windows.Media.DrawingContext,System.Windows.Media.DrawingVisual,Microsoft.NodeXL.Core.VisibilityKeyValue,System.Boolean,System.String,System.Windows.Media.ImageSource)">
             <summary>
             Draws a vertex as a specified image.
             </summary>
            
             <param name="oVertex">
             The vertex to draw.
             </param>
            
             <param name="oGraphDrawingContext">
             Provides access to objects needed for graph-drawing operations.
             </param>
            
             <param name="oDrawingContext">
             The DrawingContext to use.
             </param>
            
             <param name="oDrawingVisual">
             The <see cref="T:System.Windows.Media.DrawingVisual"/> object from which <paramref name="oDrawingContext"/> was obtained.
             </param>
            
             <param name="eVisibility">
             The visibility of the vertex.
             </param>
            
             <param name="bDrawAsSelected">
             true to draw the vertex as selected.
             </param>
            
             <param name="sSecondaryLabel">
             The secondary label to draw, or null if there is no secondary label.
             </param>
            
             <param name="oImageSource">
             The image to draw.
             </param>
            
             <returns>
             A VertexDrawingHistory object that retains information about how the
             vertex was drawn.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.DrawPrimaryLabel(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext,System.Windows.Media.DrawingContext,System.Windows.Media.DrawingVisual,Microsoft.NodeXL.Core.VisibilityKeyValue,System.Boolean,System.String,System.String)">
             <summary>
             Draws a vertex as a specified primary label.
             </summary>
            
             <param name="oVertex">
             The vertex to draw.
             </param>
            
             <param name="oGraphDrawingContext">
             Provides access to objects needed for graph-drawing operations.
             </param>
            
             <param name="oDrawingContext">
             The DrawingContext to use.
             </param>
            
             <param name="oDrawingVisual">
             The <see cref="T:System.Windows.Media.DrawingVisual"/> object from which <paramref name="oDrawingContext"/> was obtained.
             </param>
            
             <param name="eVisibility">
             The visibility of the vertex.
             </param>
            
             <param name="bDrawAsSelected">
             true to draw the vertex as selected.
             </param>
            
             <param name="sSecondaryLabel">
             The secondary label to draw, or null if there is no secondary label.
             </param>
            
             <param name="sPrimaryLabel">
             The primary label to draw.
             </param>
            
             <returns>
             A VertexDrawingHistory object that retains information about how the
             vertex was drawn.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.DrawSecondaryLabel(System.Windows.Media.DrawingContext,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext,System.String,System.Windows.Point,System.Windows.Media.Color)">
             <summary>
             Draws a secondary label.
             </summary>
            
             <param name="oDrawingContext">
             The DrawingContext to use.
             </param>
            
             <param name="oGraphDrawingContext">
             Provides access to objects needed for graph-drawing operations.
             </param>
            
             <param name="sSecondaryLabel">
             The secondary label to draw.  Can be empty but not null.
             </param>
            
             <param name="oLowerLeft">
             The location of the lower-left corner of the secondary label.
             </param>
            
             <param name="oColor">
             The color of the secondary label.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.MoveVertexIfNecessary(Microsoft.NodeXL.Core.IVertex,System.Windows.Rect@,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)">
             <summary>
             Moves a vertex if it falls outside the graph rectangle.
             </summary>
            
             <param name="oVertex">
             The vertex to move.
             </param>
            
             <param name="oVertexBounds">
             The rectangle defining the bounds of the vertex.  This gets updated if
             the vertex is moved.
             </param>
            
             <param name="oGraphDrawingContext">
             Provides access to objects needed for graph-drawing operations.
             </param>
            
             <remarks>
             If the vertex falls outside the graph rectangle, the IVertex.Location
             property and <paramref name="oVertexBounds" /> get updated.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.GetPrecedence(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Gets the precedence with which to draw a vertex.
             </summary>
            
             <param name="oVertex">
             The vertex to get the precedence for.
             </param>
            
             <returns>
             The precedence with which to draw a vertex.
             </returns>
            
             <remarks>
             The precedence determines the order in which the keys that specify
             primary label, image, and shape are checked.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.GetShape(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Gets the shape of a vertex.
             </summary>
            
             <param name="oVertex">
             The vertex to get the shape for.
             </param>
            
             <returns>
             The shape of the vertex.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.GetRadius(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Gets the radius of a vertex.
             </summary>
            
             <param name="oVertex">
             The vertex to get the radius for.
             </param>
            
             <returns>
             The radius of the vertex.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.GetVertexRectangle(System.Windows.Point,System.Double,System.Double)">
             <summary>
             Gets a rectangle to use to draw a vertex.
             </summary>
            
             <param name="oLocation">
             The vertex's location.
             </param>
            
             <param name="dWidth">
             The width of the vertex's rectangle.
             </param>
            
             <param name="dHeight">
             The height of the vertex's rectangle.
             </param>
            
             <returns>
             A rectangle centered on <paramref name="oLocation" />.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.GetVertexLocation(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Gets the location of a vertex, as a System.Windows.Point.
             </summary>
            
             <param name="oVertex">
             The vertex to get the location of.
             </param>
            
             <returns>
             The IVertex.Location property, converted to a System.Windows.Point.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.CreateFormattedText(System.String,System.Windows.Media.Color)">
             <summary>
             Creates a FormattedText object.
             </summary>
            
             <param name="sText">
             The text to draw.  Can't be null.
             </param>
            
             <param name="oColor">
             The text color.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.CheckDrawVertexArguments(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext)">
             <summary>
             Checks the arguments to <see cref="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.TryDrawVertex(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Visualization.Wpf.GraphDrawingContext,Microsoft.NodeXL.Visualization.Wpf.VertexDrawingHistory@)"/>.
             </summary>
            
             <param name="oVertex">
             The vertex that will eventually be drawn.
             </param>
            
             <param name="oGraphDrawingContext">
             Provides access to objects needed for graph-drawing operations.
             </param>
            
             <remarks>
             An exception is thrown if one of the arguments is invalid.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.MinimumRadius">
            <summary>
            Minimum value of the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.Radius"/> property.  The value is 0.1.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.MaximumRadius">
            <summary>
            Maximum value of the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.Radius"/> property.  The value is
            50.0.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.m_eShape">
            Default shape of the vertices.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.m_dRadius">
            Default radius of the vertices.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.m_oPrimaryLabelFillColor">
            Default fill color to use for primary labels.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.m_oFontFamily">
            The font family to use to draw primary and secondary labels.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.m_dFontSizeEm">
            The font size to use to draw primary and secondary labels, in ems.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.Shape">
             <summary>
             Gets or sets the default shape of the vertices.
             </summary>
            
             <value>
             The default shape of the vertices, as a <see cref="T:Microsoft.NodeXL.Visualization.Wpf.VertexShape"/>.
             The default value is <see cref="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.Disk"/>.
             </value>
            
             <remarks>
             The default shape of a vertex can be overridden by setting the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexShape"/> key on the vertex.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.Radius">
             <summary>
             Gets or sets the default radius of the vertices.
             </summary>
            
             <value>
             The default radius of the vertices, as a <see cref="T:System.Double"/>.  Must
             be between <see cref="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.MinimumRadius"/> and <see cref="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.MaximumRadius"/>, inclusive.  The default value is 3.0.
             </value>
            
             <remarks>
             The default radius of a vertex can be overridden by setting the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexRadius"/> key on the vertex.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.PrimaryLabelFillColor">
             <summary>
             Gets or sets the default fill color to use for primary labels.
             </summary>
            
             <value>
             The default fill color to use for primary labels.  The default is
             SystemColors.WindowColor.
             </value>
            
             <remarks>
             <see cref="T:System.Windows.Media.Color"/> is used for the primary label text and outline.
            
             <para>
             The default fill color of a vertex can be overridden by setting the
             <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexPrimaryLabelFillColor"/> key
             on the vertex.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.VertexShape">
            <summary>
            Specifies the shape of a vertex.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.Circle">
            <summary>
            The vertex is drawn as a circle.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.Disk">
            <summary>
            The vertex is drawn as a disk.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.Sphere">
            <summary>
            The vertex is drawn as a sphere.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.Square">
            <summary>
            The vertex is drawn as a square.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.SolidSquare">
            <summary>
            The vertex is drawn as a solid square.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.Diamond">
            <summary>
            The vertex is drawn as a diamond.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.SolidDiamond">
            <summary>
            The vertex is drawn as a solid diamond.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.Triangle">
            <summary>
            The vertex is drawn as an equilateral triangle.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.SolidTriangle">
            <summary>
            The vertex is drawn as a solid equilateral triangle.
            </summary>
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.RectangleEdge">
            <summary>
            Specifies an edge of a rectangle.
            </summary>
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.GraphicsLib.RectangleEdge.Left">
            <summary>
            Left edge of the rectangle.
            </summary>
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.GraphicsLib.RectangleEdge.Right">
            <summary>
            Right edge of the rectangle.
            </summary>
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.GraphicsLib.RectangleEdge.Top">
            <summary>
            Top edge of the rectangle.
            </summary>
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.GraphicsLib.RectangleEdge.Bottom">
            <summary>
            Bottom edge of the rectangle.
            </summary>
        </member>
    </members>
</doc>
