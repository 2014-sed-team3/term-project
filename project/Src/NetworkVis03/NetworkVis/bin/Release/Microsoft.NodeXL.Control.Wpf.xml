<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.NodeXL.Control.Wpf</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase">
             <summary>
             Helper class for displaying tooltips.
             </summary>
            
             <remarks>
             This is meant for use by a Control object that displays various objects
             within its window and wants to show a tooltip for each object.  The ToolTip
             class in the FCL makes it easy to show a single tooltip for an entire
             control, but it does not support different tooltips for different parts of
             the control's window.
            
             <para>
             To use ToolTipTracker, call <see cref="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.OnMouseMoveOverObject(System.Object)"/> from the
             control's MouseMove event handler.  If the mouse is currently over an
             object that has a tooltip associated with it, pass the object as the
             method's oObjectToTrack parameter.  Otherwise, pass null.  Also, call
             <see cref="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.OnMouseMoveOverObject(System.Object)"/> with a null parameter from the
             control's MouseLeave event handler.
             </para>
            
             <para>
             If the mouse remains over an object for a period of <see cref="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ShowDelayMs"/> milliseconds, ToolTipTracker fires a <see cref="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ShowToolTip"/> event.  The event arguments include the object being
             tracked.
             </para>
            
             <para>
             A <see cref="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.HideToolTip"/> event is fired when the tooltip should be
             hidden.  This occurs <see cref="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.HideDelayMs"/> after the <see cref="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ShowToolTip"/> event fires if the mouse remains over the object, or
             immediately if OnMouseMoveOverObject(null) is called.
             </para>
            
             <para>
             Note that ToolTipTracker does not actually show or hide the tooltip; that's
             up to the application.  The easiest way to do this is to create a child
             ToolTipPanel control and call its Show and Hide methods in response to the
             <see cref="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ShowToolTip"/> and <see cref="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.HideToolTip"/> events.
             </para>
            
             <para>
             If the mouse is moved to another object within <see cref="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ReshowDelayMs"/>
             milliseconds, another <see cref="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ShowToolTip"/> event is fired.
             Otherwise, the waiting period reverts to <see cref="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ShowDelayMs"/>.
             </para>
            
             <para>
             Call <see cref="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.Reset"/> to reset ToolTipTracker to its initial state.
             This forces a <see cref="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.HideToolTip"/> event if a tooltip is showing.
             </para>
            
             <para>
             <b>IMPORTANT</b>
             </para>
            
             <para>
             The control must call <see cref="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.Dispose"/> from its own Dispose method.
             This prevents timer-based events from firing after the control no longer
             has a handle.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.MinDelayMs">
            <summary>
            Minimum value for the <see cref="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ShowDelayMs"/>, <see cref="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.HideDelayMs"/>, and <see cref="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ReshowDelayMs"/> properties.
            </summary>
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.MaxDelayMs">
            <summary>
            Maximum value for the <see cref="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ShowDelayMs"/>, <see cref="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.HideDelayMs"/>, and <see cref="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ReshowDelayMs"/> properties.
            </summary>
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.DefaultShowDelayMs">
            Default value for the ShowDelayMs property.
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.DefaultHideDelayMs">
            Default value for the HideDelayMs property.
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.DefaultReshowDelayMs">
            Default value for the ReshowDelayMs property.
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.#ctor(Microsoft.Research.CommunityTechnologies.GraphicsLib.IToolTipTimer)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/>
             class.
             </summary>
            
             <param name="toolTipTimer">
             The timer to use internally.  See the <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.IToolTipTimer"/>
             interface for details.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.Finalize">
            <summary>
            ToolTipTrackerBase destructor.
            </summary>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.OnMouseMoveOverObject(System.Object)">
             <summary>
             Specifies that the mouse has moved over an object.
             </summary>
            
             <param name="objectToTrack">
             Object to track, or null to stop tracking.
             </param>
            
             <remarks>
             Call this with an Object parameter when the mouse moves over an object
             that should be tracked.  Call it with a null parameter when the mouse
             moves over an area of the control where there is no object, and when
             the mouse leaves the control.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.Reset">
             <summary>
             Resets the object to its initial state.
             </summary>
            
             <remarks>
             This forces a <see cref="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.HideToolTip"/> event if a tooltip is showing.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing,
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ValidateDelayProperty(System.Int32,System.String)">
             <summary>
             Validates one of the xxDelayMs properties.
             </summary>
            
             <param name="iValue">
             Property value.
             </param>
            
             <param name="sPropertyName">
             Name of the property being validated.  Sample: "ShowDelayMs".
             </param>
            
             <remarks>
             This throws an exception if the value is out of range.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ChangeState(Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.State,System.Object)">
             <summary>
             Changes the state of the object.
             </summary>
            
             <param name="iState">
             New object state.
             </param>
            
             <param name="oObjectToTrack">
             Object to track, or null to stop tracking.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.FireShowToolTipEvent(System.Object)">
             <summary>
             Fires the ShowToolTip event.
             </summary>
            
             <param name="oObject">
             Object to show a tooltip for.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.FireHideToolTipEvent(System.Object)">
             <summary>
             Fires the HideToolTip event.
             </summary>
            
             <param name="oObject">
             Object to hide the tooltip for.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.TimerTick(System.Object,System.EventArgs)">
             <summary>
             Timer event handler.
             </summary>
            
             <param name="oSource">
             Source of the event.
             </param>
             
             <param name="oEventArgs">
             Standard event arguments.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.Dispose(System.Boolean)">
             <summary>
             Performs application-defined tasks associated with freeing, releasing,
             or resetting unmanaged resources.
             </summary>
            
             <param name="bDisposing">
             See IDisposable.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ShowDelayMs">
             <summary>
             Gets or sets the number of milliseconds to wait to fire the <see cref="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ShowToolTip"/> event after <see cref="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.OnMouseMoveOverObject(System.Object)"/>
             is first called.
             </summary>
            
             <value>
             The number of milliseconds to wait.
             </value>
        </member>
        <member name="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.HideDelayMs">
             <summary>
             Gets or sets the number of milliseconds to wait to fire the <see cref="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.HideToolTip"/> event after <see cref="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ShowToolTip"/> is fired.
             </summary>
            
             <value>
             The number of milliseconds to wait.
             </value>
        </member>
        <member name="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ReshowDelayMs">
             <summary>
             Gets or sets the number of milliseconds to wait after a <see cref="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.HideToolTip"/> event before a <see cref="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ShowToolTip"/> event
             will be fired if the mouse is moved over another object.
             </summary>
            
             <value>
             The delay, in milliseconds.
             </value>
            
             <remarks>
             If this delay elapses without <see cref="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.OnMouseMoveOverObject(System.Object)"/>
             being called, the waiting period reverts to <see cref="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ShowDelayMs"/>.
             </remarks>
        </member>
        <member name="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ToolTipShown">
             <summary>
             Gets a flag indicating whether a tooltip is being shown.
             </summary>
            
             <value>
             true if a tooltip is being shown.
             </value>
            
             <remarks>
             This gets set to true at the same time the <see cref="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ShowToolTip"/>
             event fires, and to false at the same time the <see cref="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.HideToolTip"/> event fires.
             </remarks>
        </member>
        <member name="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.TrackedObject">
             <summary>
             Gets the Object being tracked.
             </summary>
            
             <value>
             The Object most recently passed to <see cref="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.OnMouseMoveOverObject(System.Object)"/>, or null if an object isn't being
             tracked.
             </value>
        </member>
        <member name="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ShowToolTip">
            <summary>
            Fired when a tooltip window should be shown.
            </summary>
        </member>
        <member name="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.HideToolTip">
            <summary>
            Fired when a tooltip window should be hidden.
            </summary>
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.ToolTipTrackerEvent">
             <summary>
             Represents a method that will handle an event fired by <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/>.
             </summary>
            
             <param name="source">
             Source of the event.
             </param>
            
             <param name="toolTipTrackerEventArgs">
             Provides information about the object for which a tooltip window should
             be shown or hidden.
             </param>
            
             <remarks>
             This delegate is used in all events fired by ToolTipTracker.
             </remarks>
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerEventArgs">
            <summary>
            Event arguments of <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/> events.
            </summary>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerEventArgs.#ctor(System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerEventArgs"/> class.
             </summary>
            
             <param name="trackedObject">
             Object for which a tooltip window should be shown or hidden.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerEventArgs.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerEventArgs.Object">
             <summary>
             Gets the Object for which a tooltip window should be shown or hidden.
             </summary>
            
             <value>
             The Object for which a tooltip window should be shown or hidden.
             </value>
            
             <remarks>
             This should be called TrackedObject to make it consistent with the
             <see cref="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase.TrackedObject"/> property.  It is called
             Object for backward compatibility with older projects.
             </remarks>
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.IToolTipTimer">
             <summary>
             Defines the timer interface used by <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/>.
             </summary>
            
             <remarks>
             The <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/> class uses an internal timer.  To
             allow the class to be used in both Windows Forms and WPF applications, the
             <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/> constructor accepts an <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.IToolTipTimer"/> argument that wraps either a Windows Forms timer or
             a WPF DispatcherTimer, without <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/> knowing
             which timer is being used.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.IToolTipTimer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.IToolTipTimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.IToolTipTimer.Dispose">
            <summary>
            Disposes of the timer.
            </summary>
        </member>
        <member name="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.IToolTipTimer.Interval">
             <summary>
             Gets or sets the time, in milliseconds, before the Tick event is raised
             relative to the last occurrence of the Tick event.
             </summary>
            
             <value>
             The timer interval, in milliseconds.
             </value>
        </member>
        <member name="E:Microsoft.Research.CommunityTechnologies.GraphicsLib.IToolTipTimer.Tick">
            <summary>
            Occurs when the timer interval has elapsed. 
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.MouseSelectionMode">
            <summary>
            Determines what happens when a vertex is clicked.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.MouseSelectionMode.SelectNothing">
            <summary>
            Clicking a vertex does not select anything.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.MouseSelectionMode.SelectVertexOnly">
            <summary>
            Clicking a vertex selects it without selecting its incident edges.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.MouseSelectionMode.SelectVertexAndIncidentEdges">
            <summary>
            Clicking a vertex selects it and its incident edges.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.MouseDrag">
             <summary>
             Represents a mouse drag operation.
             </summary>
            
             <remarks>
             Create an instance of this class when a MouseDown event occurs.  When the
             mouse is moved, call <see cref="M:Microsoft.NodeXL.Visualization.Wpf.MouseDrag.OnMouseMove(System.Windows.Point)"/> to determine whether the
             mouse has moved far enough to begin a mouse drag operation.  When the mouse
             button is released, call <see cref="M:Microsoft.NodeXL.Visualization.Wpf.MouseDrag.OnMouseUp"/>.
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.MouseDrag.MinimumMouseMove">
            Minimum change in either coordinate before a drag operation begins.
            Having a minimum move distance reduces the chance that the user will
            inadvertently begin a drag operation.
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.MouseDrag.#ctor(System.Windows.Point)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.MouseDrag"/> class.
             </summary>
            
             <param name="mouseDownLocation">
             Location where the MouseDown event occurred, in client coordinates.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.MouseDrag.OnMouseMove(System.Windows.Point)">
             <summary>
             Returns a flag indicating whether a drag operation is in progress.
             </summary>
            
             <param name="currentMouseLocation">
             The current mouse location.
             </param>
            
             <returns>
             true if a drag operation is in progress.
             </returns>
            
             <remarks>
             Call this when the mouse is moved.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.MouseDrag.OnMouseUp">
             <summary>
             Returns a flag indicating whether a drag operation is in progress.
             </summary>
            
             <returns>
             true if a drag operation is in progress.
             </returns>
            
             <remarks>
             Call this when the mouse button is released.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.MouseDrag.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.MouseDrag.m_oMouseDownLocation">
            Location where the MouseDown event occurred, in client coordinates.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.MouseDrag.m_bDragIsInProgress">
            true if a drag operation is in progress.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.MouseDrag.MouseDownLocation">
             <summary>
             Gets the location where the MouseDown event occurred.
             </summary>
            
             <value>
             The location where the MouseDown event occurred, as a <see cref="T:System.Windows.Point"/> in client coordinates.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.GraphMouseButtonEventArgs">
            <summary>
            Provides information for events fired when a graph is clicked.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphMouseButtonEventArgs.#ctor(System.Windows.Input.MouseButtonEventArgs,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Initializes a new instance of the GraphMouseButtonEventArgs class.
             </summary>
            
             <param name="mouseButtonEventArgs">
             Mouse event arguments.
             </param>
            
             <param name="vertex">
             Vertex under the mouse, or null if the user clicked on a part of the
             graph not covered by a vertex.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.GraphMouseButtonEventArgs.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.GraphMouseButtonEventArgs.m_oVertex">
            The vertex under the mouse, or null.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.GraphMouseButtonEventArgs.Vertex">
             <summary>
             Gets the vertex under the mouse.
             </summary>
            
             <value>
             The vertex under the mouse, as an <see cref="T:Microsoft.NodeXL.Core.IVertex"/>, or null if
             the user clicked a point on the graph not covered by a vertex.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.GraphMouseButtonEventHandler">
             <summary>
             Represents a method that will handle an event fired when a graph is
             clicked.
             </summary>
            
             <param name="sender">
             The object that fired the event.
             </param>
            
             <param name="e">
             Provides information about the mouse and the part of the graph that was
             clicked.
             </param>
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfToolTipTracker">
             <summary>
             Helper class for displaying tooltips in WPF applications.
             </summary>
            
             <remarks>
             See the <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/> base class for details on how to
             use this class.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfToolTipTracker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfToolTipTracker"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfToolTipTracker.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfToolTipTimer">
             <summary>
             Implements a timer used by <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/> in WPF
             applications.
             </summary>
            
             <remarks>
             This class wraps the WPF DispatcherTimer in an <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.IToolTipTimer"/>
             interface for use by <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfToolTipTimer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing,
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfToolTipTimer.Microsoft#Research#CommunityTechnologies#GraphicsLib#IToolTipTimer#Start">
             <summary>
             Implements a timer used by <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/> in WPF
             applications.
             </summary>
            
             <remarks>
             This class wraps the WPF DispatcherTimer in an <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.IToolTipTimer"/>
             interface for use by <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfToolTipTimer.Microsoft#Research#CommunityTechnologies#GraphicsLib#IToolTipTimer#Stop">
             <summary>
             Implements a timer used by <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/> in WPF
             applications.
             </summary>
            
             <remarks>
             This class wraps the WPF DispatcherTimer in an <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.IToolTipTimer"/>
             interface for use by <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfToolTipTimer.Microsoft#Research#CommunityTechnologies#GraphicsLib#IToolTipTimer#add_Tick(System.EventHandler)">
             <summary>
             Implements a timer used by <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/> in WPF
             applications.
             </summary>
            
             <remarks>
             This class wraps the WPF DispatcherTimer in an <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.IToolTipTimer"/>
             interface for use by <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfToolTipTimer.Microsoft#Research#CommunityTechnologies#GraphicsLib#IToolTipTimer#remove_Tick(System.EventHandler)">
             <summary>
             Implements a timer used by <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/> in WPF
             applications.
             </summary>
            
             <remarks>
             This class wraps the WPF DispatcherTimer in an <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.IToolTipTimer"/>
             interface for use by <see cref="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerBase"/>.
             </remarks>
        </member>
        <member name="P:Microsoft.Research.CommunityTechnologies.GraphicsLib.WpfToolTipTimer.Interval">
             <summary>
             Gets or sets the time, in milliseconds, before the Tick event is raised
             relative to the last occurrence of the Tick event.
             </summary>
            
             <value>
             The timer interval, in milliseconds.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.DraggedVertices">
             <summary>
             Represents one or more vertices that might be dragged with the mouse.
             </summary>
            
             <remarks>
             Create an instance of this class when a vertex is clicked.  When the mouse
             is moved, check <see cref="M:Microsoft.NodeXL.Visualization.Wpf.MouseDrag.OnMouseMove(System.Windows.Point)"/> to determine whether
             the mouse has moved far enough to begin a vertex drag.  If <see cref="M:Microsoft.NodeXL.Visualization.Wpf.MouseDrag.OnMouseMove(System.Windows.Point)"/> returns true, call <see cref="M:Microsoft.NodeXL.Visualization.Wpf.DraggedVertices.CreateVisual(System.Windows.Point,System.Windows.Media.Color,Microsoft.NodeXL.Visualization.Wpf.VertexDrawer)"/> to create a Visual to represent the dragged
             vertices.
            
             <para>
             Call <see cref="M:Microsoft.NodeXL.Visualization.Wpf.DraggedVertices.CancelDrag"/> if the user wants to cancel the drag
             operation.
             </para>
            
             <para>
             Call <see cref="M:Microsoft.NodeXL.Visualization.Wpf.DraggedVertices.RemoveMetadataFromVertices"/> when the drag operation
             completes or is cancelled.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.MouseDragWithVisual">
             <summary>
             Represents a dragged object that has a visual representation.
             </summary>
            
             <remarks>
             This is an abstract base class.  It maintains a Visual property that
             represents an object being dragged.  It is up to the derived class to
             create the object.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.MouseDragWithVisual.#ctor(System.Windows.Point,System.Windows.Rect,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.MouseDragWithVisual"/>
             class.
             </summary>
            
             <param name="mouseDownLocation">
             Location where the graph was clicked, in client coordinates.
             </param>
            
             <param name="graphRectangle">
             The graph rectangle.
             </param>
            
             <param name="margin">
             The graph margin.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.MouseDragWithVisual.ForcePointToBeWithinMargins(System.Windows.Point)">
             <summary>
             Forces a point to fall within the graph's margins.
             </summary>
            
             <param name="oPoint">
             The point to force.
             </param>
            
             <returns>
             The forced point.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.MouseDragWithVisual.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.MouseDragWithVisual.m_oGraphRectangle">
            The graph rectangle.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.MouseDragWithVisual.m_iMargin">
            The graph margin.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.MouseDragWithVisual.m_oVisual">
            The Visual that represents the dragged object, or null if the derived
            class hasn't created the Visual yet.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.MouseDragWithVisual.Visual">
             <summary>
             Gets the Visual that represents the dragged object.
             </summary>
            
             <value>
             The Visual that represents the dragged object, or null if the Visual
             hasn't been created yet.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.MouseDragWithVisual.GraphRectangleMinusMargin">
             <summary>
             Gets the rectangle that defines the bounds of the graph, minus the
             margin.
             </summary>
            
             <value>
             The rectangle that defines the bounds of the graph, minus the margin,
             as a Rect.
             </value>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DraggedVertices.#ctor(Microsoft.NodeXL.Core.IVertex[],System.Windows.Point,System.Windows.Rect,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.DraggedVertices"/> class.
             </summary>
            
             <param name="vertices">
             An array of one or more vertices being dragged.
             </param>
            
             <param name="mouseDownLocation">
             Location where the vertex was clicked, in client coordinates.
             </param>
            
             <param name="graphRectangle">
             The graph rectangle.
             </param>
            
             <param name="margin">
             The graph margin.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DraggedVertices.CreateVisual(System.Windows.Point,System.Windows.Media.Color,Microsoft.NodeXL.Visualization.Wpf.VertexDrawer)">
             <summary>
             Creates the Visual that should be used to represent the dragged
             vertices.
             </summary>
            
             <param name="currentMouseLocation">
             The current mouse location.
             </param>
            
             <param name="backColor">
             The graph's background color.
             </param>
            
             <param name="vertexDrawer">
             The VertexDrawer that should be used to draw the dragged vertices.
             </param>
            
             <returns>
             The Visual that should be used to represent the dragged vertices.
             </returns>
            
             <remarks>
             The returned Visual can be retrieved later via the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.MouseDragWithVisual.Visual"/> property.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DraggedVertices.CancelDrag">
             <summary>
             Restores the vertices to their original locations.
             </summary>
            
             <remarks>
             This should be called when the user cancel the drag operation.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DraggedVertices.RemoveMetadataFromVertices">
             <summary>
             Removes added metadata from the vertices being dragged.
             </summary>
            
             <remarks>
             This should be called after the drag operation completes or is
             cancelled.  It removes vertex metadata that this class added during the
             drag.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DraggedVertices.AddMetadataToVertices">
             <summary>
             Adds required metadata to the vertices being dragged.
             </summary>
            
             <remarks>
             The metadata should be removed by the owner of this class by calling
             <see cref="M:Microsoft.NodeXL.Visualization.Wpf.DraggedVertices.RemoveMetadataFromVertices"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DraggedVertices.GetOriginalVertexLocation(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Gets the original location of a vertex.
             </summary>
            
             <param name="oVertex">
             The vertex to the the original location for.
             </param>
            
             <returns>
             The vertex's original location, as a PointF.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DraggedVertices.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.DraggedVertices.m_aoVertices">
            The vertices being dragged.  Can't be null or empty.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.DraggedVertices.Vertices">
             <summary>
             Gets the vertices being dragged.
             </summary>
            
             <value>
             An array of one or move vertices being dragged.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs">
            <summary>
            Provides information for events fired when a tooltip is shown for a vertex.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs.#ctor(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Initializes a new instance of the VertexToolTipShownEventArgs class.
             </summary>
            
             <param name="vertex">
             Vertex for which a tooltip is shown.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs.m_oVertexToolTip">
            The UIElement to use for the vertex tooltip, or null to use the tooltip
            string stored in the vertex's metadata.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs.VertexToolTip">
             <summary>
             Gets or sets the UIElement to use for the vertex tooltip.
             </summary>
            
             <value>
             The UIElement to use.  The default value is null.
             </value>
            
             <remarks>
             See <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ShowVertexToolTips"/> for information on
             how to display a custom tooltip when the mouse is hovered over a
             vertex.
            
             <para>
             If this property is left at its default value of null, the text stored
             on the vertex's ReservedMetadataKeys.<see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.VertexToolTip"/> key is used for the
             tooltip.  If there is no such key, a tooltip isn't displayed.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.VertexToolTipShownEventHandler">
             <summary>
             Represents a method that will handle an event fired when a tooltip is shown
             for a vertex.
             </summary>
            
             <param name="sender">
             The object that fired the event.
             </param>
            
             <param name="e">
             Provides information about the vertex and its tooltip.
             </param>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.DraggedTranslation">
             <summary>
             Represents a mouse drag that is translating the graph via a
             TranslateTransform.
             </summary>
            
             <remarks>
             Create an instance of this class when the graph is clicked while the
             NodeXLControl.TranslationDragKey is held down.  When the mouse is moved,
             call <see cref="M:Microsoft.NodeXL.Visualization.Wpf.DraggedTranslation.GetTranslationDistances(System.Windows.Point,System.Double@,System.Double@)"/> to get the distances to
             translate the graph.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DraggedTranslation.#ctor(System.Windows.Point,System.Windows.Point,System.Double,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.DraggedTranslation"/> class.
             </summary>
            
             <param name="mouseDownLocation">
             Location where the graph was clicked, in client coordinates.
             </param>
            
             <param name="mouseDownLocationScreen">
             Location where the graph was clicked, in screen coordinates.
             </param>
            
             <param name="mouseDownTranslateX">
             x-axis translation when the mouse was clicked.
             </param>
            
             <param name="mouseDownTranslateY">
             y-axis translation when the mouse was clicked.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DraggedTranslation.GetTranslationDistances(System.Windows.Point,System.Double@,System.Double@)">
             <summary>
             Gets the distances to translate the graph.
             </summary>
            
             <param name="currentMouseLocationScreen">
             The current mouse location, in screen coordinates.
             </param>
            
             <param name="newTranslateX">
             Where the new x-axis translation distance gets stored.
             </param>
            
             <param name="newTranslateY">
             Where the new y-axis translation distance gets stored.
             </param>
            
             <remarks>
             The returned distances are in units appropriate for the
             TranslateTransform.X and Y properties.
            
             <para>
             The returned distances are not limited -- they can force the graph to
             move outside the control.  It's up to the caller to limit the
             distances.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DraggedTranslation.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.DraggedTranslation.m_oMouseDownLocationScreen">
            Location where the graph was clicked, in screen coordinates.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.DraggedTranslation.m_dMouseDownTranslateX">
            x-axis translation when the mouse was clicked.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.DraggedTranslation.m_dMouseDownTranslateY">
            y-axis translation when the mouse was clicked.
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker">
             <summary>
             Contains methods that check method arguments and property values.
             </summary>
            
             <remarks>
             This can be used by a class that wants to check values passed to its
             property setters and arguments passed to its methods.  The CheckXXX()
             methods in this class throw an exception if a parameter value or method
             argument is invalid.
            
             <para>
             This class is marked internal to avoid compiler error CS0433 ("The
             type ... exists in both ...") when an executable references two or more
             assemblies that use this class.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.#ctor(System.String)">
             <summary>
             Initializes a new instance of the ArgumentChecker class.
             </summary>
            
             <param name="sOwnerClassName">
             Class name of the object that created this object.  The class name gets
             prepended to all exception messages.  Sample: "MyClass".
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotNull(System.String,System.Object)">
             <summary>
             Throws an exception if a property value is null.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEmpty(System.String,System.String)">
             <summary>
             Throws an exception if a string property value is null or has a length
             of zero.
             </summary>
            
             <param name="sPropertyName">
             Name of the string property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Double)">
             <summary>
             Throws an exception if a Double property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Decimal)">
             <summary>
             Throws an exception if a Decimal property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="decPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotNegative(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is negative.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
            
             <param name="sInvalidValue">
             Invalid value for <paramref name="sPropertyValue" />.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iInvalidValue">
             Invalid value for <paramref name="iPropertyValue" />.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Int32,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="iMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Single,System.Single,System.Single)">
             <summary>
             Throws an exception if a Single property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="fPropertyValue">
             Property value to check.
             </param>
            
             <param name="fMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="fMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Double,System.Double,System.Double)">
             <summary>
             Throws an exception if a Double property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
            
             <param name="dMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="dMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyIsDefined(System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a property value is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oPropertyValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNull(System.String,System.String,System.Object)">
             <summary>
             Throws an exception if a method argument is null.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotEmpty(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string method argument is null or has a length
             of zero.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="sArgumentValue">
             Argument value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Double)">
             <summary>
             Throws an exception if a Double method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="dArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentIsDefined(System.String,System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a method argument is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oArgumentValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is an inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is no inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is an inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is no inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.m_sOwnerClassName">
            Class name of the object that created this object.
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.DraggedMarquee">
             <summary>
             Represents a marquee that might be dragged with the mouse.
             </summary>
            
             <remarks>
             Create an instance of this class when an empty area of the graph is
             clicked.  When the mouse is moved, check <see cref="M:Microsoft.NodeXL.Visualization.Wpf.MouseDrag.OnMouseMove(System.Windows.Point)"/> to determine whether the mouse has moved
             far enough to begin a marquee drag.  If <see cref="M:Microsoft.NodeXL.Visualization.Wpf.MouseDrag.OnMouseMove(System.Windows.Point)"/> returns true, call <see cref="M:Microsoft.NodeXL.Visualization.Wpf.DraggedMarquee.CreateVisual(System.Windows.Point,System.Windows.Media.Color)"/> to create a Visual to represent the dragged marquee.
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.DraggedMarquee.MarqueeFillAlpha">
            Alpha value to use to fill the marquee.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.DraggedMarquee.MarqueeOutlineAlpha">
            Alpha value to use for the marquee outline.
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DraggedMarquee.#ctor(System.Windows.Point,System.Windows.Rect,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.DraggedMarquee"/> class.
             </summary>
            
             <param name="mouseDownLocation">
             Location where the graph was clicked, in client coordinates.
             </param>
            
             <param name="graphRectangle">
             The graph rectangle.
             </param>
            
             <param name="margin">
             The graph margin.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DraggedMarquee.CreateVisual(System.Windows.Point,System.Windows.Media.Color)">
             <summary>
             Creates the Visual that should be used to represent the dragged
             marquee.
             </summary>
            
             <param name="currentMouseLocation">
             The current mouse location.
             </param>
            
             <param name="backgroundContrastColor">
             A color that contrasts with the control's background.
             </param>
            
             <returns>
             The Visual that should be used to represent the dragged marquee.
             </returns>
            
             <remarks>
             The returned Visual can be retrieved later via the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.MouseDragWithVisual.Visual"/> property.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DraggedMarquee.CreateMarqueeRectangle(System.Windows.Point)">
             <summary>
             Creates the rectangle to use for the marquee Visual.
             </summary>
            
             <param name="oCurrentMouseLocation">
             The current mouse location.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.DraggedMarquee.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.DraggedMarquee.m_oMarqueeRectangle">
            The rectangle used to create m_oMarqueeVisual, or Rect.Empty if there
            is no marquee.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.DraggedMarquee.MarqueeRectangle">
             <summary>
             Gets the rectangle that represents the marquee.
             </summary>
            
             <value>
             The rectangle that was created by <see cref="M:Microsoft.NodeXL.Visualization.Wpf.DraggedMarquee.CreateVisual(System.Windows.Point,System.Windows.Media.Color)"/>, or
             Rect.Empty if <see cref="M:Microsoft.NodeXL.Visualization.Wpf.DraggedMarquee.CreateVisual(System.Windows.Point,System.Windows.Media.Color)"/> hasn't been called.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.VerticesMovedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VerticesMoved"/>
            event.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VerticesMovedEventArgs.#ctor(Microsoft.NodeXL.Core.IVertex[])">
             <summary>
             Initializes a new instance of the VerticesMovedEventArgs class.
             </summary>
            
             <param name="movedVertices">
             An array of one or more vertices that were moved.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.VerticesMovedEventArgs.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.VerticesMovedEventArgs.m_aoMovedVertices">
            Array of one or more vertices that were moved.
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.VerticesMovedEventArgs.MovedVertices">
             <summary>
             Gets an array of one or more vertices that were moved.
             </summary>
            
             <value>
             An array of one or more vertices that were moved.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.VerticesMovedEventHandler">
             <summary>
             Represents a method that will handle the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VerticesMoved"/> event.
             </summary>
            
             <param name="sender">
             The object that fired the event.
             </param>
            
             <param name="e">
             Provides information about the moved vertices.
             </param>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl">
             <summary>
             Lays out and renders a NodeXL graph in a WPF or Windows Forms desktop
             application.
             </summary>
            
             <remarks>
            
             <h3>Overview</h3>
            
             <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl"/> is one of several classes that render a NodeXL
             graph.  It derives from FrameworkElement and is meant for use in WPF
             desktop applications.
            
             <para>
             If you need a graph rendered as a Visual without the overhead of
             FrameworkElement, use <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual"/> instead.  Note that <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual"/> does not lay out the graph before drawing it.
             </para>
            
             <para>
             You can also use <see cref="T:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer"/>, which is a low-level class
             used by both <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl"/> and <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLVisual"/>.
             <see cref="T:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer"/> cannot be directly rendered, however, and
             requires a custom wrapper that hosts its GraphDrawer.<see cref="P:Microsoft.NodeXL.Visualization.Wpf.GraphDrawer.VisualCollection"/> object.  Also, it does not lay
             out the graph before drawing it.
             </para>
            
             <para>
             To use <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl"/>, populate the graph exposed by the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.Graph"/> property, then call <see cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DrawGraph(System.Boolean)"/>.  See the sample code below.
             </para>
            
             <h3>Vertex and Edge Appearance</h3>
            
             <para>
             The default appearance of the graph's vertices is determined by the
             following properties:
             </para>
            
             <list type="bullet">
             <item><see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexColor"/></item>
             <item><see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexSelectedColor"/></item>
             <item><see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexShape"/></item>
             <item><see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexRadius"/></item>
             <item><see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexPrimaryLabelFillColor"/></item>
             </list>
            
             <para>
             The default appearance of the graph's edges is determined by the following
             properties:
             </para>
            
             <list type="bullet">
             <item><see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeColor"/></item>
             <item><see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeSelectedColor"/></item>
             <item><see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeWidth"/></item>
             <item><see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeSelectedWidth"/></item>
             <item><see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeRelativeArrowSize"/></item>
             </list>
            
             <para>
             The appearance of an individual vertex can be overridden by adding
             appropriate metadata to the vertex via <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>.  The following metadata keys can be
             used:
             </para>
            
             <list type="bullet">
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.Visibility"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerColor"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexShape"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexRadius"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerAlpha"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexPrimaryLabel"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexPrimaryLabelFillColor"/>
                 </item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexSecondaryLabel"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexImage"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexDrawingPrecedence"/></item>
             </list>
            
             <para>
             Similarly, the appearance of an individual edge can be overridden by adding
             appropriate metadata to the edge.  The following metadata keys can be used:
             </para>
            
             <list type="bullet">
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.Visibility"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerColor"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerAlpha"/></item>
             <item><see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerEdgeWidth"/></item>
             </list>
            
             <h3>Shapes, Labels, and Images</h3>
            
             <para>
             By default, vertices are drawn as the shape specified by the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexShape"/> property.  The shape of an individual vertex can be
             overridden with the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexShape"/>
             metadata key.
             </para>
            
             <para>
             To draw an individual vertex as a rectangle-enclosed label instead of a
             shape, use the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexPrimaryLabel"/>
             key.  The rectangle's fill color can be controlled with the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexPrimaryLabelFillColor"/> key.
             </para>
            
             <para>
             To draw an individual vertex as an image instead of a shape, use the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexImage"/> key.
             </para>
            
             <para>
             To control the precedence of the shape, primary label, and image keys, use
             the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexDrawingPrecedence"/> key.
             </para>
            
             <para>
             To add a secondary label to a vertex, use the the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexSecondaryLabel"/> key.  Secondary
             labels can be added to any vertex, regardless of whether it is drawn as a
             shape, primary label, or image.  The secondary label is drawn above the
             vertex.
             </para>
            
             <h3>Selecting Vertices and Edges</h3>
            
             <para>
             One or more vertices and their incident edges can be selected with the
             mouse.  See the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MouseSelectionMode"/> property for details.
             </para>
            
             <para>
             To programatically select and deselect vertices and edges, use the <see cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Microsoft.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>, <see cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Microsoft.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>, <see cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IEdge})"/>, <see cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>, and <see cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/> methods.  To determine which vertices and edges are
             selected, use the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/> and <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/> properties.
             </para>
            
             <para>
             <b>Important Note:</b>: Do not use the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.IsSelected"/> metadata key to select vertex or
             edges.  Use the selection methods on this control instead.
             </para>
            
             <h3>Zoom and Scale</h3>
            
             <para>
             The graph can be zoomed either programatically or with the mouse.  See
             <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoom"/> for details.
             </para>
            
             <para>
             The size of the graph can controlled with <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphScale"/>.
             </para>
            
             <h3>Vertex Tooltips</h3>
            
             <para>
             A tooltip can be displayed when the mouse hovers over a vertex.  The
             tooltip can be simple text or a custom UIElement containing arbitrary
             content.  See <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ShowVertexToolTips"/> for details.
             </para>
            
             <h3>Graph Layout Algorithm</h3>
            
             <para>
             By default, the control uses a force-directed Fruchterman-Reingold
             algorithm to lay out the graph.  Use the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.Layout"/> property to
             specify a different layout.
             </para>
            
             <h3>Using NodeXLControl in WPF Applications</h3>
            
             <example>
             Here is sample C# code that populates a <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl"/> graph
             with several vertices and edges.  It's assumed that a <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl"/> named nodeXLControl1 has been added to the WPF
             Window in the Visual Studio designer.
            
             <code>
            using System;
            using System.Windows;
            using System.Windows.Media;
            using Microsoft.NodeXL.Core;
            using Microsoft.NodeXL.Visualization.Wpf;
            
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
                public Window1()
                {
                    InitializeComponent();
                }
            
                private void Window_Loaded(object sender, RoutedEventArgs e)
                {
                    PopulateAndDrawGraph();
                }
            
                protected void PopulateAndDrawGraph()
                {
                    // Get the graph's vertex collection.
            
                    IVertexCollection oVertices = nodeXLControl1.Graph.Vertices;
            
                    // Add three vertices.
            
                    IVertex oVertexA = oVertices.Add();
                    IVertex oVertexB = oVertices.Add();
                    IVertex oVertexC = oVertices.Add();
            
                    // Change the color, radius, and shape of vertex A.
            
                    oVertexB.SetValue(ReservedMetadataKeys.PerColor,
                        Color.FromArgb(255, 255, 0, 255));
            
                    oVertexB.SetValue(ReservedMetadataKeys.PerVertexRadius, 20F);
            
                    oVertexB.SetValue(ReservedMetadataKeys.PerVertexShape,
                        VertexShape.Sphere);
            
                    // Draw vertex B as a primary label instead of a shape.  A primary
                    // label is a rectangle containing text.
            
                    oVertexA.SetValue(ReservedMetadataKeys.PerVertexPrimaryLabel,
                        "Primary Label");
            
                    // Set the primary label's text and fill colors.
            
                    oVertexA.SetValue(ReservedMetadataKeys.PerColor,
                        Color.FromArgb(255, 220, 220, 220));
            
                    oVertexA.SetValue(ReservedMetadataKeys.PerVertexPrimaryLabelFillColor,
                        Color.FromArgb(255, 0, 0, 0));
            
                    // Add a secondary label to vertex C.  A secondary label is text that
                    // is drawn outside the vertex.  It can be added to a shape, image, or
                    // primary label.
            
                    oVertexC.SetValue(ReservedMetadataKeys.PerVertexSecondaryLabel,
                        "Secondary Label");
            
                    // Get the graph's edge collection.
            
                    IEdgeCollection oEdges = nodeXLControl1.Graph.Edges;
            
                    // Connect the vertices with directed edges.
            
                    IEdge oEdge1 = oEdges.Add(oVertexA, oVertexB, true);
                    IEdge oEdge2 = oEdges.Add(oVertexB, oVertexC, true);
                    IEdge oEdge3 = oEdges.Add(oVertexC, oVertexA, true);
            
                    // Customize their appearance.
            
                    oEdge1.SetValue(ReservedMetadataKeys.PerColor,
                        Color.FromArgb(255, 55, 125, 98));
            
                    oEdge1.SetValue(ReservedMetadataKeys.PerEdgeWidth, 3F);
            
                    oEdge2.SetValue(ReservedMetadataKeys.PerEdgeWidth, 5F);
            
                    oEdge3.SetValue(ReservedMetadataKeys.PerColor,
                        Color.FromArgb(255, 0, 255, 0));
            
                    nodeXLControl1.DrawGraph(true);
                }
            }
            }
             </code>
             </example>
            
             <h3>Using NodeXLControl in Windows Forms Applications</h3>
            
             <example>
             <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl"/> can be used in Windows Forms applications by
             embedding it within a Windows.Forms.Integration.ElementHost control, as in
             the following sample code:
            
             <code>
            using System;
            using System.Windows.Forms;
            using System.Drawing;
            using Microsoft.NodeXL.Core;
            using Microsoft.NodeXL.Visualization.Wpf;
            
            namespace WindowsFormsApplication1
            {
            public partial class Form1 : Form
            {
                private NodeXLControl nodeXLControl1;
            
                public Form1()
                {
                    InitializeComponent();
            
                    nodeXLControl1 = new NodeXLControl();
                    elementHost1.Child = nodeXLControl1;
                }
            
                private void Form1_Load(object sender, EventArgs e)
                {
                    PopulateAndDrawGraph();
                }
            
                protected void PopulateAndDrawGraph()
                {
                    // Get the graph's vertex collection.
            
                    IVertexCollection oVertices = nodeXLControl1.Graph.Vertices;
            
                    // Add three vertices.
            
                    IVertex oVertexA = oVertices.Add();
                    IVertex oVertexB = oVertices.Add();
                    IVertex oVertexC = oVertices.Add();
            
                    // Change the color, radius, and shape of vertex A.
            
                    oVertexB.SetValue(ReservedMetadataKeys.PerColor,
                        Color.FromArgb(255, 255, 0, 255));
            
                    oVertexB.SetValue(ReservedMetadataKeys.PerVertexRadius, 20F);
            
                    oVertexB.SetValue(ReservedMetadataKeys.PerVertexShape,
                        VertexShape.Sphere);
            
                    // Draw vertex B as a primary label instead of a shape.  A primary
                    // label is a rectangle containing text.
            
                    oVertexA.SetValue(ReservedMetadataKeys.PerVertexPrimaryLabel,
                        "Primary Label");
            
                    // Set the primary label's text and fill colors.
            
                    oVertexA.SetValue(ReservedMetadataKeys.PerColor,
                        Color.FromArgb(255, 220, 220, 220));
            
                    oVertexA.SetValue(ReservedMetadataKeys.PerVertexPrimaryLabelFillColor,
                        Color.FromArgb(255, 0, 0, 0));
            
                    // Add a secondary label to vertex C.  A secondary label is text that
                    // is drawn outside the vertex.  It can be added to a shape, image, or
                    // primary label.
            
                    oVertexC.SetValue(ReservedMetadataKeys.PerVertexSecondaryLabel,
                        "Secondary Label");
            
                    // Get the graph's edge collection.
            
                    IEdgeCollection oEdges = nodeXLControl1.Graph.Edges;
            
                    // Connect the vertices with directed edges.
            
                    IEdge oEdge1 = oEdges.Add(oVertexA, oVertexB, true);
                    IEdge oEdge2 = oEdges.Add(oVertexB, oVertexC, true);
                    IEdge oEdge3 = oEdges.Add(oVertexC, oVertexA, true);
            
                    // Customize their appearance.
            
                    oEdge1.SetValue(ReservedMetadataKeys.PerColor,
                        Color.FromArgb(255, 55, 125, 98));
            
                    oEdge1.SetValue(ReservedMetadataKeys.PerEdgeWidth, 3F);
            
                    oEdge2.SetValue(ReservedMetadataKeys.PerEdgeWidth, 5F);
            
                    oEdge3.SetValue(ReservedMetadataKeys.PerColor,
                        Color.FromArgb(255, 0, 255, 0));
            
                    nodeXLControl1.DrawGraph(true);
                }
            }
            }
             </code>
             </example>
            
             <h3>Future Work</h3>
            
             <para>
             This is the first WPF version of the NodeXLControl.  It replaces a previous
             Windows Forms implementation.  This version provides the functionality
             needed by the NodeXL Excel Template project, but does not yet take
             advantage of WPF features such as dependency properties, routed events, and
             so on.  Additional WPF features may be added in future versions, depending
             on resource availability and how much demand there is for them.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MinimumGraphScale">
            <summary>
            Minimum value of the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphScale"/> property.  The value is
            1.0.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MaximumGraphScale">
            <summary>
            Maximum value of the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphScale"/> property.  The value is
            10.0.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MinimumGraphZoom">
            <summary>
            Minimum value of the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoom"/> property.  The value is
            1.0.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MaximumGraphZoom">
            <summary>
            Maximum value of the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoom"/> property.  The value is
            10.0.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.TranslationDragKey">
            Key the user must hold down to translate the graph with the mouse.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoomFactor">
            Factor used by OnMouseWheel() to compute a new zoom value.
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.#cctor">
            <summary>
            Static constructor for the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetFont(System.Windows.Media.FontFamily,System.Double)">
             <summary>
             Sets the font used to draw primary and secondary vertex labels.
             </summary>
            
             <param name="fontFamily">
             The FontFamily to use.
             </param>
            
             <param name="emSize">
             The font size to use, in ems.
             </param>
            
             <remarks>
             The default font is the SystemFonts.MessageFontFamily at size 10.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Microsoft.NodeXL.Core.IVertex,System.Boolean,System.Boolean)">
             <summary>
             Selects or deselects a vertex.
             </summary>
            
             <param name="vertex">
             Vertex to select or deselect.  Can't be null.
             </param>
            
             <param name="selected">
             true to select <paramref name="vertex"/>, false to deselect it.
             </param>
            
             <param name="alsoIncidentEdges">
             true to also select or deselect the vertex's incident edges, false to
             leave the incident edges alone.
             </param>
            
             <remarks>
             Selecting or deselecting a vertex does not affect the selected state of
             the other vertices.
            
             <para>
             To select a set of vertices and edges, use the <see cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IEdge})"/> method instead.
             </para>
            
             <para>
             An exception is thrown if the graph is being drawn when this method is
             called.  Check the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.IsDrawing"/> property before calling
             this.
             </para>
            
             <para>
             <b>Important Note:</b>
             </para>
            
             <para>
             Do not use the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.IsSelected"/> key to
             select vertex or edges.  Use the selection methods on this control
             instead.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MouseSelectionMode"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Microsoft.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
             <seealso cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Microsoft.NodeXL.Core.IEdge,System.Boolean,System.Boolean)">
             <summary>
             Selects or deselects an edge.
             </summary>
            
             <param name="edge">
             Edge to select or deselect.  Can't be null.
             </param>
            
             <param name="selected">
             true to select <paramref name="edge"/>, false to deselect it.
             </param>
            
             <param name="alsoAdjacentVertices">
             true to also select or deselect the edge's adjacent vertices, false to
             leave the adjacent vertices alone.
             </param>
            
             <remarks>
             Selecting or deselecting an edge does not affect the selected state of
             the other edges.
            
             <para>
             To select a set of vertices and edges, use the <see cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IEdge})"/> method instead.
             </para>
            
             <para>
             An exception is thrown if the graph is being drawn when this method is
             called.  Check the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.IsDrawing"/> property before calling
             this.
             </para>
            
             <para>
             <b>Important Note:</b>
             </para>
            
             <para>
             Do not use the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.IsSelected"/> key to
             select vertex or edges.  Use the selection methods on this control
             instead.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MouseSelectionMode"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Microsoft.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
             <seealso cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IEdge})">
             <summary>
             Selects a set of vertices and edges.
             </summary>
            
             <param name="vertices">
             Collection of zero or more vertices to select.
             </param>
            
             <param name="edges">
             Collection of zero or more edges to select.
             </param>
            
             <remarks>
             This method deselects any selected vertices and edges, then selects the
             vertices and edges specified in <paramref name="vertices"/> and
             <paramref name="edges"/>.  It is more efficient than making multiple
             calls to <see cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Microsoft.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/> and <see cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Microsoft.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>.
            
             <para>
             An exception is thrown if the graph is being drawn when this method is
             called.  Check the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.IsDrawing"/> property before calling
             this.
             </para>
            
             <para>
             <b>Important Note:</b>
             </para>
            
             <para>
             Do not use the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.IsSelected"/> key to
             select vertex or edges.  Use the selection methods on this control
             instead.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MouseSelectionMode"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Microsoft.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Microsoft.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
             <seealso cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll">
             <summary>
             Selects all vertices and edges.
             </summary>
            
             <remarks>
             An exception is thrown if the graph is being drawn when this method is
             called.  Check the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.IsDrawing"/> property before calling
             this.
            
             <para>
             <b>Important Note:</b>
             </para>
            
             <para>
             Do not use the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.IsSelected"/> key to
             select vertex or edges.  Use the selection methods on this control
             instead.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MouseSelectionMode"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Microsoft.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Microsoft.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
             <seealso cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll">
             <summary>
             Deselects all vertices and edges.
             </summary>
            
             <remarks>
             An exception is thrown if the graph is being drawn when this method is
             called.  Check the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.IsDrawing"/> property before calling
             this.
            
             <para>
             <b>Important Note:</b>
             </para>
            
             <para>
             Do not use the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.IsSelected"/> key to
             select vertex or edges.  Use the selection methods on this control
             instead.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MouseSelectionMode"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Microsoft.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Microsoft.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
             <seealso cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.TryGetVertexFromPoint(System.Windows.Point,Microsoft.NodeXL.Core.IVertex@)">
             <summary>
             Attempts to get the vertex containing a specified <see cref="T:System.Windows.Point"/>.
             </summary>
            
             <param name="point">
             Point to get a vertex for.
             </param>
            
             <param name="vertex">
             Where the <see cref="T:Microsoft.NodeXL.Core.IVertex"/> object gets stored if true is
             returned.
             </param>
            
             <returns>
             true if a vertex containing the point was found, false if not.
             </returns>
            
             <remarks>
             This method looks for a vertex that contains <paramref name="point"/>.
             If there is such a vertex, the vertex is stored at <paramref name="vertex"/> and true is returned.  Otherwise, <paramref name="vertex"/> is set to null and false is returned.
            
             <para>
             false is returned if an asynchronous drawing is in progress.  Check
             <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.IsDrawing"/> before calling this method.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.CopyGraphToBitmap">
             <summary>
             Creates a bitmap image of the graph.
             </summary>
            
             <returns>
             A bitmap image of the graph displayed within the control.  The bitmap
             is the size of the control's client area.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DrawGraph">
             <overloads>
             Draws the graph.
             </overloads>
            
             <summary>
             Draws the graph without laying it out first.
             </summary>
            
             <remarks>
             Graph drawing occurs asynchronously after this method is called.  See
             the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.IsDrawing"/> property for details.
            
             <para>
             If the graph is currently being drawn, this method does nothing.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DrawGraph(System.Boolean)">
             <summary>
             Draws the graph after optionally laying it out.
             </summary>
            
             <param name="layOutGraphFirst">
             If true, the graph is laid out again before it is drawn.  If false, the
             graph is drawn using the current vertex locations.
             </param>
            
             <remarks>
             Graph drawing occurs asynchronously after this method is called.  See
             the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.IsDrawing"/> property for details.
            
             <para>
             If the graph is currently being drawn, this method does nothing.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ConnectAsyncLayoutEvents(Microsoft.NodeXL.Layouts.IAsyncLayout)">
             <summary>
             Connects event handlers to an <see cref="T:Microsoft.NodeXL.Layouts.IAsyncLayout"/> object's
             events.
             </summary>
            
             <param name="oAsyncLayout">
             Object whose events need to be handled.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.CreateVertexToolTipTracker">
            <summary>
            Creates a helper object for displaying vertex tooltips and registers
            event handlers with it.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.CreateDefaultVertexToolTip(System.String)">
             <summary>
             Creates a UIElement to use as a default vertex tooltip.
             </summary>
            
             <param name="sToolTip">
             The tooltip string to use.  Can be empty but not null.
             </param>
            
             <returns>
             A UIElement.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.CreateTransforms">
            <summary>
            Creates the transforms that control zoom and scale.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetGraphZoom(System.Double,System.Boolean)">
             <summary>
             Sets a value that determines the zoom level of the graph.
             </summary>
            
             <param name="dGraphZoom">
             A value that determines the zoom level of the graph.  Must be between
             <see cref="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MinimumGraphZoom"/> and <see cref="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MaximumGraphZoom"/>.
             </param>
            
             <param name="bLimitTranslation">
             If true, the TranslateTransform used for rendering is limited to
             prevent the graph from being moved too far by the zoom.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.CenterGraphZoom">
             <summary>
             Sets the center of the graph's zoom to the center of the control.
             </summary>
            
             <remarks>
             This method uses ActualWidth and ActualHeight, which are valid only
             after a WPF layout cycle.  If this is called before a WPF layout cycle
             completes, the zoom center is set to the control's origin.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.LimitTranslation">
             <overloads>
             Prevents the graph from being moved too far.
             </overloads>
            
             <summary>
             Prevents the graph from being moved too far by adjusting the
             TranslateTransform used for rendering.
             </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.LimitTranslation(System.Double@,System.Double@)">
             <summary>
             Prevents the graph from being moved too far, given a pair of proposed
             translation distances.
             </summary>
            
             <param name="dTranslateX">
             On input, this is the proposed TranslateTransform.X property.  On
             output, it is set to a value that will prevent the graph from being
             moved too far.
             </param>
            
             <param name="dTranslateY">
             On input, this is the proposed TranslateTransform.Y property.  On
             output, it is set to a value that will prevent the graph from being
             moved too far.
             </param>
            
             <remarks>
             The caller should modify the TranslateTransform with the modified
             <paramref name="dTranslateX" /> and <paramref name="dTranslateY" />
             values.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GetVisualChild(System.Int32)">
             <summary>
             Returns a child at the specified index from a collection of child
             elements. 
             </summary>
            
             <param name="index">
             The zero-based index of the requested child element in the collection.
             </param>
            
             <returns>
             The requested child element.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.LayOutOrDrawGraph">
            <summary>
            Lays out or draws the graph, depending on the current layout state.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DrawGraph(System.Windows.Rect)">
             <summary>
             Draws the graph.
             </summary>
            
             <param name="oGraphRectangle">
             Rectangle to draw the graph within.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.TransformLayout(System.Windows.Rect)">
             <summary>
             Transform the graph's layout to a new size.
             </summary>
            
             <param name="oNewGraphRectangle">
             The new size.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetAllSelected(System.Boolean)">
             <summary>
             Selects or deselects all vertices and edges.
             </summary>
            
             <param name="bSelect">
             true to select, false to deselect.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetAllVerticesSelected(System.Boolean)">
             <summary>
             Sets the selected state of all vertices.
             </summary>
            
             <param name="bSelected">
             true to select all vertices, false to deselect them.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetAllEdgesSelected(System.Boolean)">
             <summary>
             Sets the selected state of all edges and updates the internal
             collection of selected edges.
             </summary>
            
             <param name="bSelected">
             true to select all edges, false to deselect them.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelectedInternal(Microsoft.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Performs all tasks required to select a vertex.
             </summary>
            
             <param name="oVertex">
             Vertex to select or deselect.  Can't be null.
             </param>
            
             <param name="bSelected">
             true to select <paramref name="oVertex" />, false to deselect it.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelectedInternal(Microsoft.NodeXL.Core.IEdge,System.Boolean)">
             <summary>
             Performs all tasks required to select an edge.
             </summary>
            
             <param name="oEdge">
             Edge to select or deselect.  Can't be null.
             </param>
            
             <param name="bSelected">
             true to select <paramref name="oEdge" />, false to deselect it.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MarkVertexOrEdgeAsSelected(Microsoft.NodeXL.Core.IMetadataProvider,System.Boolean)">
             <summary>
             Modifies the metadata of a vertex or edge to mark it as selected or
             unselected.
             </summary>
            
             <param name="oVertexOrEdge">
             Vertex or edge to mark, as an <see cref="T:Microsoft.NodeXL.Core.IMetadataProvider"/>.
             </param>
            
             <param name="bSelected">
             true to mark <paramref name="oVertexOrEdge"/> as selected, false for
             unselected.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ResetVertexToolTipTracker">
            <summary>
            Removes any vertex tooltip that might exist and resets the helper
            object that figures out when to show tooltips.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.RemoveVertexToolTip">
            <summary>
            Removes any vertex tooltip that might exist.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GetBackgroundContrastColor">
             <summary>
             Gets a color that contrasts with the background.
             </summary>
            
             <returns>
             A contrastring color.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.CheckIfDrawing(System.String)">
             <summary>
             Throws an exception if a drawing is in progress.
             </summary>
            
             <param name="sMethodOrPropertyName">
             Name of the method or property calling this method.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.CheckForVertexDragOnMouseMove(System.Windows.Input.MouseEventArgs)">
             <summary>
             Checks for a vertex drag operation during the MouseMove event.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.CheckForVertexDragOnMouseUp(System.Windows.Input.MouseEventArgs)">
             <summary>
             Checks for a vertex drag operation during the MouseUp event.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.CheckForMarqueeDragOnMouseMove(System.Windows.Input.MouseEventArgs)">
             <summary>
             Checks for a marquee drag operation during the MouseMove event.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.CheckForMarqueeDragOnMouseUp(System.Windows.Input.MouseEventArgs)">
             <summary>
             Checks for a marquee drag operation during the MouseUp event.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.CheckForTranslationDragOnMouseMove(System.Windows.Input.MouseEventArgs)">
             <summary>
             Checks for a translation drag operation during the MouseMove event.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.CheckForTranslationDragOnMouseUp(System.Windows.Input.MouseEventArgs)">
             <summary>
             Checks for a translation drag operation during the MouseUp event.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.CheckForToolTipsOnMouseMove(System.Windows.Input.MouseEventArgs)">
             <summary>
             Checks whether tooltip-related actions need to be taken during the
             MouseMove event.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ControlKeyIsPressed">
             <summary>
             Determines whether a control key is pressed.
             </summary>
            
             <returns>
             true if a control key is pressed.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ShiftKeyIsPressed">
             <summary>
             Determines whether a shift key is pressed.
             </summary>
            
             <returns>
             true if a shift key is pressed.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.AltKeyIsPressed">
             <summary>
             Determines whether an Alt key is pressed.
             </summary>
            
             <returns>
             true if an Alt key is pressed.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EscapeKeyIsPressed">
             <summary>
             Determines whether the Escape key is pressed.
             </summary>
            
             <returns>
             true if the Escape key is pressed.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.TranslationDragKeyIsPressed">
             <summary>
             Determines whether the key used to start dragging a translation with
             the mouse is pressed.
             </summary>
            
             <returns>
             true if the key is pressed.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.LeftButtonIsPressed(System.Windows.Input.MouseEventArgs)">
             <summary>
             Determines whether the left mouse button is pressed.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
            
             <returns>
             true if the left mouse button is pressed.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.RightButtonIsPressed(System.Windows.Input.MouseEventArgs)">
             <summary>
             Determines whether the right mouse button is pressed.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
            
             <returns>
             true if the right mouse button is pressed.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DragIsInProgress(Microsoft.NodeXL.Visualization.Wpf.MouseDrag,System.Windows.Input.MouseEventArgs,System.Windows.Point@)">
             <summary>
             Determines whether a particular type of mouse drag is in progress.
             </summary>
            
             <param name="oMouseDrag">
             Object that represents the drag operation, or null if the drag
             operation hasn't begun.
             </param>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
            
             <param name="oMouseLocation">
             Where the mouse location get stored if true is returned.
             </param>
            
             <returns>
             true if the specified mouse drag is in progress.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DragMightBeInProgress">
             <summary>
             Determines whether any kind of mouse drag is in progress or will be
             in progress if the user moves the mouse.
             </summary>
            
             <returns>
             true if a mouse drag is in progress, or if a MouseDrag object has been
             created and is waiting for the user to move the mouse to begin a drag.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.RemoveVisualFromTopOfGraph(Microsoft.NodeXL.Visualization.Wpf.MouseDragWithVisual)">
             <summary>
             Removes from the top of the graph any Visual drawn during a MouseMove
             event.
             </summary>
            
             <param name="oMouseDragWithVisual">
             Object that represents the drag operation, or null if the drag
             operation hasn't begun.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GetCursorForMarqueeDrag">
             <summary>
             Returns a cursor to use for the control while a marquee drag operation
             is occurring.
             </summary>
            
             <returns>
             The cursor to use.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectMarqueedVertices">
            <summary>
            Selects or deselects the marqueed vertices.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.FireSelectionChanged">
            <summary>
            Fires the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.FireGraphMouseDown(System.Windows.Input.MouseButtonEventArgs,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Fires the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphMouseDown"/> event if appropriate.
             </summary>
            
             <param name="oMouseButtonEventArgs">
             Standard mouse event arguments.
             </param>
            
             <param name="oVertex">
             Clicked vertex if the user clicked on a vertex, or null if he didn't.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.FireGraphMouseUp(System.Windows.Input.MouseButtonEventArgs,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Fires the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphMouseUp"/> event if appropriate.
             </summary>
            
             <param name="oMouseButtonEventArgs">
             Standard mouse event arguments.
             </param>
            
             <param name="oVertex">
             Clicked vertex if the user clicked on a vertex, or null if he didn't.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.FireVertexClick(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Fires the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexClick"/> event if appropriate.
             </summary>
            
             <param name="oVertex">
             Clicked vertex.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.FireVertexDoubleClick(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Fires the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexDoubleClick"/> event if appropriate.
             </summary>
            
             <param name="oVertex">
             Double-clicked vertex.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.FireVertexMouseHover(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Fires the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseHover"/> event if appropriate.
             </summary>
            
             <param name="oVertex">
             Hovered vertex.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.FireVertexMouseLeave">
            <summary>
            Fires the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseLeave"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.FireGraphZoomChanged">
            <summary>
            Fires the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoomChanged"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.FireVerticesMoved(Microsoft.NodeXL.Core.IVertex[])">
             <summary>
             Fires the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VerticesMoved"/> event if appropriate.
             </summary>
            
             <param name="aoMovedVertices">
             An array of one or more vertices that were moved.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.FireDrawingGraph">
            <summary>
            Fires the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DrawingGraph"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.FireGraphDrawn">
            <summary>
            Fires the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphDrawn"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.FirePreviewVertexToolTipShown(Microsoft.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs)">
             <summary>
             Fires the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.PreviewVertexToolTipShown"/> event if
             appropriate.
             </summary>
            
             <param name="oVertexToolTipShownEventArgs">
             Event arguments.  The event handler may modify the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs.VertexToolTip"/> property.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.FireVertexEvent(Microsoft.NodeXL.Core.VertexEventHandler,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Fires an event with the signature VertexEventHandler.
             </summary>
            
             <param name="oVertexEventHandler">
             Event handler, or null if the event isn't being handled.
             </param>
            
             <param name="oVertex">
             Vertex associated with the event.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.FireGraphMouseButtonEvent(Microsoft.NodeXL.Visualization.Wpf.GraphMouseButtonEventHandler,System.Windows.Input.MouseButtonEventArgs,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Fires an event with the signature GraphMouseButtonEventHandler.
             </summary>
            
             <param name="oGraphMouseButtonEventHandler">
             Event handler, or null if the event isn't being handled.
             </param>
            
             <param name="oMouseButtonEventArgs">
             Standard mouse event arguments.
             </param>
            
             <param name="oVertex">
             Vertex associated with the event.  Can be null.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MeasureOverride(System.Windows.Size)">
             <summary>
             When overridden in a derived class, measures the size in layout
             required for child elements and determines a size for the
             FrameworkElement-derived class. 
             </summary>
            
             <param name="availableSize">
             The available size that this element can give to child elements.
             Infinity can be specified as a value to indicate that the element will
             size to whatever content is available.
             </param>
            
             <returns>
             The size that this element determines it needs during layout, based on
             its calculations of child element sizes.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ArrangeOverride(System.Windows.Size)">
             <summary>
             When overridden in a derived class, positions child elements and
             determines a size for a FrameworkElement derived class. 
             </summary>
            
             <param name="finalSize">
             The final area within the parent that this element should use to
             arrange itself and its children.
             </param>
            
             <returns>
             The actual size used.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.OnRender(System.Windows.Media.DrawingContext)">
             <summary>
             Renders the control.
             </summary>
            
             <param name="drawingContext">
             The drawing instructions for a specific element. This context is
             provided to the layout system.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
             <summary>
             Raises the SizeChanged event, using the specified information as part
             of the eventual event data.
             </summary>
            
             <param name="sizeInfo">
             Details of the old and new size involved in the change.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
             <summary>
             Handles the MouseDown event.
             </summary>
            
             <param name="e">
             The MouseButtonEventArgs that contains the event data.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.OnMouseMove(System.Windows.Input.MouseEventArgs)">
             <summary>
             Handles the MouseMove event.
             </summary>
            
             <param name="e">
             The MouseEventArgs that contains the event data.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
             <summary>
             Handles the MouseUp event.
             </summary>
            
             <param name="e">
             The MouseButtonEventArgs that contains the event data.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
             <summary>
             Handles the MouseLeave event.
             </summary>
            
             <param name="e">
             The MouseEventArgs that contains the event data.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
             <summary>
             Handles the MouseWheel event.
             </summary>
            
             <param name="e">
             The MouseWheelEventArgs that contains the event data.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.AsyncLayout_LayOutGraphIterationCompleted(System.Object,System.EventArgs)">
             <summary>
             Handles the LayOutGraphIterationCompleted event on the m_oAsyncLayout
             object.
             </summary>
            
             <param name="oSender">
             Standard event argument.
             </param>
            
             <param name="oEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.AsyncLayout_LayOutGraphCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
             <summary>
             Handles the LayOutGraphCompleted event on the m_oAsyncLayout object.
             </summary>
            
             <param name="oSender">
             Standard event argument.
             </param>
            
             <param name="oAsyncCompletedEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexToolTipTracker_ShowToolTip(System.Object,Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerEventArgs)">
             <summary>
             Handles the ShowToolTip event on the m_oVertexToolTipTracker object.
             </summary>
            
             <param name="oSource">
             Standard event arguments.
             </param>
            
             <param name="oToolTipTrackerEventArgs">
             Standard event arguments.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexToolTipTracker_HideToolTip(System.Object,Microsoft.Research.CommunityTechnologies.GraphicsLib.ToolTipTrackerEventArgs)">
             <summary>
             Handles the HideToolTip event on the m_oVertexToolTipTracker object.
             </summary>
            
             <param name="oSource">
             Standard event arguments.
             </param>
            
             <param name="oToolTipTrackerEventArgs">
             Standard event arguments.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_oGraph">
            The graph being drawn.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_oGraphDrawer">
            Draws the graph onto a collection of Visual objects.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_oAsyncLayout">
            Object used to lay out the graph.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_oLastLayoutContext">
            Layout context most recently used to lay out the graph.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_oLastGraphDrawingContext">
            GraphDrawingContext most recently used to draw the graph, or null if
            the graph hasn't been drawn yet.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_eLayoutState">
            Indicates the state of the graph's layout.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_eMouseSelectionMode">
            Determines what gets selected when a vertex is clicked with the mouse.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_bAllowVertexDrag">
            true if a vertex can be moved by dragging it with the mouse.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_oVerticesBeingDragged">
            Vertex the user is dragging with the mouse, or null if a vertex isn't
            being dragged.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_oMarqueeBeingDragged">
            Marquee the user is dragging with the mouse, or null if a marquee isn't
            being dragged.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_oTranslationBeingDragged">
            The translation the user is dragging with the mouse, or null if a
            translation isn't being dragged.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_oSelectedVertices">
            Selected vertices and edges.  Dictionaries are used instead of lists or
            arrays to prevent the same vertex or edge from being added twice.  The
            keys are IVertex or IEdge and the values aren't used.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_oSelectedEdges">
            
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_bShowVertexToolTips">
            true to show vertex tooltips.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_oLastMouseMoveLocation">
            Location of the mouse during the most recent MouseMove event, or
            (-1,-1) if that event hasn't fired yet.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_oVertexToolTipTracker">
            Helper object for figuring out when to show vertex tooltips.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_oVertexToolTip">
            The vertex tooltip being displayed, or null if no vertex tooltip is
            being displayed.
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.m_bGraphZoomCentered">
            See OnRenderSizeChanged().
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.Graph">
             <summary>
             Gets or sets the graph to draw.
             </summary>
            
             <value>
             The graph to draw, as an <see cref="T:Microsoft.NodeXL.Core.IGraph"/>.
             </value>
            
             <remarks>
             After the graph is populated or modified, you must call <see cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DrawGraph(System.Boolean)"/> to draw it.
            
             <para>
             An exception is thrown if this property is set while an asynchronous
             drawing is in progress.  Check <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.IsDrawing"/> before using
             this property.
             </para>
            
             <para>
             Do not set this property to a graph that is already owned by another
             graph drawer.  If you want to simultaneously draw the same graph with
             two different graph drawers, make a copy of the graph using
             IGraph.<see cref="M:Microsoft.NodeXL.Core.IGraph.Clone(System.Boolean,System.Boolean)"/>.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.Layout">
             <summary>
             Gets or sets the object to use to lay out the graph.
             </summary>
            
             <value>
             The object to use to lay out the graph, as an <see cref="T:Microsoft.NodeXL.Layouts.IAsyncLayout"/>.  The default value is a <see cref="T:Microsoft.NodeXL.Layouts.FruchtermanReingoldLayout"/> object.
             </value>
            
             <remarks>
             An exception is thrown if this property is set while an asynchronous
             drawing is in progress.  Check <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.IsDrawing"/> before using
             this property.
            
             <para>
             This property can be set to any object that implements <see cref="T:Microsoft.NodeXL.Layouts.IAsyncLayout"/>, whether it is provided by NodeXL or implemented
             by the application.  For a list of provided layout classes, see <see cref="T:Microsoft.NodeXL.Layouts.AsyncLayoutBase"/>.
             </para>
            
             </remarks>
            
             <example>
             The example shows how to lay out the graph as a grid:
            
             <code>
             !Debug.Assert(nodeXLControl.IsDrawing);
             nodeXLControl.Layout = new GridLayout();
             </code>
            
             </example>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.BackColor">
             <summary>
             Gets or sets the graph's background color.
             </summary>
            
             <value>
             The graph's background color, as a <see cref="T:System.Windows.Media.Color"/>.  The default value is
             SystemColors.<see cref="P:System.Windows.SystemColors.WindowColor"/>.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexShape">
             <summary>
             Gets or sets the default shape of the vertices.
             </summary>
            
             <value>
             The default shape of the vertices, as a <see cref="T:Microsoft.NodeXL.Visualization.Wpf.VertexShape"/>.
             The default value is <see cref="F:Microsoft.NodeXL.Visualization.Wpf.VertexShape.Disk"/>.
             </value>
            
             <remarks>
             The default shape of a vertex can be overridden by setting the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexShape"/> key on the vertex.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexRadius">
             <summary>
             Gets or sets the default radius of the vertices.
             </summary>
            
             <value>
             The default radius of the vertices, as a <see cref="T:System.Double"/>.  Must
             be between <see cref="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.MinimumRadius"/> and <see cref="F:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer.MaximumRadius"/>, inclusive.  The default value
             is 3.0.
             </value>
            
             <remarks>
             The default radius of a vertex can be overridden by setting the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexRadius"/> key on the vertex.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexColor">
             <summary>
             Gets or sets the default color of unselected vertices.
             </summary>
            
             <value>
             The default color of unselected vertices, as a <see cref="T:System.Windows.Media.Color"/>.
             The default value is <see cref="P:System.Windows.SystemColors.WindowTextColor"/>.
             </value>
            
             <remarks>
             The default color of an unselected vertex can be overridden by setting
             the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerColor"/> key on the vertex.
             The key's value can be of type System.Drawing.Color or
             System.Windows.Media.Color.
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexSelectedColor"/>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexSelectedColor">
             <summary>
             Gets or sets the color of selected vertices.
             </summary>
            
             <value>
             The color of selected vertices, as a <see cref="T:System.Windows.Media.Color"/>.  The default
             value is <see cref="P:System.Windows.SystemColors.HighlightColor"/>.
             </value>
            
             <remarks>
             The color of selected vertices cannot be set on a per-vertex basis.
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexColor"/>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexPrimaryLabelFillColor">
             <summary>
             Gets or sets the default fill color to use for vertices drawn as
             primary labels.
             </summary>
            
             <value>
             The default fill color to use for primary labels.  The default is
             SystemColors.WindowColor.
             </value>
            
             <remarks>
             <see cref="T:System.Windows.Media.Color"/> is used for the primary label text and outline.
            
             <para>
             The default fill color of a vertex can be overridden by setting the
             <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexPrimaryLabelFillColor"/> key
             on the vertex.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeWidth">
             <summary>
             Gets or sets the default width of unselected edges.
             </summary>
            
             <value>
             The default width of unselected edges, as a <see cref="T:System.Double"/>.
             Must be between <see cref="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.MinimumWidth"/> and <see cref="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.MaximumWidth"/>, inclusive.  The default value
             is 1.
             </value>
            
             <remarks>
             The default width of an unselected edge can be overridden by setting
             the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerEdgeWidth"/> key on the edge.
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeSelectedWidth"/>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeSelectedWidth">
             <summary>
             Gets or sets the width of selected edges.
             </summary>
            
             <value>
             The width of selected edges, as a <see cref="T:System.Double"/>.  Must be
             between <see cref="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.MinimumWidth"/> and <see cref="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.MaximumWidth"/>, inclusive.  The default value
             is 2.
             </value>
            
             <remarks>
             The width of selected edges cannot be set on a per-edge basis.
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeWidth"/>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeColor">
             <summary>
             Gets or sets the default color of unselected edges.
             </summary>
            
             <value>
             The default color of unselected edges, as a <see cref="T:System.Windows.Media.Color"/>.  The
             default value is <see cref="P:System.Windows.SystemColors.WindowTextColor"/>.
             </value>
            
             <remarks>
             The default color of an unselected edge can be overridden by setting
             the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerColor"/> key on the edge.  The
             key's value can be of type System.Drawing.Color or
             System.Windows.Media.Color.
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeSelectedColor"/>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeSelectedColor">
             <summary>
             Gets or sets the color of selected edges.
             </summary>
            
             <value>
             The color of selected edges, as a <see cref="T:System.Windows.Media.Color"/>.  The default
             value is <see cref="P:System.Windows.SystemColors.HighlightColor"/>.
             </value>
            
             <remarks>
             The color of selected edges cannot be set on a per-vertex basis.
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeColor"/>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeRelativeArrowSize">
             <summary>
             Gets or sets the relative size of arrowheads on directed edges.
             </summary>
            
             <value>
             The relative size of arrowheads, as a <see cref="T:System.Double"/>.  Must be
             between <see cref="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.MinimumRelativeArrowSize"/> and <see cref="F:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer.MaximumRelativeArrowSize"/>, inclusive.  The
             default value is 3.
             </value>
            
             <remarks>
             The value is relative to <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeWidth"/> and <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeSelectedWidth"/>.  If the width or selected width is
             increased, the arrow size on unselected or selected edges is increased
             proportionally.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.FilteredAlpha">
             <summary>
             Gets or sets the alpha value to use for vertices and edges that are
             filtered.
             </summary>
            
             <value>
             The alpha value to use for vertices and edges that have a <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.Visibility"/> value of <see cref="F:Microsoft.NodeXL.Core.VisibilityKeyValue.Filtered"/>.  Must be between 0 (invisible)
             and 255 (opaque).  The default value is 10.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MouseSelectionMode">
             <summary>
             Gets or sets a value that determines what gets selected when a vertex
             is clicked with the mouse.
             </summary>
            
             <value>
             A <see cref="T:Microsoft.NodeXL.Visualization.Wpf.MouseSelectionMode"/> value.  The
             default value is <see cref="F:Microsoft.NodeXL.Visualization.Wpf.MouseSelectionMode.SelectVertexAndIncidentEdges"/>.
             </value>
            
             <remarks>
             When this property is set to SelectVertexAndIncidentEdges, one or more
             vertices can be selected with the mouse.  If the Control key is not
             pressed, clicking a vertex clears the current selection, then selects
             the clicked vertex and its incident edges.  If the Control key is
             pressed, clicking a vertex toggles the selection state of the vertex
             and its incident edges without affecting the other vertices and edges.
             Clicking without the Control key on an area not occupied by a vertex
             clears the current selection.
            
             <para>
             When this property is set to SelectVertexAndIncidentEdges, vertices can
             also be selected by dragging a marquee over them.  If no key is
             pressed, the current selection is cleared, then any vertices within the
             marquee are selected, along with their incident edges.  If the Shift
             key is pressed, the vertices and their incident edges are added to the
             current selection.  If the Alt key is pressed, the vertices and their
             incident edges are subtracted from the current selection.
             </para>
            
             <para>
             When this property is set to SelectVertex, the behavior is the same as
             with SelectVertexAndIncidentEdges, except that the incident edges are
             not selected.
             </para>
            
             <para>
             When this property is set to SelectVertexAndIncidentEdges or
             SelectVertex, clicking on a vertex results in the following sequence:
             </para>
            
             <list type="bullet">
            
             <item><description>
             The <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphMouseDown"/> event fires.
             </description></item>
            
             <item><description>
             The <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexClick"/> event fires.
             </description></item>
            
             <item><description>
             The vertex and possibly its incident edges are redrawn as selected or
             unselected.
             </description></item>
            
             <item><description>
             The <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/> event fires.
             </description></item>
            
             <item><description>
             The <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphMouseUp"/> event fires.
             </description></item>
            
             </list>
            
             <para>
             When this property is set to SelectNothing, clicking on a vertex
             results in the following sequence:
             </para>
            
             <list type="bullet">
            
             <item><description>
             The <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphMouseDown"/> event fires.
             </description></item>
            
             <item><description>
             The <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexClick"/> event fires.
             </description></item>
            
             <item><description>
             The <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphMouseUp"/> event fires.
             </description></item>
            
             </list>
            
             <para>
             Set this property to SelectNothing if you want mouse clicks to have no
             effect, or if you want to customize the click behavior.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Microsoft.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Microsoft.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
             <seealso cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.AllowVertexDrag">
             <summary>
             Gets or sets a flag indicating whether vertices can be moved by
             dragging them with the mouse.
             </summary>
            
             <value>
             true if vertices can be moved by dragging them with the mouse, false
             otherwise.  The default value is true.
             </value>
            
             <remarks>
             When this property is true, the user can move a single vertex by
             left-clicking it and dragging it with the mouse.  She can also select
             multiple vertices via multiple clicks or a marquee, then drag all the
             selected vertices by left-clicking one of them and dragging with the
             mouse.
            
             <para>
             The dragged vertices and their incident edges are redrawn, but no other
             vertices or edges are affected.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ShowVertexToolTips">
             <summary>
             Gets or sets a value indicating whether vertex tooltips should be
             shown.
             </summary>
            
             <value>
             true to show vertex tooltips.  The default value is false.
             </value>
            
             <remarks>
             A vertex tooltip is a tootip that appears when the mouse is hovered
             over a vertex.  Each vertex has its own tooltip.
            
             <para>
             To use simple text for tooltips, set <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ShowVertexToolTips"/>
             to true, then use Vertex.<see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> to
             assign a tooltip string to each of the graph's vertices.  The key must
             be the reserved key ReservedMetadataKeys.<see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.VertexToolTip"/> and the value must be the
             tooltip string for the vertex.
             </para>
            
             <para>
             To use a custom UIElement for tooltips instead of simple text, set <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ShowVertexToolTips"/> to true, then handle the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.PreviewVertexToolTipShown"/> event.  In your event handler, set
             the event argument's <see cref="P:Microsoft.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs.VertexToolTip"/> to a UIElement that
             you create.  You can use the event argument's <see cref="P:Microsoft.NodeXL.Core.VertexEventArgs.Vertex"/> property to customize the UIElement
             based on which vertex was hovered over.
             </para>
            
             <para>
             The <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseHover"/> and <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseLeave"/>
             events fires regardless of whether vertex tooltips are shown.
             </para>
            
             <para>
             Note that vertex tooltips are entirely independent of the standard
             tooltip exposed by FrameworkElement.ToolTip.
             </para>
            
             </remarks>
            
             <seealso cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.PreviewVertexToolTipShown"/>
             <seealso cref="T:Microsoft.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs"/>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphScale">
             <summary>
             Gets or sets a value that determines the size of the graph.
             </summary>
            
             <value>
             A value that determines the size of the graph.  Must be between <see cref="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MinimumGraphScale"/> and <see cref="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MaximumGraphScale"/>.  The
             default value is 1.0.
             </value>
            
             <remarks>
             If this is left at its default value of 1.0, the graph is laid out and
             rendered within a rectangle that is the same size as the control.  If
             it is set to 2.0, for example, the graph is laid out within a rectangle
             whose sides are twice as long as the sides of the control, but the
             laid out graph is shrunk to fit the control.  The result is that the
             graph fits within the control but all its vertices and edges are
             smaller than normal.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoom">
             <summary>
             Gets or sets a value that determines the zoom level of the graph.
             </summary>
            
             <value>
             A value that determines the zoom level of the graph.  Must be between
             <see cref="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MinimumGraphZoom"/> and <see cref="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MaximumGraphZoom"/>.
             The default value is 1.0.
             </value>
            
             <remarks>
             This property gets set automatically when the user spins the mouse
             wheel.
            
             <para>
             The <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoomChanged"/> event fires when this property is
             changed, either programatically or with the mouse wheel.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices">
             <summary>
             Gets an array of the graph's selected vertices.
             </summary>
            
             <value>
             An array of the graph's selected vertices.
             </value>
            
             <remarks>
             If there are no selected vertices, the returned array has zero
             elements.  The returned value is never null.
            
             <para>
             The returned array should be considered read-only.  To select a vertex,
             use <see cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Microsoft.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/> or a related method.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MouseSelectionMode"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Microsoft.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Microsoft.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
             <seealso cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges">
             <summary>
             Gets an array of the graph's selected edges.
             </summary>
            
             <value>
             An array of the graph's selected edges.
             </value>
            
             <remarks>
             If there are no selected edges, the returned array has zero elements.
             The returned value is never null.
            
             <para>
             The returned array should be considered read-only.  To select an edge,
             use <see cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Microsoft.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/> or a related method.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MouseSelectionMode"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Microsoft.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Microsoft.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.IsDrawing">
             <summary>
             Gets a value indicating whether the graph is being drawn.
             </summary>
            
             <value>
             true if the graph is being drawn.
             </value>
            
             <remarks>
             Graph drawing, which may include an interative graph layout stage,
             occurs asynchronously after <see cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DrawGraph"/> is called. 
             Several properties and methods, such as <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.Graph"/>, <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.Layout"/>, and <see cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IEdge})"/>, cannot be accessed
             while the graph is being drawn.  Check <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.IsDrawing"/> or
             monitor the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DrawingGraph"/> and <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphDrawn"/>
             events before accessing those properties and methods.
            
             <para>
             The <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DrawingGraph"/> event fires before graph drawing
             begins.  The <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphDrawn"/> event fires after graph drawing
             completes.
             </para>
            
             <para>
             Typically, an application will populate and draw the graph in the
             load event of the Window or Form, and use the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DrawingGraph"/> and <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphDrawn"/> events to disable
             and enable any controls that might be used to redraw the graph.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphDrawer">
             <summary>
             Do not use this property.  It is for internal use only.
             </summary>
            
             <value>
             Do not use this property.  It is for internal use only.
             </value>
        </member>
        <member name="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged">
             <summary>
             Occurs when the selection state of a vertex or edge changes.
             </summary>
            
             <remarks>
             This event occurs when one or more of the graph's vertices or edges are
             selected or deselected.  Updated arrays of the graph's selected
             vertices and edges can be obtained from the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/> and <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/> properties.
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MouseSelectionMode"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Microsoft.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Microsoft.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
        </member>
        <member name="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphMouseDown">
             <summary>
             Occurs when the mouse pointer is within the graph and a mouse button
             is pressed.
             </summary>
            
             <remarks>
             See <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MouseSelectionMode"/> for details on how vertices are
             selected with the mouse.
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MouseSelectionMode"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Microsoft.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Microsoft.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Microsoft.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
        </member>
        <member name="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphMouseUp">
             <summary>
             Occurs when the mouse pointer is within the graph and a mouse button
             is released.
             </summary>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MouseSelectionMode"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
        </member>
        <member name="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexClick">
             <summary>
             Occurs when a vertex is clicked.
             </summary>
            
             <remarks>
             In your event handler, do not change the selected state of the clicked
             vertex.  That happens automatically.  An exception is thrown if you
             attempt to do this.
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MouseSelectionMode"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
        </member>
        <member name="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexDoubleClick">
             <summary>
             Occurs when a vertex is double-clicked.
             </summary>
            
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.MouseSelectionMode"/>
             <seealso cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
        </member>
        <member name="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseHover">
             <summary>
             Occurs when the mouse pointer hovers over a vertex.
             </summary>
            
             <remarks>
             This event occurs when the mouse pointer hovers over a vertex.  If the
             mouse is moved to another vertex, this event fires again.  If the mouse
             is left hovering over the vertex for a predetermined period or is moved
             away from the vertex, a <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseLeave"/> event occurs.
            
             <para>
             If <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ShowVertexToolTips"/> is true, hovering the mouse over a
             vertex causes the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseHover"/> event to fire,
             followed by <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.PreviewVertexToolTipShown"/>.  If <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ShowVertexToolTips"/> is false, only the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseHover"/> event fires.
             </para>
            
             </remarks>
            
             <seealso cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseLeave"/>
        </member>
        <member name="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseLeave">
             <summary>
             Occurs when the mouse pointer is left hovering over a vertex for a
             predetermined period or is moved away from all vertices.
             </summary>
            
             <remarks>
             Hovering the mouse over a vertex causes the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseHover"/> event to fire.  If the mouse is left
             hovering over the vertex for a predetermined period or is moved away
             from the vertex, the <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseLeave"/> event fires.
             </remarks>
            
             <seealso cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseHover"/>
        </member>
        <member name="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.PreviewVertexToolTipShown">
             <summary>
             Occurs when the mouse pointer hovers over a vertex but before a vertex
             tooltip is shown.
             </summary>
            
             <remarks>
             See <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ShowVertexToolTips"/> for information on how to show
             and customize vertex tooltips.
             </remarks>
        </member>
        <member name="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoomChanged">
             <summary>
             Occurs when the <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoom"/> property is changed.
             </summary>
            
             <remarks>
             This event occurs when <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoom"/> is changed
             programatically or with the mouse wheel.
             </remarks>
        </member>
        <member name="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DrawingGraph">
             <summary>
             Occurs before graph drawing begins.
             </summary>
            
             <remarks>
             Graph drawing occurs asynchronously.  This event fires before graph
             drawing begins.
            
             <para>
             The <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphDrawn"/> event fires after drawing is complete.
             </para>
            
             <para>
             The <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.IsDrawing"/> property can also be used to determine
             whether a graph is being drawn.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphDrawn">
             <summary>
             Occurs after graph drawing completes.
             </summary>
            
             <remarks>
             Graph drawing occurs asynchronously.  This event fires when the graph
             is completely drawn.
            
             <para>
             The <see cref="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.DrawingGraph"/> event fires before graph drawing
             begins.
             </para>
            
             <para>
             The <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.IsDrawing"/> property can also be used to determine
             whether a graph is being drawn.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VerticesMoved">
             <summary>
             Occurs after one or more vertices are moved to a new location with the
             mouse.
             </summary>
            
             <remarks>
             This event is fired when the user releases the mouse button after
             dragging one or more vertices to a new location.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VertexDrawer">
             <summary>
             Gets the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer"/> used to draw the graph's
             vertices.
             </summary>
            
             <value>
             The <see cref="T:Microsoft.NodeXL.Visualization.Wpf.VertexDrawer"/> used to draw the graph's vertices.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.EdgeDrawer">
             <summary>
             Gets the <see cref="T:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer"/> used to draw the graph's edges.
             </summary>
            
             <value>
             The <see cref="T:Microsoft.NodeXL.Visualization.Wpf.EdgeDrawer"/> used to draw the graph's edges.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.GraphRectangle">
             <summary>
             Gets the rectangle that defines the bounds of the graph.
             </summary>
            
             <value>
             The rectangle that defines the bounds of the graph.
             </value>
            
             <remarks>
             The rectangle's dimensions are not affected by either of the transforms
             used for the control's render transform, <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ScaleTransformForRender"/> or <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.TranslateTransformForRender"/>.  The ARE affected by <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ScaleTransformForLayout"/>, however.  See <see cref="M:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.CreateTransforms"/> for details. 
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ScaleTransformForLayout">
             <summary>
             Gets the ScaleTransform used for the control's layout transform.
             </summary>
            
             <value>
             A ScaleTransform object that controls the size of the graph's canvas.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ScaleTransformForRender">
             <summary>
             Gets the ScaleTransform used for the control's render transform.
             </summary>
            
             <value>
             A ScaleTransform object that controls the graph's zoom.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.TranslateTransformForRender">
             <summary>
             Gets the TranslateTransform used for the control's render transform.
             </summary>
            
             <value>
             A TranslateTransform object that controls the position of the graph.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ClassName">
             <summary>
             Gets the full name of the class.
             </summary>
            
             <value>
             The full name of the class, suitable for use in error messages.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ArgumentChecker">
             <summary>
             Gets a new initialized <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ArgumentChecker"/> object.
             </summary>
            
             <value>
             A new initialized <see cref="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.ArgumentChecker"/> object.
             </value>
            
             <remarks>
             The returned object can be used to check the validity of property
             values and method parameters.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.VisualChildrenCount">
             <summary>
             Gets the number of visual child elements within this element.
             </summary>
            
             <value>
             The number of visual child elements for this element.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.LayoutState">
            <summary>
            Indicates the state of the graph's layout.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.LayoutState.Stable">
            <summary>
            The graph is empty, or it's layout is complete and it has been
            drawn.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.LayoutState.LayoutRequired">
            <summary>
            The graph needs to be laid out.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.LayoutState.LayingOut">
            <summary>
            The graph is being asynchronously laid out.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.LayoutState.LayoutIterationCompleted">
            <summary>
            An iteration of the asynchronous layout has completed and now the
            graph needs to be drawn.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.LayoutState.LayoutCompleted">
            <summary>
            The asynchronous layout has completed and now the graph needs to be
            drawn.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Visualization.Wpf.NodeXLControl.LayoutState.TransformRequired">
            <summary>
            Same as Stable, but the control has been resized and now the
            graph's layout needs to be transformed to the new size.
            </summary>
        </member>
    </members>
</doc>
