<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.NodeXL.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.NodeXL.Core.IFormattableNodeXL">
             <summary>
             Provides functionality for formatting a NodeXL object into a String
             representation.
             </summary>
            
             <remarks>
             This interface adds a <see cref="M:Microsoft.NodeXL.Core.IFormattableNodeXL.ToString(System.String)"/> method to the <see cref="T:System.IFormattable"/> interface and defines a minimum set of format
             specifiers for formatting NodeXL objects.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IFormattableNodeXL.ToString">
             <overloads>
             Formats the value of the current instance.
             </overloads>
            
             <summary>
             Formats the value of the current instance using the default format. 
             </summary>
            
             <returns>
             The formatted string.
             </returns>
            
             <remarks>
             This is the same as <see cref="M:Microsoft.NodeXL.Core.IFormattableNodeXL.ToString(System.String)"/>("G").
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IFormattableNodeXL.ToString(System.String)">
             <summary>
             Formats the value of the current instance using a specified format.
             </summary>
            
             <param name="format">
             The <see cref="T:System.String"/> specifying the format to use, or null or an
             empty string to use the default format.  See <see cref="M:Microsoft.NodeXL.Core.IFormattableNodeXL.ToString(System.String,System.IFormatProvider)"/> for the available formats.
             </param>
            
             <returns>
             The formatted string.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IFormattableNodeXL.ToString(System.String,System.IFormatProvider)">
             <summary>
             Formats the value of the current instance using a specified format and
             format provider.
             </summary>
            
             <param name="format">
             The <see cref="T:System.String"/> specifying the format to use, or null or an
             empty string to use the default format.  The minimum set of supported
             formats are listed in the remarks.
             </param>
            
             <param name="formatProvider">
             The <see cref="T:System.IFormatProvider"/> to use to format the value, or null
             to use the format information from the current locale setting of the
             operating system.   The implementation may ignore this parameter.
             </param>
            
             <returns>
             The formatted string.
             </returns>
            
             <remarks>
             The implementation may ignore <paramref name="formatProvider"/>.
            
             <para>
             The implementation must support the following <paramref name="format"/> values.  It may support additional formats as well.
             </para>
            
             <list type="table">
            
             <listheader>
             <term>Format</term>
             <term>Results</term>
             </listheader>
            
             <item>
             <term>G</term>
             <term>
             Default format, includes only an instance summary.  An instance summary
             may be an object ID or name, for example.
             </term>
             </item>
            
             <item>
             <term>P</term>
             <term>
             Includes all public properties, each on a separate line.  For
             collection properties, only the item count is included.
             </term>
             </item>
            
             <item>
             <term>D</term>
             <term>
             Includes all public properties, each on a separate line.  For
             collection properties, a summary of each item in the collection is
             included, each on a separate line.
             </term>
             </item>
            
             <item>
             <term>null</term>
             <term>
             Same as G.
             </term>
             </item>
            
             <item>
             <term>Empty string ("")</term>
             <term>
             Same as G.
             </term>
             </item>
            
             </list>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Core.ByDelegateVertexSorter">
             <summary>
             Sorts a collection of vertices using a vertex-comparison delegate.
             </summary>
            
             <remarks>
             Use this class when you want to sort a collection of vertices using your
             own vertex comparison method.  Set the <see cref="P:Microsoft.NodeXL.Core.ByDelegateVertexSorter.VertexComparer"/>
             property to a delegate that compares two vertices, then call one of the
             <see cref="M:Microsoft.NodeXL.Core.IVertexSorter.Sort(Microsoft.NodeXL.Core.IVertexCollection)"/> methods.
            
             <para>
             If you want to sort on metadata values, use <see cref="T:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1"/> instead.  <see cref="T:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1"/> is optimized for this task.
             </para>
            
             </remarks>
            
             <example>
             The following code sorts a graph's vertices using a delegate that sorts by
             vertex name.  The code assumes that every vertex's <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> has been set to a non-null value.
            
             <code>
             {
             ...
            
             ByDelegateVertexSorter oByDelegateVertexSorter =
                 new ByDelegateVertexSorter()
            
             oByDelegateVertexSorter.VertexComparer = CompareVerticesByName;
            
             IVertex [] aoSortedVertices = oByDelegateVertexSorter.Sort(oGraph.Vertices);
            
             ...
             }
            
             public Int32
             CompareVerticesByName
             (
                 IVertex vertex1,
                 IVertex vertex2
             )
             {
                 return ( vertex1.Name.CompareTo(vertex2.Name) );
             }
             </code>
            
             </example>
        </member>
        <member name="T:Microsoft.NodeXL.Core.VertexSorterBase">
             <summary>
             Base class for vertex sorters.
             </summary>
            
             <remarks>
             This abstract class can serve as a base class for <see cref="T:Microsoft.NodeXL.Core.IVertexSorter"/> implementations.  Its implementations of the <see cref="T:Microsoft.NodeXL.Core.IVertexSorter"/> public methods provide error checking but defer the
             actual work to protected abstract methods.
             </remarks>
            
             <seealso cref="T:Microsoft.NodeXL.Core.Edge"/>
        </member>
        <member name="T:Microsoft.NodeXL.Core.NodeXLBase">
             <summary>
             Base class for most classes in the <see cref="N:Microsoft.NodeXL.Core"/>
             namespace.
             </summary>
            
             <remarks>
             The derived class may want to override the virtual <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.AppendPropertiesToString(System.Text.StringBuilder,System.Int32,System.String)"/> method.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.NodeXLBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.NodeXLBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.NodeXLBase.ToString">
             <overloads>
             Formats the value of the current instance.
             </overloads>
            
             <summary>
             Formats the value of the current instance using the default format. 
             </summary>
            
             <returns>
             The formatted string.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.NodeXLBase.ToString(System.String)">
             <summary>
             Formats the value of the current instance using a specified format.
             </summary>
            
             <param name="format">
             The <see cref="T:System.String"/> specifying the format to use, or null or an
             empty string to use the default format.  See <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString(System.String,System.IFormatProvider)"/> for the available
             formats.
             </param>
            
             <returns>
             The formatted string.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.NodeXLBase.ToString(System.String,System.IFormatProvider)">
             <summary>
             Formats the value of the current instance using a specified format and
             format provider.
             </summary>
            
             <param name="format">
             The <see cref="T:System.String"/> specifying the format to use, or null or an
             empty string to use the default format.  The available formats are 
             listed in the remarks.
             </param>
            
             <param name="formatProvider">
             The <see cref="T:System.IFormatProvider"/> to use to format the value, or null
             to use the format information from the current locale setting of the
             operating system.   This is currently ignored.
             </param>
            
             <returns>
             The formatted string.
             </returns>
            
             <remarks>
             <paramref name="formatProvider"/> is currently ignored.
            
             <para>
             <paramref name="format"/> must be one of the following values:
             </para>
            
             <list type="table">
            
             <listheader>
             <term>Format</term>
             <term>Results</term>
             </listheader>
            
             <item>
             <term>G</term>
             <term>
             Default format, includes only an instance summary.
             </term>
             </item>
            
             <item>
             <term>P</term>
             <term>
             Includes all public properties, each on a separate line.  For
             collection properties, only the item count is included.
             </term>
             </item>
            
             <item>
             <term>D</term>
             <term>
             Includes all public properties, each on a separate line.  For
             collection properties, a summary of each item in the collection is
             included, each on a separate line.
             </term>
             </item>
            
             <item>
             <term>null</term>
             <term>
             Same as G.
             </term>
             </item>
            
             <item>
             <term>Empty string ("")</term>
             <term>
             Same as G.
             </term>
             </item>
            
             </list>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.NodeXLBase.AppendPropertiesToString(System.Text.StringBuilder,System.Int32,System.String)">
             <summary>
             Appends the derived class's public property values to a String.
             </summary>
            
             <param name="oStringBuilder">
             Object to append to.
             </param>
            
             <param name="iIndentationLevel">
             Current indentation level.  Level 0 is "no indentation."
             </param>
            
             <param name="sFormat">
             The format to use, either G", "P", or "D".  See <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/> for details.
             </param>
            
             <remarks>
             This method calls <see cref="M:Microsoft.NodeXL.Core.ToStringUtil.AppendPropertyToString(System.Text.StringBuilder,System.Int32,System.String,System.Object,System.Boolean)"/> for each of the
             derived class's public properties.  It is used in the implementation of
             <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.NodeXLBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.NodeXLBase.Int32Format">
            <summary>
            String format used for most Int32s.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.NodeXLBase.SingleFormat">
            <summary>
            String format used for most Singles.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.NodeXLBase.DoubleFormat">
            <summary>
            String format used for most Doubles.
            </summary>
        </member>
        <member name="P:Microsoft.NodeXL.Core.NodeXLBase.ClassName">
             <summary>
             Gets the full name of the derived class.
             </summary>
            
             <value>
             The full name of the derived class, suitable for use in error messages.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Core.NodeXLBase.ArgumentChecker">
             <summary>
             Gets a new initialized <see cref="P:Microsoft.NodeXL.Core.NodeXLBase.ArgumentChecker"/> object.
             </summary>
            
             <value>
             A new initialized <see cref="P:Microsoft.NodeXL.Core.NodeXLBase.ArgumentChecker"/> object.
             </value>
            
             <remarks>
             The returned object can be used to check the validity of property
             values and method parameters.
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Core.IVertexSorter">
             <summary>
             Represents an object that can sort a collection of vertices.
             </summary>
            
             <remarks>
             The <see cref="M:Microsoft.NodeXL.Core.IVertexSorter.Sort(Microsoft.NodeXL.Core.IVertexCollection)"/> methods sort the specified
             vertex collection in a manner determined by the implementation.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexSorter.Sort(Microsoft.NodeXL.Core.IVertexCollection)">
             <overloads>
             Sorts a collection of vertices.
             </overloads>
            
             <summary>
             Sorts an <see cref="T:Microsoft.NodeXL.Core.IVertexCollection"/>.
             </summary>
            
             <param name="vertexCollection">
             Collection to sort.  The collection is not modified.
             </param>
            
             <returns>
             A sorted <see cref="T:Microsoft.NodeXL.Core.IVertex"/> array.
             </returns>
            
             <remarks>
             This method creates an array of references to the vertices in <paramref name="vertexCollection"/>, sorts the array, and returns the array.
             <paramref name="vertexCollection"/> is not modified and no vertices
             are cloned or created.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexSorter.Sort(Microsoft.NodeXL.Core.IVertex[])">
             <summary>
             Sorts an array of vertices.
             </summary>
            
             <param name="vertices">
             Array to sort.  The array is not modified.
             </param>
            
             <returns>
             A sorted copy of <paramref name="vertices" />.
             </returns>
            
             <remarks>
             This method creates a copy of <paramref name="vertices" />, sorts the
             copy, and returns the copy.  <paramref name="vertices" /> is not
             modified and no vertices are cloned or created.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexSorter.Sort(System.Collections.ICollection)">
             <summary>
             Sorts an ICollection of vertices.
             </summary>
            
             <param name="vertices">
             ICollection of vertices to sort.  The array is not modified.
             </param>
            
             <returns>
             A sorted copy of <paramref name="vertices" />, as an ICollection.
             </returns>
            
             <remarks>
             This method creates a copy of <paramref name="vertices" />, sorts the
             copy, and returns the copy.  <paramref name="vertices" /> is not
             modified and no vertices are cloned or created.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexSorterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.VertexSorterBase"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexSorterBase.Sort(Microsoft.NodeXL.Core.IVertexCollection)">
             <overloads>
             Sorts a collection of vertices.
             </overloads>
            
             <summary>
             Sorts an <see cref="T:Microsoft.NodeXL.Core.IVertexCollection"/>.
             </summary>
            
             <param name="vertexCollection">
             Collection to sort.  The collection is not modified.
             </param>
            
             <returns>
             A sorted <see cref="T:Microsoft.NodeXL.Core.IVertex"/> array.
             </returns>
            
             <remarks>
             This method creates an array of references to the vertices in <paramref name="vertexCollection"/>, sorts the array, and returns the array.
             <paramref name="vertexCollection"/> is not modified and no vertices
             are cloned or created.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexSorterBase.Sort(Microsoft.NodeXL.Core.IVertex[])">
             <summary>
             Sorts an array of vertices.
             </summary>
            
             <param name="vertices">
             Array to sort.  The array is not modified.
             </param>
            
             <returns>
             A sorted copy of <paramref name="vertices" />.
             </returns>
            
             <remarks>
             This method creates a copy of <paramref name="vertices" />, sorts the
             copy, and returns the copy.  <paramref name="vertices" /> is not
             modified and no vertices are cloned or created.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexSorterBase.Sort(System.Collections.ICollection)">
             <summary>
             Sorts an ICollection of vertices.
             </summary>
            
             <param name="vertices">
             ICollection of vertices to sort.  The array is not modified.
             </param>
            
             <returns>
             A sorted copy of <paramref name="vertices" />, as an ICollection.
             </returns>
            
             <remarks>
             This method creates a copy of <paramref name="vertices" />, sorts the
             copy, and returns the copy.  <paramref name="vertices" /> is not
             modified and no vertices are cloned or created.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexSorterBase.SortCore(Microsoft.NodeXL.Core.IVertex[])">
             <summary>
             Sorts an array of vertices in place.
             </summary>
            
             <param name="vertices">
             Array to sort.  The array is sorted in place.
             </param>
            
             <returns>
             Sorted <paramref name="vertices" />.
             </returns>
            
             <remarks>
             This method sorts <paramref name="vertices" /> in place and returns the
             sorted vertices.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexSorterBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.ByDelegateVertexSorter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.ByDelegateVertexSorter"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.ByDelegateVertexSorter.SortCore(Microsoft.NodeXL.Core.IVertex[])">
             <summary>
             Sorts an array of vertices in place.
             </summary>
            
             <param name="vertices">
             Array to sort.  The array is sorted in place.
             </param>
            
             <returns>
             Sorted <paramref name="vertices" />.
             </returns>
            
             <remarks>
             This method sorts <paramref name="vertices" /> in place and returns the
             sorted vertices.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.ByDelegateVertexSorter.CompareVerticesByID(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Compares two vertices by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>.
             </summary>
            
             <param name="vertex1">
             First vertex to compare.
             </param>
            
             <param name="vertex2">
             Second vertex to compare.
             </param>
            
             <returns>
             See <see cref="M:System.Collections.IComparer.Compare(System.Object,System.Object)"/>.
             </returns>
            
             <remarks>
             This method is used as the default delegate for the <see cref="P:Microsoft.NodeXL.Core.ByDelegateVertexSorter.VertexComparer"/> property.  If you use the default delegate and
             call <see cref="M:Microsoft.NodeXL.Core.IVertexSorter.Sort(Microsoft.NodeXL.Core.IVertexCollection)"/>, the returned
             array will be sorted in order of ascending vertex IDs.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.ByDelegateVertexSorter.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ByDelegateVertexSorter.m_oVertexComparer">
            Delegate used to compare two vertices.
        </member>
        <member name="P:Microsoft.NodeXL.Core.ByDelegateVertexSorter.VertexComparer">
             <summary>
             Gets or sets the delegate used to compare two vertices.
             </summary>
            
             <value>
             A delegate that compares two vertices.  The default value is <see cref="M:Microsoft.NodeXL.Core.ByDelegateVertexSorter.CompareVerticesByID(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)"/>, a delegate that sorts vertices by ID.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Core.EdgeFactoryBase">
             <summary>
             Base class for edge factories.
             </summary>
            
             <remarks>
             This abstract class can serve as a base class for <see cref="T:Microsoft.NodeXL.Core.IEdgeFactory"/> implementations.  Its implementations of the <see cref="T:Microsoft.NodeXL.Core.IEdgeFactory"/> public methods provide error checking but defer the
             actual work to protected abstract methods.
             </remarks>
            
             <seealso cref="T:Microsoft.NodeXL.Core.Edge"/>
        </member>
        <member name="T:Microsoft.NodeXL.Core.GraphVertexEdgeFactoryBase">
            <summary>
            Base class for the <see cref="T:Microsoft.NodeXL.Core.GraphFactory"/>, <see cref="T:Microsoft.NodeXL.Core.VertexFactory"/>, and <see cref="T:Microsoft.NodeXL.Core.EdgeFactory"/> classes.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphVertexEdgeFactoryBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.GraphVertexEdgeFactoryBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphVertexEdgeFactoryBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Core.IEdgeFactory">
             <summary>
             Represents an object that knows how to create an edge.
             </summary>
            
             <remarks>
             If you implement a custom edge class from scratch, you may also want to
             implement <see cref="T:Microsoft.NodeXL.Core.IEdgeFactory"/>.  Several methods in the NodeXL
             system create an edge and allow the type of the new edge to be specified
             via an object that implements <see cref="T:Microsoft.NodeXL.Core.IEdgeFactory"/>.
             </remarks>
            
             <seealso cref="T:Microsoft.NodeXL.Core.IEdge"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Creates an edge object with a specified directedness.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <param name="isDirected">
             If true, <paramref name="vertex1"/> is the edge's back vertex and
             <paramref name="vertex2"/> is the edge's front vertex.  If false, the
             edge is undirected.
             </param>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IEdge"/> interface on a newly created edge object.
             </returns>
            
             <seealso cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateUndirectedEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateDirectedEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateUndirectedEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Creates an undirected edge object.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IEdge"/> interface on a newly created edge object.
             </returns>
            
             <seealso cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateDirectedEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateDirectedEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Creates a directed edge object.
             </summary>
            
             <param name="backVertex">
             The edge's back vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <param name="frontVertex">
             The edge's front vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IEdge"/> interface on a newly created edge object.
             </returns>
            
             <seealso cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateUndirectedEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeFactoryBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.EdgeFactoryBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeFactoryBase.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Creates an edge object with a specified directedness.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <param name="isDirected">
             If true, <paramref name="vertex1"/> is the edge's back vertex and
             <paramref name="vertex2"/> is the edge's front vertex.  If false, the
             edge is undirected.
             </param>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IEdge"/> interface on a newly created edge object.
             </returns>
            
             <seealso cref="M:Microsoft.NodeXL.Core.EdgeFactoryBase.CreateUndirectedEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.EdgeFactoryBase.CreateDirectedEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeFactoryBase.CreateUndirectedEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Creates an undirected edge object.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IEdge"/> interface on a newly created edge object.
             </returns>
            
             <seealso cref="M:Microsoft.NodeXL.Core.EdgeFactoryBase.CreateDirectedEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.EdgeFactoryBase.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeFactoryBase.CreateDirectedEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Creates a directed edge object.
             </summary>
            
             <param name="backVertex">
             The edge's back vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <param name="frontVertex">
             The edge's front vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IEdge"/> interface on a newly created edge object.
             </returns>
            
             <seealso cref="M:Microsoft.NodeXL.Core.EdgeFactoryBase.CreateUndirectedEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.EdgeFactoryBase.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeFactoryBase.CreateEdgeCore(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Creates an edge object with a specified directedness.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <param name="isDirected">
             If true, <paramref name="vertex1"/> is the edge's back vertex and
             <paramref name="vertex2"/> is the edge's front vertex.  If false, the
             edge is undirected.
             </param>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IEdge"/> interface on a newly created edge object.
             </returns>
            
             <remarks>
             The arguments have already been checked for validity.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeFactoryBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Core.GraphFactory">
             <summary>
             Class that knows how to create <see cref="T:Microsoft.NodeXL.Core.Graph"/> objects.
             </summary>
            
             <remarks>
             This class implements <see cref="T:Microsoft.NodeXL.Core.IGraphFactory"/>, which allows the core
             NodeXL system to create graph objects without knowing their type.
             </remarks>
            
             <seealso cref="T:Microsoft.NodeXL.Core.Graph"/>
        </member>
        <member name="T:Microsoft.NodeXL.Core.GraphFactoryBase">
             <summary>
             Base class for graph factories.
             </summary>
            
             <remarks>
             This abstract class can serve as a base class for <see cref="T:Microsoft.NodeXL.Core.IGraphFactory"/> implementations.  Its implementations of the <see cref="T:Microsoft.NodeXL.Core.IGraphFactory"/> public methods provide error checking but defer
             the actual work to protected abstract methods.
             </remarks>
            
             <seealso cref="T:Microsoft.NodeXL.Core.Graph"/>
        </member>
        <member name="T:Microsoft.NodeXL.Core.IGraphFactory">
             <summary>
             Represents an object that knows how to create a graph.
             </summary>
            
             <remarks>
             If you implement a custom graph class from scratch, you may also want to
             implement <see cref="T:Microsoft.NodeXL.Core.IGraphFactory"/>.  Several methods in the NodeXL
             system create a graph and allow the type of the new graph to be specified
             via an object that implements <see cref="T:Microsoft.NodeXL.Core.IGraphFactory"/>.
             </remarks>
            
             <seealso cref="T:Microsoft.NodeXL.Core.IGraph"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IGraphFactory.CreateGraph(Microsoft.NodeXL.Core.GraphDirectedness,Microsoft.NodeXL.Core.GraphRestrictions)">
             <summary>
             Creates a graph object with a specified directedness and restrictions.
             </summary>
            
             <param name="directedness">
             Specifies the type of edges that can be added to the graph.
             </param>
            
             <param name="restrictions">
             Specifies restrictions imposed by the graph.
             </param>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IGraph"/> interface on a newly created graph object.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphFactoryBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.GraphFactoryBase"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphFactoryBase.CreateGraph(Microsoft.NodeXL.Core.GraphDirectedness,Microsoft.NodeXL.Core.GraphRestrictions)">
             <summary>
             Creates a graph object with a specified directedness and restrictions.
             </summary>
            
             <param name="directedness">
             Specifies the type of edges that can be added to the graph.
             </param>
            
             <param name="restrictions">
             Specifies restrictions imposed by the graph.
             </param>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IGraph"/> interface on a newly created graph object.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphFactoryBase.CreateGraphCore(Microsoft.NodeXL.Core.GraphDirectedness,Microsoft.NodeXL.Core.GraphRestrictions)">
             <summary>
             Creates a graph object with a specified directedness and restrictions.
             </summary>
            
             <param name="directedness">
             Specifies the type of edges that can be added to the graph.
             </param>
            
             <param name="restrictions">
             Specifies restrictions imposed by the graph.
             </param>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IGraph"/> interface on a newly created graph object.
             </returns>
            
             <remarks>
             The arguments have already been checked for validity.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphFactoryBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.GraphFactory"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphFactory.CreateGraphCore(Microsoft.NodeXL.Core.GraphDirectedness,Microsoft.NodeXL.Core.GraphRestrictions)">
             <summary>
             Creates a graph object with a specified directedness and restrictions.
             </summary>
            
             <param name="directedness">
             Specifies the type of edges that can be added to the graph.
             </param>
            
             <param name="restrictions">
             Specifies restrictions imposed by the graph.
             </param>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IGraph"/> interface on a newly created graph object.
             </returns>
            
             <remarks>
             The arguments have already been checked for validity.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphFactory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Core.EdgeEventArgs">
            <summary>
            Provides event information for events involving an edge.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeEventArgs.#ctor(Microsoft.NodeXL.Core.IEdge)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.EdgeEventArgs"/> class.
             </summary>
            
             <param name="edge">
             Edge associated with the event.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeEventArgs.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.EdgeEventArgs.m_oEdge">
            Edge associated with the event.
        </member>
        <member name="P:Microsoft.NodeXL.Core.EdgeEventArgs.Edge">
             <summary>
             Gets the edge associated with the event.
             </summary>
            
             <value>
             The edge associated with the event, as an <see cref="T:Microsoft.NodeXL.Core.IEdge"/>.  This
             is never null.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Core.EdgeEventArgs.ArgumentChecker">
             <summary>
             Gets a new initialized ArgumentChecker object.
             </summary>
            
             <value>
             A new initialized ArgumentChecker object.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Core.EdgeEventHandler">
             <summary>
             Represents a method that will handle an event involving an edge.
             </summary>
            
             <param name="sender">
             The source of the event.
             </param>
            
             <param name="edgeEventArgs">
             An <see cref="T:Microsoft.NodeXL.Core.EdgeEventArgs"/> object that contains the event data.
             </param>
        </member>
        <member name="T:Microsoft.NodeXL.Core.ToStringUtil">
             <summary>
             Utility methods for implementing <see cref="M:System.Object.ToString"/> overrides.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.ToStringUtil.AppendPropertyToString(System.Text.StringBuilder,System.Int32,System.String,System.Object)">
             <overloads>
             Appends a property value to a String.
             </overloads>
            
             <summary>
             Appends a property value to a String with a newline.
             </summary>
            
             <param name="oStringBuilder">
             Object to append to.
             </param>
            
             <param name="iIndentationLevel">
             Indentation level.  Level 0 is "no indentation."
             </param>
            
             <param name="sPropertyName">
             Name of the property.  Can't be null or empty.
             </param>
            
             <param name="oPropertyValue">
             Value of the property.  Can be null or empty.
             </param>
            
             <remarks>
             This method appends a property name, property value, and a newline to a
             String.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.ToStringUtil.AppendPropertyToString(System.Text.StringBuilder,System.Int32,System.String,System.Object,System.Boolean)">
             <summary>
             Appends a property value to a String with an optional newline.
             </summary>
            
             <param name="oStringBuilder">
             Object to append to.
             </param>
            
             <param name="iIndentationLevel">
             Indentation level.  Level 0 is "no indentation."
             </param>
            
             <param name="sPropertyName">
             Name of the property.  Can't be null or empty.
             </param>
            
             <param name="oPropertyValue">
             Value of the property.  Can be null or empty.
             </param>
            
             <param name="bAppendLine">
             true to append a newline after the property name and value.
             </param>
            
             <remarks>
             This method appends a property name, property value, and an optional
             newline to a String.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.ToStringUtil.AppendVerticesToString(System.Text.StringBuilder,System.Int32,System.String,System.Collections.ICollection)">
             <summary>
             Appends a collection of <see cref="T:Microsoft.NodeXL.Core.IVertex"/> objects to a String.
             </summary>
            
             <param name="oStringBuilder">
             Object to append to.
             </param>
            
             <param name="iIndentationLevel">
             Current indentation level.  Level 0 is "no indentation."
             </param>
            
             <param name="sFormat">
             The format to use, either G", "P", or "D".  See <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/> for details.
             </param>
            
             <param name="oVertices">
             Collection of <see cref="T:Microsoft.NodeXL.Core.IVertex"/> objects.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.ToStringUtil.AppendEdgesToString(System.Text.StringBuilder,System.Int32,System.String,System.Collections.ICollection)">
             <summary>
             Appends a collection of <see cref="T:Microsoft.NodeXL.Core.IEdge"/> objects to a String.
             </summary>
            
             <param name="oStringBuilder">
             Object to append to.
             </param>
            
             <param name="iIndentationLevel">
             Current indentation level.  Level 0 is "no indentation."
             </param>
            
             <param name="sFormat">
             The format to use, either G", "P", or "D".  See <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/> for details.
             </param>
            
             <param name="oEdges">
             Collection of <see cref="T:Microsoft.NodeXL.Core.IEdge"/> objects.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.ToStringUtil.AppendIndentationToString(System.Text.StringBuilder,System.Int32)">
             <summary>
             Appends a specified number of indentation levels to a String.
             </summary>
            
             <param name="oStringBuilder">
             Object to append to.
             </param>
            
             <param name="iIndentationLevel">
             Indentation level.  Level 0 is "no indentation."
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.ToStringUtil.AppendObjectToString(System.Text.StringBuilder,System.Object)">
             <summary>
             Appends an Object to a String.
             </summary>
            
             <param name="oStringBuilder">
             Object to append to.
             </param>
            
             <param name="oObject">
             Object to append.  Can be null.
             </param>
            
             <remarks>
             This method appends the String form of <paramref name="oObject" /> to a
             String.  If <paramref name="oObject" /> is null, "[null]" is appended.
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ToStringUtil.NullString">
            <summary>
            String that represents a null object.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Core.IIdentityProvider">
             <summary>
             Provides object identity.
             </summary>
            
             <remarks>
             Classes that provide information for identifying an instance should
             implement this interface.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IIdentityProvider.Name">
             <summary>
             Gets the object's name.
             </summary>
            
             <value>
             The object's name, as a String.  Can be null.  The default value is
             null.
             </value>
            
             <remarks>
             The name is optional and is set by the application.
            
             <para>
             Names are case sensitive.  The names "Mary" and "mary" are different,
             for example.
             </para>
            
             <para>
             The core NodeXL system does not enforce uniqueness of names.  It is
             possible to have two items with the same name in the same collection.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IIdentityProvider.ID">
             <summary>
             Gets the object's ID.
             </summary>
            
             <value>
             The object's ID, as an Int32.
             </value>
            
             <remarks>
             The ID is set when the object is created.  It must be unique among all
             objects of the same category for the duration of the process in which
             NodeXL is running.  ("Category" means graph, vertex, or edge.)  No two
             vertices can have the same ID, for example, although a vertex and edge
             can have the same ID.
            
             <para>
             If an object is cloned, the copy must have an ID different from that of
             the original.
             </para>
            
             <para>
             If the object is saved to persistent storage and then loaded from that
             storage, the loaded object must have an ID different from that of the
             original.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>
        </member>
        <member name="T:Microsoft.NodeXL.Core.IEdgeCollection">
             <summary>
             Represents a collection of edges.
             </summary>
            
             <remarks>
             This is a collection of objects that implement the <see cref="T:Microsoft.NodeXL.Core.IEdge"/>
             interface.  You can add edges to the collection, remove them, access an
             edge, and enumerate all edges.
            
             <para>
             The NodeXL system includes an <see cref="T:Microsoft.NodeXL.Core.EdgeCollection"/> implementation
             that can be used as-is in many graphing applications.  You can also derive
             a class from <see cref="T:Microsoft.NodeXL.Core.EdgeCollection"/> or implement your own custom
             edge collection class from scratch.  The only requirement is that your
             custom class must implement IEdgeCollection.
             </para>
            
             </remarks>
            
             <seealso cref="T:Microsoft.NodeXL.Core.EdgeCollection"/>
             <seealso cref="T:Microsoft.NodeXL.Core.IEdge"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeCollection.Add(Microsoft.NodeXL.Core.IEdge)">
             <overloads>
             Adds an edge to the collection.
             </overloads>
            
             <summary>
             Adds an existing edge to the collection.
             </summary>
            
             <param name="edge">
             The edge to add to the collection.
             </param>
            
             <returns>
             The added edge.
             </returns>
            
             <remarks>
             An exception is thrown if <paramref name="edge"/> is already in this
             collection or in another edge collection.
            
             <para>
             An exception is thrown if the directedness of <paramref name="edge"/>
             is incompatible with the <see cref="P:Microsoft.NodeXL.Core.IGraph.Directedness"/> property on
             the graph that owns this edge collection.
             </para>
             
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeCollection.Add(Microsoft.NodeXL.Core.IEdgeFactory,Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Creates an edge of a specified type and adds it to the collection.
             </summary>
            
             <param name="edgeFactory">
             Object that can create an edge.
             </param>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <param name="isDirected">
             If true, <paramref name="vertex1"/> is the edge's back vertex and
             <paramref name="vertex2"/> is the edge's front vertex.  If false, the
             edge is undirected.
             </param>
            
             <returns>
             The new edge, as an <see cref="T:Microsoft.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             This method creates an edge using <paramref name="edgeFactory"/>,
             connects it to the specified vertices, and adds the edge to the
             collection.
            
             <para>
             An exception is thrown if <paramref name="isDirected"/> is
             incompatible with the <see cref="P:Microsoft.NodeXL.Core.IGraph.Directedness"/> property on
             the graph that owns this edge collection.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeCollection.Add(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Creates an edge of a default type and adds it to the collection.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <param name="isDirected">
             If true, <paramref name="vertex1"/> is the edge's back vertex and
             <paramref name="vertex2"/> is the edge's front vertex.  If false, the
             edge is undirected.
             </param>
            
             <returns>
             The new edge, as an <see cref="T:Microsoft.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             This method creates an edge of an implementation-specific default type,
             connects it to the specified vertices, and adds the edge to the
             collection.
            
             <para>
             An exception is thrown if <paramref name="isDirected"/> is
             incompatible with the <see cref="P:Microsoft.NodeXL.Core.IGraph.Directedness"/> property on
             the graph that owns this edge collection.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeCollection.Add(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Creates an undirected edge of a default type and adds it to the
             collection.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <returns>
             The new undirected edge, as an <see cref="T:Microsoft.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             This method creates an undirected edge of an implementation-specific
             default type, connects it to the specified vertices, and adds the edge
             to the collection.
            
             <para>
             An exception is thrown if the graph that owns this edge collection has
             a <see cref="P:Microsoft.NodeXL.Core.IGraph.Directedness"/> value of <see cref="F:Microsoft.NodeXL.Core.GraphDirectedness.Directed"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeCollection.Clear">
            <summary>
            Removes all edges from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeCollection.Contains(Microsoft.NodeXL.Core.IEdge)">
             <overloads>
             Determines whether the collection contains a specified edge.
             </overloads>
            
             <summary>
             Determines whether the collection contains an edge specified by
             reference.
             </summary>
            
             <param name="edge">
             The edge to search for.
             </param>
            
             <returns>
             true if the collection contains <paramref name="edge" />.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeCollection.Contains(System.Int32)">
             <summary>
             Determines whether the collection contains an edge specified by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>
             </summary>
            
             <param name="id">
             The ID to search for.
             </param>
            
             <returns>
             true if the collection contains an edge with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.
             </returns>
            
             <remarks>
             IDs are unique among all edges, so there can be only one edge with the
             specified ID.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeCollection.Contains(System.String)">
             <summary>
             Determines whether the collection contains an edge specified by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>
             </summary>
            
             <param name="name">
             The name to search for.  Can't be null or empty.
             </param>
            
             <returns>
             true if the collection contains an edge with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.
             </returns>
            
             <remarks>
             Names do not have to be unique, so there could be more than one edge
             with the same name.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeCollection.Find(System.Int32,Microsoft.NodeXL.Core.IEdge@)">
             <overloads>
             Searches for a specified edge.
             </overloads>
            
             <summary>
             Searches for an edge with the specified <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>.
             </summary>
            
             <param name="id">
             The <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> of the edge to search for.
             </param>
            
             <param name="edge">
             Gets set to the specified <see cref="T:Microsoft.NodeXL.Core.IEdge"/> if true is returned,
             or to null if false is returned.
             </param>
            
             <returns>
             true if an edge with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/> is found, false if not.
             </returns>
            
             <remarks>
             This method searches the collection for an edge with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.  If such an
             edge is found, it gets stored at <paramref name="edge"/> and true is
             returned.  Otherwise, <paramref name="edge"/> gets set to null and
             false is returned.
            
             <para>
             IDs are unique among all edges, so there can be only one edge with the
             specified ID.
             </para>
            
             <para>
             Use <see cref="M:Microsoft.NodeXL.Core.IEdgeCollection.Contains(System.Int32)"/> if you want to determine whether
             such an edge exists in the collection but you don't need the actual
             edge.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeCollection.Find(System.String,Microsoft.NodeXL.Core.IEdge@)">
             <summary>
             Searches for the first edge with the specified <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>.
             </summary>
            
             <param name="name">
             The <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> of the edge to search for.
             Can't be null or empty.
             </param>
            
             <param name="edge">
             Gets set to the specified <see cref="T:Microsoft.NodeXL.Core.IEdge"/> if true is returned, or
             to null if false is returned.
             </param>
            
             <returns>
             true if an edge with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>
             <paramref name="name"/> is found, false if not.
             </returns>
            
             <remarks>
             This method searches the collection for the first edge with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.  If such
             an edge is found, it gets stored at <paramref name="edge"/> and true
             is returned.  Otherwise, <paramref name="edge"/> gets set to null and
             false is returned.
            
             <para>
             Names do not have to be unique, so there could be more than one edge
             with the same name.
             </para>
            
             <para>
             Use <see cref="M:Microsoft.NodeXL.Core.IEdgeCollection.Contains(System.String)"/> if you want to determine whether
             such an edge exists in the collection but you don't need the actual
             edge.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeCollection.GetConnectingEdges(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Gets an array of edges that connect two specified vertices.
             </summary>
            
             <param name="vertex1">
             First vertex.  Must belong to the parent graph.
             </param>
            
             <param name="vertex2">
             Second vertex.  Must belong to the parent graph.
             </param>
            
             <returns>
             An array of zero or more edges that connect <paramref name="vertex1"/>
             to <paramref name="vertex2"/>, as an array of <see cref="T:Microsoft.NodeXL.Core.IEdge"/>
             objects.
             </returns>
            
             <remarks>
             This method returns an array of all edges that connect <paramref name="vertex1"/> to <paramref name="vertex2"/>.  The directedness of
             the edges is not considered.
            
             <para>
             If there are no such edges, the returned array is empty.  The returned
             value is never null.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeCollection.Remove(Microsoft.NodeXL.Core.IEdge)">
             <overloads>
             Removes an edge from the collection.
             </overloads>
            
             <summary>
             Removes an edge specified by reference from the collection.
             </summary>
            
             <param name="edge">
             The edge to remove from the collection.
             </param>
            
             <returns>
             true if the edge was removed, false if the edge wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for <paramref name="edge" />.  If
             found, it is removed from the collection and true is returned.  false
             is returned otherwise.
            
             <para>
             The edge is unusable once it is removed from the collection.
             Attempting to access the edge's properties or methods will lead to
             unpredictable results.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeCollection.Remove(System.Int32)">
             <summary>
             Removes an edge specified by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> from
             the collection.
             </summary>
            
             <param name="id">
             The ID of the edge to remove.
             </param>
            
             <returns>
             true if the edge was removed, false if the edge wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for an edge with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.  If found, it
             is removed from the collection and true is returned.  false is returned
             otherwise.
            
             <para>
             The edge is unusable once it is removed from the collection.
             Attempting to access the edge's properties or methods will lead to
             unpredictable results.
             </para>
            
             <para>
             IDs are unique among all edges, so there can be only one vertex with
             the specified ID.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdgeCollection.Remove(System.String)">
             <summary>
             Removes an edge specified by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>
             from the collection.
             </summary>
            
             <param name="name">
             The name of the edge to remove.  Can't be null or empty.
             </param>
            
             <returns>
             true if the edge was removed, false if the edge wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for the first edge with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.  If
             found, it is removed from the collection and true is returned.  false
             is returned otherwise.
            
             <para>
             The edge is unusable once it is removed from the collection.
             Attempting to access the edge's properties or methods will lead to
             unpredictable results.
             </para>
            
             <para>
             Names do not have to be unique, so there could be more than one edge
             with the same name.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.NodeXL.Core.IEdgeCollection.EdgeAdded">
            <summary>
            Occurs when an edge is added to the collection.
            </summary>
        </member>
        <member name="E:Microsoft.NodeXL.Core.IEdgeCollection.EdgeRemoved">
            <summary>
            Occurs when an edge is removed from the collection.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Core.MetadataProvider">
             <summary>
             Provides metadata for an instance of a class that implements <see cref="T:Microsoft.NodeXL.Core.IMetadataProvider"/>.
             </summary>
            
             <remarks>
             This can be used by a client class that must implement the <see cref="T:Microsoft.NodeXL.Core.IMetadataProvider"/> interface.  It stores the Tag and all arbitrary
             key/value pairs for one instance of the client class.
            
             <para>
             <b>Important Note:</b>
             </para>
            
             <para>
             The key/value pairs are stored in a LinkedList.  To reduce memory usage,
             this class derives from LinkedList instead of storing a private reference
             to a LinkedList.  However, none of the public properties or methods of
             LinkedList should be called by the client.  <b>The only properties and
             methods that should be called are those that are defined in this derived
             class.</b>
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.MetadataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.MetadataProvider"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.MetadataProvider.ContainsKey(System.String)">
             <summary>
             Determines whether a metadata value with a specified key exists.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty.
             </param>
            
             <returns>
             true if there is a metadata value with the key <paramref name="key"/>,
             false if not.
             </returns>
            
             <remarks>
             If true is returned, the metadata value can be retrieved via <see cref="M:Microsoft.NodeXL.Core.MetadataProvider.TryGetValue(System.String,System.Object@)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.MetadataProvider.RemoveKey(System.String)">
             <summary>
             Removes a specified metadata key if it exists.
             </summary>
            
             <param name="key">
             The key to remove.  Can't be null or empty.
             </param>
            
             <returns>
             true if the metadata key <paramref name="key" /> was removed, false if
             there is no such key.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.MetadataProvider.SetValue(System.String,System.Object)">
             <summary>
             Sets the metadata value associated with a specified key. 
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty.  If the key already exists,
             its value gets overwritten.
             </param>
            
             <param name="value">
             The value to set.  Can be null.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.MetadataProvider.TryGetValue(System.String,System.Object@)">
             <summary>
             Attempts to get the metadata value associated with a specified key. 
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty.
             </param>
            
             <param name="value">
             Where the metadata value associated with <paramref name="key"/> gets
             stored if true is returned, as an <see cref="T:System.Object"/>.
             </param>
            
             <returns>
             true if the metadata value associated with <paramref name="key"/>
             exists, or false if not.
             </returns>
            
             <remarks>
             Values can be null.  If <paramref name="key"/> exists and its value
             is null, null is stored at <paramref name="value"/> and true is
             returned.  If <paramref name="key"/> does not exist, false is
             returned.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.MetadataProvider.CopyTo(Microsoft.NodeXL.Core.IMetadataProvider,System.Boolean,System.Boolean)">
             <summary>
             Copies the instance's <see cref="P:Microsoft.NodeXL.Core.MetadataProvider.Tag"/> and arbitrary key/value pairs
             to another object that implements <see cref="T:Microsoft.NodeXL.Core.IMetadataProvider"/>.
             </summary>
            
             <param name="otherMetadataProvider">
             The object to copy to.
             </param>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Microsoft.NodeXL.Core.MetadataProvider.SetValue(System.String,System.Object)"/>
             are copied to <paramref name="oOtherObject"/>.  (This is a shallow
             copy.  The objects pointed to by the original values are NOT cloned.)
             If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on <paramref name="oOtherObject"/> is set to the same value as in this object.
             (This is a shallow copy.  The object pointed to by this object's <see cref="P:Microsoft.NodeXL.Core.MetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on <paramref name="oOtherObject"/> is left at its default value of null.
             </param>
            
             <remarks>
             This method can be used to assist in cloning an instance.  It copies
             the instances's <see cref="P:Microsoft.NodeXL.Core.MetadataProvider.Tag"/> and arbitrary key/value pairs that
             were set with <see cref="M:Microsoft.NodeXL.Core.MetadataProvider.SetValue(System.String,System.Object)"/>.  (This is a shallow copy.  The
             objects pointed to by the original values are NOT cloned.)
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.MetadataProvider.AppendToString(System.Text.StringBuilder,System.Int32,System.String)">
             <summary>
             Appends the key/value pairs to a String.
             </summary>
            
             <param name="stringBuilder">
             Object to append to.
             </param>
            
             <param name="indentationLevel">
             Current indentation level.  Level 0 is "no indentation."
             </param>
            
             <param name="format">
             The format to use, either "G", "P", or "D".  See <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/> for details.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.MetadataProvider.ClearMetadata">
            <summary>
            Removes all key/value pairs and sets the <see cref="P:Microsoft.NodeXL.Core.MetadataProvider.Tag"/> to null.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.MetadataProvider.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.MetadataProvider.m_oTag">
            Object Tag, or null.
        </member>
        <member name="P:Microsoft.NodeXL.Core.MetadataProvider.Tag">
             <summary>
             Gets or sets a single metadata object.
             </summary>
            
             <value>
             A single metadata object, as an <see cref="T:System.Object"/>.  Can be null.
             The default value is null.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Core.IMetadataProvider">
             <summary>
             Provides metadata.
             </summary>
            
             <remarks>
             Classes that provide metadata for storing application-defined information
             should implement this interface.
            
             <para>
             Metadata can be stored as a single <see cref="T:System.Object"/> via the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property, or as key/value pairs via the <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> method, or both.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IMetadataProvider.ContainsKey(System.String)">
             <summary>
             Determines whether a metadata value with a specified key exists.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <returns>
             true if there is a metadata value with the key <paramref name="key"/>,
             false if not.
             </returns>
            
             <remarks>
             If true is returned, the metadata value can be retrieved with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/> or one of its variants.
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IMetadataProvider.RemoveKey(System.String)">
             <summary>
             Removes a specified metadata key if it exists.
             </summary>
            
             <param name="key">
             The key to remove.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <returns>
             true if the metadata key <paramref name="key" /> was removed, false if
             there is no such key.
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)">
             <summary>
             Sets the metadata value associated with a specified key. 
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).  If the key already exists, its value gets overwritten.
             </param>
            
             <param name="value">
             The value to set.  Can be null.
             </param>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.ContainsKey(System.String)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IMetadataProvider.GetRequiredValue(System.String,System.Type)">
             <summary>
             Gets the metadata value associated with a specified key and checks
             the value type.  The value must exist.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="valueType">
             Expected type of the requested value.  Sample: typeof(String).
             </param>
            
             <returns>
             The metadata value associated with <paramref name="key"/>, as an <see cref="T:System.Object"/>.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is returned.  If <paramref name="key"/> does not exist,
             an exception is thrown.
             </para>
            
             <para>
             <paramref name="valueType"/> is used for error checking.  If the type
             of the requested value is not <paramref name="valueType"/>, an
             exception is thrown.  Note that the type of the returned value is <see cref="T:System.Object"/>, and that you must cast the returned object to the
             specified type.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.ContainsKey(System.String)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Type,System.Object@)">
             <overloads>
             Attempts to get the metadata value associated with a specified key. 
             </overloads>
            
             <summary>
             Attempts to get the metadata value associated with a specified key and
             checks the value type.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="valueType">
             Expected type of the requested value.  Sample: typeof(String).
             </param>
            
             <param name="value">
             Where the metadata value associated with <paramref name="key"/> gets
             stored if true is returned, as an <see cref="T:System.Object"/>.
             </param>
            
             <returns>
             true if the metadata value associated with <paramref name="key"/>
             exists, or false if not.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is stored at <paramref name="value"/> and true is returned.
             If <paramref name="key"/> does not exist, false is returned.
             </para>
            
             <para>
             <paramref name="valueType"/> is used for error checking.  If the type
             of the requested value is not <paramref name="valueType"/>, an
             exception is thrown.  Note that the type of the value stored at
             <paramref name="value"/> is <see cref="T:System.Object"/>, and that you must
             cast the object to the specified type.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.ContainsKey(System.String)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Object@)">
             <summary>
             Attempts to get the metadata value associated with a specified key.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="value">
             Where the metadata value associated with <paramref name="key"/> gets
             stored if true is returned, as an <see cref="T:System.Object"/>.
             </param>
            
             <returns>
             true if the metadata value associated with <paramref name="key"/>
             exists, or false if not.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is stored at <paramref name="value"/> and true is returned.
             If <paramref name="key"/> does not exist, false is returned.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.ContainsKey(System.String)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IMetadataProvider.GetValue(System.String,System.Type)">
             <overloads>
             Gets the metadata value associated with a specified key. 
             </overloads>
            
             <summary>
             Gets the metadata value associated with a specified key and checks
             the value type.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="valueType">
             Expected type of the requested value.  Sample: typeof(String).
             </param>
            
             <returns>
             The metadata value associated with <paramref name="key"/>, as an <see cref="T:System.Object"/>, or null if the key doesn't exist.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is returned.  If <paramref name="key"/> does not exist,
             null is returned.  If you need to distinguish between these two cases,
             use <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Type,System.Object@)"/> instead.
             </para>
            
             <para>
             <paramref name="valueType"/> is used for error checking.  If the type
             of the requested value is not <paramref name="valueType"/>, an
             exception is thrown.  Note that the type of the returned value is <see cref="T:System.Object"/>, and that you must cast the returned object to the
             specified type.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.ContainsKey(System.String)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IMetadataProvider.GetValue(System.String)">
             <summary>
             Gets the metadata value associated with a specified key. 
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <returns>
             The metadata value associated with <paramref name="key"/>, as an <see cref="T:System.Object"/>, or null if the key doesn't exist.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is returned.  If <paramref name="key"/> does not exist,
             null is returned.  If you need to distinguish between these two cases,
             use <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Object@)"/> instead.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.ContainsKey(System.String)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag">
             <summary>
             Gets or sets a single metadata object.
             </summary>
            
             <value>
             A single metadata object, as an <see cref="T:System.Object"/>.  Can be null.
             The default value is null.
             </value>
            
             <remarks>
             If you want to store multiple metadata objects as key/value pairs, use
             <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> instead.
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>
        </member>
        <member name="T:Microsoft.NodeXL.Core.VertexFactoryBase">
             <summary>
             Base class for vertex factories.
             </summary>
            
             <remarks>
             This abstract class can serve as a base class for <see cref="T:Microsoft.NodeXL.Core.IVertexFactory"/> implementations.  Its implementations of the <see cref="T:Microsoft.NodeXL.Core.IVertexFactory"/> public methods provide error checking but defer
             the actual work to protected abstract methods.
             </remarks>
            
             <seealso cref="T:Microsoft.NodeXL.Core.Vertex"/>
        </member>
        <member name="T:Microsoft.NodeXL.Core.IVertexFactory">
             <summary>
             Represents an object that knows how to create a vertex.
             </summary>
            
             <remarks>
             If you implement a custom vertex class from scratch, you may also want to
             implement <see cref="T:Microsoft.NodeXL.Core.IVertexFactory"/>.  Several methods in the NodeXL
             system create a vertex and allow the type of the new vertex to be specified
             via an object that implements <see cref="T:Microsoft.NodeXL.Core.IVertexFactory"/>.
             </remarks>
            
             <seealso cref="T:Microsoft.NodeXL.Core.IVertex"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexFactory.CreateVertex">
             <summary>
             Creates a vertex object.
             </summary>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IVertex"/> interface on a newly created vertex object.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexFactoryBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.VertexFactoryBase"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexFactoryBase.CreateVertex">
             <summary>
             Creates a <see cref="T:Microsoft.NodeXL.Core.Vertex"/> object.
             </summary>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IVertex"/> interface on a newly created <see cref="T:Microsoft.NodeXL.Core.Vertex"/> object.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexFactoryBase.CreateVertexCore">
             <summary>
             Creates a <see cref="T:Microsoft.NodeXL.Core.Vertex"/> object.
             </summary>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IVertex"/> interface on a newly created <see cref="T:Microsoft.NodeXL.Core.Vertex"/> object.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexFactoryBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Core.GraphDirectedness">
            <summary>
            Specifies the type of edges a graph can contain.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.GraphDirectedness.Directed">
            <summary>
            Only directed edges can be added to the graph.  A directed edge has
            an <see cref="P:Microsoft.NodeXL.Core.IEdge.IsDirected"/> value of true.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.GraphDirectedness.Undirected">
            <summary>
            Only undirected edges can be added to the graph.  An undirected edge
            has an <see cref="P:Microsoft.NodeXL.Core.IEdge.IsDirected"/> value of false.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.GraphDirectedness.Mixed">
            <summary>
            Both directed and undirected edges can be added to the graph.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Core.GraphRestrictions">
             <summary>
             Specifies restrictions imposed by a graph.
             </summary>
            
             <remarks>
             These are bit fields that can be ORed together.
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Core.GraphRestrictions.None">
            <summary>
            The graph does not impose restrictions.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.GraphRestrictions.NoSelfLoops">
            <summary>
            Self-loops cannot be added to the graph.  A self-loop is an edge that
            connects a vertex to itself.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.GraphRestrictions.NoParallelEdges">
             <summary>
             Parallel edges cannot be added to the graph.  Parallel edges are
             defined at <see cref="M:Microsoft.NodeXL.Core.IEdge.IsParallelTo(Microsoft.NodeXL.Core.IEdge)"/>.
            
             <para>
             Specifiying this restriction might slow down the addition of edges to
             a graph, since parallel edges need to be searched for with each edge
             addition.
             </para>
            
             </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.GraphRestrictions.All">
            <summary>
            All of the above restrictions are applied.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Core.IGraph">
             <summary>
             Represents a graph.
             </summary>
            
             <remarks>
             A graph has a collection of <see cref="P:Microsoft.NodeXL.Core.IGraph.Vertices"/> and a collection of
             <see cref="P:Microsoft.NodeXL.Core.IGraph.Edges"/> that connect the <see cref="P:Microsoft.NodeXL.Core.IGraph.Vertices"/>.  The <see cref="P:Microsoft.NodeXL.Core.IGraph.Directedness"/> property specifies the type of edges that can be
             added to the graph.
            
             <para>
             Any class that represents a graph must implement this interface.
             </para>
            
             <para>
             The NodeXL system includes a <see cref="T:Microsoft.NodeXL.Core.Graph"/> implementation that can be
             used as-is in many graphing applications.  You can also derive a class from
             <see cref="T:Microsoft.NodeXL.Core.Graph"/> or implement your own custom graph class from
             scratch.  The only requirement is that your custom class must implement
             <see cref="T:Microsoft.NodeXL.Core.IGraph"/>.
             </para>
            
             <para>
             If you implement a custom graph class, you may also want to implement <see cref="T:Microsoft.NodeXL.Core.IGraphFactory"/> to allow the NodeXL system to create instances of
             your custom graph.
             </para>
            
             </remarks>
            
             <seealso cref="T:Microsoft.NodeXL.Core.Graph"/>
             <seealso cref="T:Microsoft.NodeXL.Core.IGraphFactory"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IGraph.HasRestrictions(Microsoft.NodeXL.Core.GraphRestrictions)">
             <summary>
             Gets a flag that indicates whether the graph imposes specified
             restrictions.
             </summary>
            
             <param name="restrictions">
             An ORed combination of one or more <see cref="T:Microsoft.NodeXL.Core.GraphRestrictions"/>
             flags.
             </param>
            
             <returns>
             true if the graph imposes all of the restrictions specified by
             <paramref name="restrictions"/>.
             </returns>
            
             <remarks>
             The graph's restrictions are specified when the graph is created and
             cannot be changed.
            
             <para>
             Use <see cref="P:Microsoft.NodeXL.Core.IGraph.Restrictions"/> to return all of the graph's
             restrictions.
             </para>
            
             </remarks>
            
             <example>
             The following code determines whether a graph prohibits parallel edges.
            
             <code>
             Boolean bNoParallelEdges =
                 oGraph.HasRestrictions(GraphRestrictions.NoParallelEdges);
             </code>
            
             </example>
            
             <seealso cref="P:Microsoft.NodeXL.Core.IGraph.Restrictions"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IGraph.Clone(System.Boolean,System.Boolean)">
             <overloads>
             Creates a copy of the graph.
             </overloads>
            
             <summary>
             Creates a copy of the graph, making the copy the same type as the
             original.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new graph,
             vertices, and edges.  (This is a shallow copy.  The objects pointed to
             by the original values are NOT cloned.)  If false, the key/value pairs
             are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> properties on the new
             graph, vertices, and edges are set to the same value as in the original
             objects.  (This is a shallow copy.  The objects pointed to by the
             original <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> properties are NOT
             cloned.)  If false, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/>
             properties on the new graph, vertices, and edges are set to null.
             </param>
            
             <returns>
             The copy of the graph, as an <see cref="T:Microsoft.NodeXL.Core.IGraph"/>.
             </returns>
            
             <remarks>
             The new graph, vertices, and edges are of the same types as the
             originals.  Their <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>s are set to
             the same values as the originals', but they are assigned new <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>s.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IGraph.Clone(System.Boolean,System.Boolean,Microsoft.NodeXL.Core.IGraphFactory,Microsoft.NodeXL.Core.IVertexFactory,Microsoft.NodeXL.Core.IEdgeFactory)">
             <summary>
             Creates a copy of the graph, making the copy a specified type.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new graph,
             vertices, and edges.  (This is a shallow copy.  The objects pointed to
             by the original values are NOT cloned.)  If false, the key/value pairs
             are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> properties on the new
             graph, vertices, and edges are set to the same value as in the original
             objects.  (This is a shallow copy.  The objects pointed to by the
             original <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> properties are NOT
             cloned.)  If false, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/>
             properties on the new graph, vertices, and edges are set to null.
             </param>
            
             <param name="newGraphFactory">
             Object that can create a graph.
             </param>
            
             <param name="newVertexFactory">
             Object that can create vertices.
             </param>
            
             <param name="newEdgeFactory">
             Object that can create edges.
             </param>
            
             <returns>
             The copy of the graph, as an <see cref="T:Microsoft.NodeXL.Core.IGraph"/>.
             </returns>
            
             <remarks>
             The new graph, vertices, and edges are created using <paramref name="newGraphFactory"/>, <paramref name="newVertexFactory"/>, and
             <paramref name="newEdgeFactory"/>.  Their <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>s are set to the same values as the
             originals', but they are assigned new <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>s.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IGraph.Vertices">
             <summary>
             Gets the graph's collection of vertices.
             </summary>
            
             <value>
             A collection of vertices, as an <see cref="T:Microsoft.NodeXL.Core.IVertexCollection"/>.  The
             collection contains zero or more objects that implement <see cref="T:Microsoft.NodeXL.Core.IVertex"/>.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IGraph.Edges">
             <summary>
             Gets the graph's collection of edges.
             </summary>
            
             <value>
             A collection of edges, as an <see cref="T:Microsoft.NodeXL.Core.IEdgeCollection"/>.  The
             collection contains zero or more objects that implement <see cref="T:Microsoft.NodeXL.Core.IEdge"/> and that connect vertices in this graph.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IGraph.Directedness">
             <summary>
             Gets a value that indicates the type of edges that can be added to the
             graph.
             </summary>
            
             <value>
             A <see cref="T:Microsoft.NodeXL.Core.GraphDirectedness"/> value.
             </value>
            
             <remarks>
             The directedness of a graph is specified when the graph is created and
             cannot be changed.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IGraph.Restrictions">
             <summary>
             Gets an ORed set of flags that specify restrictions imposed by the
             graph.
             </summary>
            
             <value>
             An ORed combination of <see cref="T:Microsoft.NodeXL.Core.GraphRestrictions"/> flags.
             </value>
            
             <remarks>
             The graph's restrictions are specified when the graph is created and
             cannot be changed.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IGraph.PerformExtraValidations">
             <summary>
             Gets or sets a flag specifying whether extra but possibly slow
             validations are performed.
             </summary>
            
             <value>
             true to perform extra validations, false otherwise.  The default value
             is false.
             </value>
            
             <remarks>
             When this property is set to true, the graph should perform extra
             validations during certain operations.  For example, when a vertex is
             added to the <see cref="P:Microsoft.NodeXL.Core.IGraph.Vertices"/> collection, the graph might check
             whether the vertex already exists in the collection and throw an
             exception if it does.
            
             <para>
             Important note: The extra validations might be very slow, and therefore
             this property should be set to true only during development or after an
             unexpected problem occurs and the problem needs to be diagnosed.
             Depending on the implementation, checking whether a vertex already
             exists in the <see cref="P:Microsoft.NodeXL.Core.IGraph.Vertices"/> collection might be an O(n)
             operation, for example.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.NodeXL.Core.IGraph.EdgeAdded">
            <summary>
            Occurs when an edge is added to the <see cref="P:Microsoft.NodeXL.Core.IGraph.Edges"/> collection.
            </summary>
        </member>
        <member name="E:Microsoft.NodeXL.Core.IGraph.VertexAdded">
            <summary>
            Occurs when a vertex is added to the <see cref="P:Microsoft.NodeXL.Core.IGraph.Vertices"/>
            collection.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Core.GraphVertexEdgeBase">
             <summary>
             Base class for the <see cref="T:Microsoft.NodeXL.Core.Graph"/>, <see cref="T:Microsoft.NodeXL.Core.Vertex"/>, and <see cref="T:Microsoft.NodeXL.Core.Edge"/> classes.
             </summary>
            
             <remarks>
             This base class implements the <see cref="T:Microsoft.NodeXL.Core.IIdentityProvider"/> and <see cref="T:Microsoft.NodeXL.Core.IMetadataProvider"/> interfaces.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.GraphVertexEdgeBase"/>
             class.
             </summary>
            
             <param name="id">
             The object's ID.  Must be unique among all objects of the same type.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)">
             <summary>
             Determines whether a metadata value with a specified key exists.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <returns>
             true if there is a metadata value with the key <paramref name="key"/>,
             false if not.
             </returns>
            
             <remarks>
             If true is returned, the metadata value can be retrieved with <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/> or one of its variants.
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.RemoveKey(System.String)">
             <summary>
             Removes a specified metadata key if it exists.
             </summary>
            
             <param name="key">
             The key to remove.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <returns>
             true if the metadata key <paramref name="key" /> was removed, false if
             there is no such key.
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)">
             <summary>
             Sets the metadata value associated with a specified key. 
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).  If the key already exists, its value gets overwritten.
             </param>
            
             <param name="value">
             The value to set.  Can be null.
             </param>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/>
             <seealso cref="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.Tag"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetRequiredValue(System.String,System.Type)">
             <summary>
             Gets the metadata value associated with a specified key and checks
             the value type.  The value must exist.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="valueType">
             Expected type of the requested value.  Sample: typeof(String).
             </param>
            
             <returns>
             The metadata value associated with <paramref name="key"/>, as an <see cref="T:System.Object"/>.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is returned.  If <paramref name="key"/> does not exist,
             an exception is thrown.
             </para>
            
             <para>
             <paramref name="valueType"/> is used for error checking.  If the type
             of the requested value is not <paramref name="valueType"/>, an
             exception is thrown.  Note that the type of the returned value is <see cref="T:System.Object"/>, and that you must cast the returned object to the
             specified type.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/>
             <seealso cref="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.Tag"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Type,System.Object@)">
             <overloads>
             Attempts to get the metadata value associated with a specified key. 
             </overloads>
            
             <summary>
             Attempts to get the metadata value associated with a specified key and
             checks the value type.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="valueType">
             Expected type of the requested value.  Sample: typeof(String).
             </param>
            
             <param name="value">
             Where the metadata value associated with <paramref name="key"/> gets
             stored if true is returned, as an <see cref="T:System.Object"/>.
             </param>
            
             <returns>
             true if the metadata value associated with <paramref name="key"/>
             exists, or false if not.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is stored at <paramref name="value"/> and true is returned.
             If <paramref name="key"/> does not exist, false is returned.
             </para>
            
             <para>
             <paramref name="valueType"/> is used for error checking.  If the type
             of the requested value is not <paramref name="valueType"/>, an
             exception is thrown.  Note that the type of the value stored at
             <paramref name="value"/> is <see cref="T:System.Object"/>, and that you must
             cast the object to the specified type.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/>
             <seealso cref="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.Tag"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Object@)">
             <summary>
             Attempts to get the metadata value associated with a specified key.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="value">
             Where the metadata value associated with <paramref name="key"/> gets
             stored if true is returned, as an <see cref="T:System.Object"/>.
             </param>
            
             <returns>
             true if the metadata value associated with <paramref name="key"/>
             exists, or false if not.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is stored at <paramref name="value"/> and true is returned.
             If <paramref name="key"/> does not exist, false is returned.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.Tag"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String,System.Type)">
             <overloads>
             Gets the metadata value associated with a specified key. 
             </overloads>
            
             <summary>
             Gets the metadata value associated with a specified key and checks
             the value type.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="valueType">
             Expected type of the requested value.  Sample: typeof(String).
             </param>
            
             <returns>
             The metadata value associated with <paramref name="key"/>, as an <see cref="T:System.Object"/>, or null if the key doesn't exist.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is returned.  If <paramref name="key"/> does not exist,
             null is returned.  If you need to distinguish between these two cases,
             use <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Type,System.Object@)"/> instead.
             </para>
            
             <para>
             <paramref name="valueType"/> is used for error checking.  If the type
             of the requested value is not <paramref name="valueType"/>, an
             exception is thrown.  Note that the type of the returned value is <see cref="T:System.Object"/>, and that you must cast the returned object to the
             specified type.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.Tag"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)">
             <summary>
             Gets the metadata value associated with a specified key. 
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <returns>
             The metadata value associated with <paramref name="key"/>, as an <see cref="T:System.Object"/>, or null if the key doesn't exist.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is returned.  If <paramref name="key"/> does not exist,
             null is returned.  If you need to distinguish between these two cases,
             use <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Object@)"/> instead.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.Tag"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String,System.String,System.Boolean,System.Type,System.Object@)">
             <summary>
             Gets the metadata value associated with a specified key and checks
             the value type.  Distinguishes between a null value and a non-existent
             value.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sKey">
             The value's key.  Can't be null or empty.
             </param>
            
             <param name="bCheckValueType">
             true to check the type of the requested value.
             </param>
            
             <param name="oValueType">
             Expected type of the requested value.  Used only if <paramref name="bCheckValueType"/> is true.
             </param>
            
             <param name="oValue">
             Where the metadata value associated with <paramref name="sKey"/> gets
             stored if true is returned, as an <see cref="T:System.Object"/>.
             </param>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             <returns>
             true if the metadata value associated with <paramref name="sKey"/>
             exists, or false if not.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.CopyTo(System.Object,System.Boolean,System.Boolean)">
             <summary>
             Copies this base class's protected data to another object.
             </summary>
            
             <param name="oOtherObject">
             The object to copy to.  Must implement <see cref="T:Microsoft.NodeXL.Core.IIdentityProvider"/>
             and <see cref="T:Microsoft.NodeXL.Core.IMetadataProvider"/>.
             </param>
            
             <param name="bCopyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to <paramref name="oOtherObject"/>.  (This is a shallow copy.  The objects pointed
             to by the original values are NOT cloned.)  If false, the key/value
             pairs are not copied.
             </param>
            
             <param name="bCopyTag">
             If true, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on <paramref name="oOtherObject"/> is set to the same value as in this object.
             (This is a shallow copy.  The object pointed to by this object's <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on <paramref name="oOtherObject"/> is left at its default value of null.
             </param>
            
             <remarks>
             This method can be used to assist in cloning a derived object.  It
             copies the object's <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> and
             optionally the object's key/value pairs and <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/>.  The object's <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> is not copied.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.CheckClientKey(System.String,System.String)">
             <summary>
             Throws an exception if a key passed to <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>, <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>, or <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/>
             is invalid.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sKey">
             The key passed to <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>, <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>, or <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.AppendPropertiesToString(System.Text.StringBuilder,System.Int32,System.String)">
             <summary>
             Appends the derived class's public property values to a String.
             </summary>
            
             <param name="oStringBuilder">
             Object to append to.
             </param>
            
             <param name="iIndentationLevel">
             Current indentation level.  Level 0 is "no indentation."
             </param>
            
             <param name="sFormat">
             The format to use, either "G", "P", or "D".  See <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/> for details.
             </param>
            
             <remarks>
             This method calls <see cref="M:Microsoft.NodeXL.Core.ToStringUtil.AppendPropertyToString(System.Text.StringBuilder,System.Int32,System.String,System.Object,System.Boolean)"/> for each of the
             derived class's public properties.  It is used in the implementation of
             <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.GraphVertexEdgeBase.m_sName">
            Object name.  Can be null or empty.
        </member>
        <member name="F:Microsoft.NodeXL.Core.GraphVertexEdgeBase.m_iID">
            Object ID.
        </member>
        <member name="F:Microsoft.NodeXL.Core.GraphVertexEdgeBase.m_oMetadataProvider">
            Object that stores the Tag and key/value pairs, or null if no key/value
            pairs or the Tag have been set yet.  This is created "lazily" to reduce
            memory usage when metadata isn't used.
        </member>
        <member name="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.Name">
             <summary>
             Gets the object's name.
             </summary>
            
             <value>
             The object's name, as a String.  Can be null.  The default value is
             null.
             </value>
            
             <remarks>
             The name is optional and is set by the application.
            
             <para>
             Names are case sensitive.  The names "Mary" and "mary" are different,
             for example.
             </para>
            
             <para>
             The core NodeXL system does not enforce uniqueness of names.  It is
             possible to have two items with the same name in the same collection.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.ID"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.ID">
             <summary>
             Gets the object's ID.
             </summary>
            
             <value>
             The object's ID, as an Int32.
             </value>
            
             <remarks>
             The ID is set when the object is created.  It must be unique among all
             objects of the same type for the duration of the process in which NodeXL
             is running.
            
             <para>
             If an object is cloned, the copy must have an ID different from that of
             the original.
             </para>
            
             <para>
             If the object is saved to persistent storage and then loaded from that
             storage, the loaded object must have an ID different from that of the
             original.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.Name"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.GraphVertexEdgeBase.Tag">
             <summary>
             Gets or sets a single metadata object.
             </summary>
            
             <value>
             A single metadata object, as an <see cref="T:System.Object"/>.  Can be null.
             The default value is null.
             </value>
            
             <remarks>
             If you want to store multiple metadata objects as key/value pairs, use
             <see cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/> instead.
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>
        </member>
        <member name="T:Microsoft.NodeXL.Core.EdgeCollection">
             <summary>
             Provides a default edge collection implementation.
             </summary>
            
             <remarks>
             This is a collection of objects that implement the <see cref="T:Microsoft.NodeXL.Core.IEdge"/>
             interface.  You can add edges to the collection, remove them, access an
             edge, and enumerate all edges.
            
             <para>
             This collection class is used by the <see cref="T:Microsoft.NodeXL.Core.Graph"/> class to
             implement its <see cref="P:Microsoft.NodeXL.Core.IGraph.Edges"/> collection.  If you implement
             your own graph class, you can use this class for the collection, customize
             it via inheritance, or implement your own edge collection from scratch.
             All edge collection classes must implement the <see cref="T:Microsoft.NodeXL.Core.IEdgeCollection"/> interface.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.#ctor(Microsoft.NodeXL.Core.IGraph)">
             <summary>
             Initializes a new instance of the EdgeCollection class.
             </summary>
            
             <param name="graph">
             <see cref="T:Microsoft.NodeXL.Core.IGraph"/> to which the new collection belongs.  Can't be
             null.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Add(Microsoft.NodeXL.Core.IEdge)">
             <overloads>
             Adds an edge to the collection.
             </overloads>
            
             <summary>
             Adds an existing edge to the collection.
             </summary>
            
             <param name="edge">
             The edge to add to the collection.
             </param>
            
             <returns>
             The added edge.
             </returns>
            
             <remarks>
             An exception is thrown if <paramref name="edge"/> is already in this
             collection or in another edge collection.
            
             <para>
             An exception is thrown if the directedness of <paramref name="edge"/>
             is incompatible with the <see cref="P:Microsoft.NodeXL.Core.IGraph.Directedness"/> property on
             the graph that owns this edge collection.
             </para>
             
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Add(Microsoft.NodeXL.Core.IEdgeFactory,Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Creates an edge of a specified type and adds it to the collection.
             </summary>
            
             <param name="edgeFactory">
             Object that can create an edge.
             </param>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <param name="isDirected">
             If true, <paramref name="vertex1"/> is the edge's back vertex and
             <paramref name="vertex2"/> is the edge's front vertex.  If false, the
             edge is undirected.
             </param>
            
             <returns>
             The new edge, as an <see cref="T:Microsoft.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             This method creates an edge using <paramref name="edgeFactory"/>,
             connects it to the specified vertices, and adds the edge to the
             collection.
            
             <para>
             An exception is thrown if <paramref name="isDirected"/> is
             incompatible with the <see cref="P:Microsoft.NodeXL.Core.IGraph.Directedness"/> property on
             the graph that owns this edge collection.
             </para>
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Add(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Creates an edge of type <see cref="T:Microsoft.NodeXL.Core.Edge"/> and adds it to the
             collection.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <param name="isDirected">
             If true, <paramref name="vertex1"/> is the edge's back vertex and
             <paramref name="vertex2"/> is the edge's front vertex.  If false, the
             edge is undirected.
             </param>
            
             <returns>
             The new edge, as an <see cref="T:Microsoft.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             This method creates an edge of type <see cref="T:Microsoft.NodeXL.Core.Edge"/>, connects it to
             the specified vertices, and adds the edge to the collection.
            
             <para>
             An exception is thrown if <paramref name="isDirected"/> is
             incompatible with the <see cref="P:Microsoft.NodeXL.Core.IGraph.Directedness"/> property on
             the graph that owns this edge collection.
             </para>
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Add(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Creates an undirected edge of type <see cref="T:Microsoft.NodeXL.Core.Edge"/> and adds it to
             the collection.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <returns>
             The new undirected edge, as an <see cref="T:Microsoft.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             This method creates an undirected edge of type <see cref="T:Microsoft.NodeXL.Core.Edge"/>,
             connects it to the specified vertices, and adds the edge to the
             collection.
            
             <para>
             An exception is thrown if the graph that owns this edge collection has
             a <see cref="P:Microsoft.NodeXL.Core.IGraph.Directedness"/> value of <see cref="F:Microsoft.NodeXL.Core.GraphDirectedness.Directed"/>.
             </para>
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Clear">
             <summary>
             Removes all edges from the collection.
             </summary>
            
             <remarks>
             This method is an O(n) operation, where n is the number of vertices in
             the parent graph.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Contains(Microsoft.NodeXL.Core.IEdge)">
             <overloads>
             Determines whether the collection contains a specified edge.
             </overloads>
            
             <summary>
             Determines whether the collection contains an edge specified by
             reference.
             </summary>
            
             <param name="edge">
             The edge to search for.
             </param>
            
             <returns>
             true if the collection contains <paramref name="edge" />.
             </returns>
            
             <remarks>
             This method is an O(n) operation, where n is the number of edges
             incident to <paramref name="edge" />'s first vertex.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Contains(System.Int32)">
             <summary>
             Determines whether the collection contains an edge specified by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>
             </summary>
            
             <param name="id">
             The ID to search for.
             </param>
            
             <returns>
             true if the collection contains an edge with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.
             </returns>
            
             <remarks>
             IDs are unique among all edges, so there can be only one edge with the
             specified ID.
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.EdgeCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Contains(System.String)">
             <summary>
             Determines whether the collection contains an edge specified by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>
             </summary>
            
             <param name="name">
             The name to search for.  Can't be null or empty.
             </param>
            
             <returns>
             true if the collection contains an edge with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.
             </returns>
            
             <remarks>
             Names do not have to be unique, so there could be more than one edge
             with the same name.
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.EdgeCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.CopyTo(System.Array,System.Int32)">
             <summary>
             Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
             </summary>
            
             <param name="array">
             The one-dimensional <see cref="T:System.Array"/> that is the destination of the
             elements copied from <see cref="T:System.Collections.ICollection"/>.  The <see cref="T:System.Array"/> must have zero-based indexing. 
             </param>
            
             <param name="index">
             The zero-based index in <paramref name="array"/> at which copying
             begins. 
             </param>
            
             <remarks>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.EdgeCollection.Count"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Find(System.Int32,Microsoft.NodeXL.Core.IEdge@)">
             <overloads>
             Searches for a specified edge.
             </overloads>
            
             <summary>
             Searches for an edge with the specified <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>.
             </summary>
            
             <param name="id">
             The <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> of the edge to search for.
             </param>
            
             <param name="edge">
             Gets set to the specified <see cref="T:Microsoft.NodeXL.Core.IEdge"/> if true is returned,
             or to null if false is returned.
             </param>
            
             <returns>
             true if an edge with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/> is found, false if not.
             </returns>
            
             <remarks>
             This method searches the collection for an edge with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.  If such an
             edge is found, it gets stored at <paramref name="edge"/> and true is
             returned.  Otherwise, <paramref name="edge"/> gets set to null and
             false is returned.
            
             <para>
             IDs are unique among all edges, so there can be only one edge with the
             specified ID.
             </para>
            
             <para>
             Use <see cref="M:Microsoft.NodeXL.Core.EdgeCollection.Contains(System.Int32)"/> if you want to determine whether
             such an edge exists in the collection but you don't need the actual
             edge.
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.EdgeCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Find(System.String,Microsoft.NodeXL.Core.IEdge@)">
             <summary>
             Searches for the first edge with the specified <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>.
             </summary>
            
             <param name="name">
             The <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> of the edge to search for.
             Can't be null or empty.
             </param>
            
             <param name="edge">
             Gets set to the specified <see cref="T:Microsoft.NodeXL.Core.IEdge"/> if true is returned, or
             to null if false is returned.
             </param>
            
             <returns>
             true if an edge with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>
             <paramref name="name"/> is found, false if not.
             </returns>
            
             <remarks>
             This method searches the collection for the first edge with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.  If such
             an edge is found, it gets stored at <paramref name="edge"/> and true
             is returned.  Otherwise, <paramref name="edge"/> gets set to null and
             false is returned.
            
             <para>
             Names do not have to be unique, so there could be more than one edge
             with the same name.
             </para>
            
             <para>
             Use <see cref="M:Microsoft.NodeXL.Core.EdgeCollection.Contains(System.String)"/> if you want to determine whether
             such an edge exists in the collection but you don't need the actual
             edge.
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.EdgeCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.GetConnectingEdges(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Gets an array of edges that connect two specified vertices.
             </summary>
            
             <param name="vertex1">
             First vertex.  Must belong to the parent graph.
             </param>
            
             <param name="vertex2">
             Second vertex.  Must belong to the parent graph.
             </param>
            
             <returns>
             An array of zero or more edges that connect <paramref name="vertex1"/>
             to <paramref name="vertex2"/>, as an array of <see cref="T:Microsoft.NodeXL.Core.IEdge"/>
             objects.
             </returns>
            
             <remarks>
             This method returns an array of all edges that connect <paramref name="vertex1"/> to <paramref name="vertex2"/>.  The directedness of
             the edges is not considered.
            
             <para>
             If there are no such edges, the returned array is empty.  The returned
             value is never null.
             </para>
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is returned in
             the array only if <paramref name="vertex1"/> and <paramref name="vertex2"/> are the same vertex.
             </para>
            
             <para>
             This method is an O(n) operation, where n is the number of edges
             incident to <paramref name="vertex1"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.GetEnumerator">
             <summary>
             Returns an enumerator that iterates through the collection. 
             </summary>
            
             <returns>
             An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate
             through the collection. 
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Remove(Microsoft.NodeXL.Core.IEdge)">
             <overloads>
             Removes an edge from the collection.
             </overloads>
            
             <summary>
             Removes an edge specified by reference from the collection.
             </summary>
            
             <param name="edge">
             The edge to remove from the collection.
             </param>
            
             <returns>
             true if the edge was removed, false if the edge wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for <paramref name="edge" />.  If
             found, it is removed from the collection and true is returned.  false
             is returned otherwise.
            
             <para>
             The edge is unusable once it is removed from the collection.
             Attempting to access the edge's properties or methods will lead to
             unpredictable results.
             </para>
            
             <para>
             This method is an O(n) operation, where n is the number of edges
             incident to the edge's vertices.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Remove(System.Int32)">
             <summary>
             Removes an edge specified by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> from
             the collection.
             </summary>
            
             <param name="id">
             The ID of the edge to remove.
             </param>
            
             <returns>
             true if the edge was removed, false if the edge wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for an edge with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.  If found, it
             is removed from the collection and true is returned.  false is returned
             otherwise.
            
             <para>
             The edge is unusable once it is removed from the collection.
             Attempting to access the edge's properties or methods will lead to
             unpredictable results.
             </para>
            
             <para>
             IDs are unique among all edges, so there can be only one vertex with
             the specified ID.
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.EdgeCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Remove(System.String)">
             <summary>
             Removes an edge specified by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>
             from the collection.
             </summary>
            
             <param name="name">
             The name of the edge to remove.  Can't be null or empty.
             </param>
            
             <returns>
             true if the edge was removed, false if the edge wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for the first edge with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.  If
             found, it is removed from the collection and true is returned.  false
             is returned otherwise.
            
             <para>
             The edge is unusable once it is removed from the collection.
             Attempting to access the edge's properties or methods will lead to
             unpredictable results.
             </para>
            
             <para>
             Names do not have to be unique, so there could be more than one edge
             with the same name.
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.EdgeCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.GetIncomingOrOutgoingEdges(Microsoft.NodeXL.Core.Vertex,System.Boolean,System.Boolean)">
             <summary>
             Gets an array of a vertex's incoming or outgoing edges.
             </summary>
            
             <param name="oVertex">
             <see cref="T:Microsoft.NodeXL.Core.Vertex"/> to get edges for.
             </param>
            
             <param name="bIncludeIncoming">
             true to include the vertex's incoming edges.
             </param>
            
             <param name="bIncludeOutgoing">
             true to include the vertex's outgoing edges.
             </param>
            
             <returns>
             An array of the vertex's zero or more incoming or outgoing edges (or
             both), as an array of <see cref="T:Microsoft.NodeXL.Core.IEdge"/> objects.
             </returns>
            
             <remarks>
             An incoming edge is either a directed edge that has the vertex at its
             front, or an undirected edge connected to the vertex.
            
             <para>
             An outgoing edge is either a directed edge that has the vertex at its
             back, or an undirected edge connected to the vertex.
             </para>
            
             <para>
             If there are no such edges, the returned array is empty.  The returned
             value is never null.
             </para>
            
             <para>
             This method is an O(n) operation, where n is the number of edges
             incident to <paramref name="oVertex"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.GetPredecessorOrSuccessorVertices(Microsoft.NodeXL.Core.Vertex,System.Boolean,System.Boolean)">
             <summary>
             Gets an array of a vertex's predecessor or successor vertices, or
             both.
             </summary>
            
             <param name="oVertex">
             <see cref="T:Microsoft.NodeXL.Core.Vertex"/> to get predecessor or successor vertices for.
             </param>
            
             <param name="bIncludePredecessor">
             true to include the vertex's predecessor vertices.
             </param>
            
             <param name="bIncludeSuccessor">
             true to include the vertex's successor vertices.
             </param>
            
             <returns>
             An array of the vertex's zero or more predecessor or successor
             vertices, as an array of <see cref="T:Microsoft.NodeXL.Core.IVertex"/> objects.
             </returns>
            
             <remarks>
             A predecessor vertex is a vertex at the other side of an incoming edge.
             (An incoming edge is either a directed edge that has this vertex at its
             front, or an undirected edge connected to this vertex.)
            
             <para>
             A successor vertex is a vertex at the other side of an outgoing edge.
             (An outgoing edge is either a directed edge that has this vertex at its
             back, or an undirected edge connected to this vertex.)
             </para>
            
             <para>
             If there are no such vertices, the returned array is empty.  The
             returned value is never null.
             </para>
            
             <para>
             This method is an O(n) operation, where n is the number of edges
             incident to <paramref name="oVertex"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.RemoveAllFromGroup(Microsoft.NodeXL.Core.Vertex)">
             <summary>
             Removes all edges from a vertex's group of incident edges.
             </summary>
            
             <param name="oVertex">
             <see cref="T:Microsoft.NodeXL.Core.Vertex"/> to remove all incident edges from.
             </param>
            
             <remarks>
             Each edge incident to the vertex is stored twice, once in the vertex's
             group of incident edges and once in the adjacent vertex's group of
             incident edges.  This method removes all such edges, including the
             duplicated ones.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.GetDegree(Microsoft.NodeXL.Core.Vertex)">
             <summary>
             Gets a vertex's degree.
             </summary>
            
             <param name="oVertex">
             <see cref="T:Microsoft.NodeXL.Core.Vertex"/> to get the degree for.
             </param>
            
             <returns>
             The vertex's degree.
             </returns>
            
             <remarks>
             The degree of a vertex is the number of edges that are incident to it.
             (An incident edge is an edge that is connected to this vertex.)
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one incident edge.
             </para>
            
             <para>
             This method is an O(n) operation, where n is the number of edges
             incident to <paramref name="oVertex"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.AddToGroup(Microsoft.NodeXL.Core.IEdge,Microsoft.NodeXL.Core.Vertex)">
             <summary>
             Adds an edge to a vertex's group of incident edges.
             </summary>
            
             <param name="oEdge">
             The edge to add to the group.
             </param>
            
             <param name="oVertex">
             The vertex to add the edge to.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.RemoveFromGroup(Microsoft.NodeXL.Core.IEdge,Microsoft.NodeXL.Core.Vertex)">
             <summary>
             Removes an edge from a vertex's group of incident edges.
             </summary>
            
             <param name="oEdge">
             The edge to remove from the group.
             </param>
            
             <param name="oVertex">
             The vertex whose group the edge should be removed from.
             </param>
            
             <returns>
             true if the edge was removed, false if the edge wasn't found in the
             vertex's group.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Find(System.Boolean,System.Int32,System.String,Microsoft.NodeXL.Core.IEdge@)">
             <summary>
             Searches for an edge with the specified <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> or <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>.
             </summary>
            
             <param name="bByID">
             true to search by ID, false to search by name.
             </param>
            
             <param name="iID">
             The <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> of the edge to search for if
             <paramref name="bByID"/> is true.
             </param>
            
             <param name="sName">
             The <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> of the edge to search for if
             <paramref name="bByID"/> is false.  Can't be null or empty if
             <paramref name="bByID"/> is false.
             </param>
            
             <param name="oEdge">
             Gets set to the specified <see cref="T:Microsoft.NodeXL.Core.IEdge"/> if true is returned,
             or to null if false is returned.
             </param>
            
             <returns>
             true if the specified edge is found, false if not.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.OnEdgeAdded(Microsoft.NodeXL.Core.IEdge)">
             <summary>
             Gets called when an edge is added to the collection.
             </summary>
            
             <param name="oEdge">
             The added edge.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.OnEdgeRemoved(Microsoft.NodeXL.Core.IEdge,System.Boolean)">
             <summary>
             Gets called when an edge is removed from the collection.
             </summary>
            
             <param name="oEdge">
             The removed edge.
             </param>
            
             <param name="bFireEdgeRemoved">
             true to fire the <see cref="E:Microsoft.NodeXL.Core.EdgeCollection.EdgeRemoved"/> event.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.EdgeToVertices(Microsoft.NodeXL.Core.IEdge,System.String,System.String,Microsoft.NodeXL.Core.Vertex@,Microsoft.NodeXL.Core.Vertex@)">
             <summary>
             Obtains an edge's two <see cref="T:Microsoft.NodeXL.Core.Vertex"/> objects.
             </summary>
            
             <param name="oEdge">
             The edge connecting the two <see cref="T:Microsoft.NodeXL.Core.Vertex"/> objects.
             </param>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the edge argument.
             </param>
            
             <param name="oVertex1">
             Where the edge's first <see cref="T:Microsoft.NodeXL.Core.Vertex"/> gets stored.
             </param>
            
             <param name="oVertex2">
             Where the edge's second <see cref="T:Microsoft.NodeXL.Core.Vertex"/> gets stored.
             </param>
            
             <remarks>
             This method obtains an edge's two <see cref="T:Microsoft.NodeXL.Core.Vertex"/> objects and
             stores them at <paramref name="oVertex1"/> and <paramref name="oVertex2"/>.  An exception is thrown if the edge is null or the
             edge's vertices are null or of the incorrect type.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.AppendPropertiesToString(System.Text.StringBuilder,System.Int32,System.String)">
             <summary>
             Appends the derived class's public property values to a String.
             </summary>
            
             <param name="oStringBuilder">
             Object to append to.
             </param>
            
             <param name="iIndentationLevel">
             Current indentation level.  Level 0 is "no indentation."
             </param>
            
             <param name="sFormat">
             The format to use, either G", "P", or "D".  See <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/> for details.
             </param>
            
             <remarks>
             This method calls <see cref="M:Microsoft.NodeXL.Core.ToStringUtil.AppendPropertyToString(System.Text.StringBuilder,System.Int32,System.String,System.Object,System.Boolean)"/> for each of the
             derived class's public properties.  It is used in the implementation of
             <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.IVertexToVertex(Microsoft.NodeXL.Core.IVertex,System.String)">
             <summary>
             Casts an <see cref="T:Microsoft.NodeXL.Core.IVertex"/> to a <see cref="T:Microsoft.NodeXL.Core.Vertex"/> object.
             </summary>
            
             <param name="oVertex">
             The <see cref="T:Microsoft.NodeXL.Core.IVertex"/> to cast to a <see cref="T:Microsoft.NodeXL.Core.Vertex"/> object.
             </param>
            
             <param name="sMethodOrPropertyName">
             Name of the method or property calling this method.
             </param>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.Vertex"/> object.
             </returns>
            
             <remarks>
             An exception is thrown if <paramref name="oVertex"/> is null or not of
             type <see cref="T:Microsoft.NodeXL.Core.Vertex"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.CheckDirectednessBeforeAddingEdge(System.Boolean,System.String)">
             <summary>
             Checks whether the directedness of an edge is compatible with the graph
             that owns this edge collection.
             </summary>
            
             <param name="bEdgeIsDirected">
             true if the edge is directed, false if undirected.
             </param>
            
             <param name="sArgumentName">
             Name of the argument that determines the directedness of the edge.
             </param>
            
             <remarks>
             This is meant to be called from the <see cref="M:Microsoft.NodeXL.Core.EdgeCollection.Add(Microsoft.NodeXL.Core.IEdge)"/> methods.
             An exception is thrown if <paramref name="bEdgeIsDirected"/> is
             incompatible with the <see cref="P:Microsoft.NodeXL.Core.IGraph.Directedness"/> property on
             the graph that owns this edge collection.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.CheckForSelfLoopBeforeAddingEdge(Microsoft.NodeXL.Core.IEdge)">
             <summary>
             Checks for an illegal self-loop before an edge is added to this
             collection.
             </summary>
            
             <param name="oEdge">
             Edge to check.  Can't be null.  It's assumed that <see cref="M:Microsoft.NodeXL.Core.EdgeCollection.CheckVertex(Microsoft.NodeXL.Core.IVertex,System.String,System.String,System.Boolean)"/> has already been called on the edge's vertices.
             </param>
            
             <remarks>
             This is meant to be called from the <see cref="M:Microsoft.NodeXL.Core.EdgeCollection.Add(Microsoft.NodeXL.Core.IEdge)"/> methods.
             An exception is thrown if <paramref name="oEdge"/> is a self-loop and
             the parent graph prohibits self-loops.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.CheckForParallelEdgeBeforeAddingEdge(Microsoft.NodeXL.Core.IEdge)">
             <summary>
             Checks for an illegal parallel edge before an edge is added to this
             collection.
             </summary>
            
             <param name="oEdge">
             Edge to check.  Can't be null.  It's assumed that <see cref="M:Microsoft.NodeXL.Core.EdgeCollection.CheckVertex(Microsoft.NodeXL.Core.IVertex,System.String,System.String,System.Boolean)"/> has already been called on the edge's vertices.
             </param>
            
             <remarks>
             This is meant to be called from the <see cref="M:Microsoft.NodeXL.Core.EdgeCollection.Add(Microsoft.NodeXL.Core.IEdge)"/> methods.
             An exception is thrown if an edge parallel to <paramref name="oEdge"/>
             exists and the parent graph prohibits parallel edges.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.CheckVertex(Microsoft.NodeXL.Core.IVertex,System.String,System.String,System.Boolean)">
             <summary>
             Checks whether a vertex is contained in the graph that owns this edge
             collection.
             </summary>
            
             <param name="oVertex">
             Vertex to check.
             </param>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to use in error messages.
             </param>
            
             <param name="bPerformExtraValidations">
             true to perform extra validations, false otherwise.  A value of true
             can dramatically slow operations.
             </param>
            
             <remarks>
             An exception is thrown if <paramref name="oVertex" /> is null or is not
             contained in the graph that owns this edge collection.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.EdgeCollection.m_oParentGraph">
            Graph that owns this collection.
        </member>
        <member name="F:Microsoft.NodeXL.Core.EdgeCollection.m_oLinkedList">
            LinkedList of IEdge interfaces.
        </member>
        <member name="F:Microsoft.NodeXL.Core.EdgeCollection.m_iEdges">
            Number of unique edges in m_oLinkedList.
        </member>
        <member name="F:Microsoft.NodeXL.Core.EdgeCollection.m_oEdgeFactory">
            Gets used by several Add() methods.
        </member>
        <member name="P:Microsoft.NodeXL.Core.EdgeCollection.Count">
             <summary>
             Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
             </summary>
            
             <value>
             The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
             </value>
            
             <remarks>
             This method is an O(1) operation.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.EdgeCollection.IsSynchronized">
             <summary>
             Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe). 
             </summary>
            
             <value>
             true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized
             (thread safe); otherwise, false. 
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Core.EdgeCollection.SyncRoot">
             <summary>
             Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>. 
             </summary>
            
             <value>
             An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>. 
             </value>
        </member>
        <member name="E:Microsoft.NodeXL.Core.EdgeCollection.EdgeAdded">
            <summary>
            Occurs when an edge is added to the collection.
            </summary>
        </member>
        <member name="E:Microsoft.NodeXL.Core.EdgeCollection.EdgeRemoved">
            <summary>
            Occurs when an edge is removed from the collection.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Core.EdgeCollection.Enumerator">
             <summary>
             Supports iterating over an <see cref="T:Microsoft.NodeXL.Core.EdgeCollection"/>.
             </summary>
            
             <remarks>
             This class is nested within the <see cref="T:Microsoft.NodeXL.Core.EdgeCollection"/> class, so
             its type is EdgeCollection.Enumerator.  An instance of this class gets
             returned by <see cref="M:Microsoft.NodeXL.Core.EdgeCollection.GetEnumerator"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Enumerator.#ctor(Microsoft.NodeXL.Core.EdgeCollection)">
             <summary>
             Initializes a new instance of the Enumerator class.
             </summary>
            
             <param name="edgeCollection">
             Collection being enumerated.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Enumerator.MoveNext">
             <summary>
             Moves to the next object in the enumeration.
             </summary>
            
             <returns>
             true if the enumerator was successfully advanced to the next element;
             false if the enumerator has passed the end of the collection. 
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Enumerator.Reset">
            <summary>
            Resets the current position so it points to the beginning of the
            enumeration.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Enumerator.GetCurrent">
             <summary>
             Gets the object at the current position.
             </summary>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IEdge"/> object at the enumerator's current position.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeCollection.Enumerator.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.EdgeCollection.Enumerator.m_oEdgeCollection">
            Collection being enumerated.
        </member>
        <member name="F:Microsoft.NodeXL.Core.EdgeCollection.Enumerator.m_oCurrentNode">
            LinkedList node that contains the IEdge to return from the next call
            to Current(), or null if MoveNext() hasn't been called yet or the end
            of the LinkedList has been reached.
        </member>
        <member name="F:Microsoft.NodeXL.Core.EdgeCollection.Enumerator.m_oEnumeratedEdgeIDs">
             Dictionary of edges that have already been enumerated, or null if
             MoveNext() hasn't been called yet.  The keys are edge IDs and the
             values aren't used and are set to 0.
            
             An "enumerated" edge is one that has already been returned by the
             Current property.
        </member>
        <member name="P:Microsoft.NodeXL.Core.EdgeCollection.Enumerator.System#Collections#IEnumerator#Current">
             <summary>
             Gets the object at the current position.
             </summary>
            
             <value>
             The <see cref="T:Microsoft.NodeXL.Core.IEdge"/> object at the enumerator's current position.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Core.EdgeCollection.Enumerator.Current">
             <summary>
             Gets the object at the current position.
             </summary>
            
             <value>
             The <see cref="T:Microsoft.NodeXL.Core.IEdge"/> object at the enumerator's current position.
             </value>
            
        </member>
        <member name="T:Microsoft.NodeXL.Core.EventUtil">
             <summary>
             Utility methods for dealing with events.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EventUtil.FireEvent(System.Object,System.EventHandler)">
             <summary>
             Fires an event with an <see cref="T:System.EventHandler"/> signature if
             appropriate.
             </summary>
            
             <param name="eventHandler">
             Event handler, or null if no clients have subscribed to the event.
             </param>
            
             <param name="sender">
             Sender of the event.
             </param>
            
             <remarks>
             If <paramref name="eventHandler"/> is not null, this method fires the
             event represented by <paramref name="eventHandler"/>.  Otherwise, it
             does nothing.
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Core.Edge">
             <summary>
             Provides a default edge implementation.
             </summary>
            
             <remarks>
             An edge is a connection between two vertices in the same graph.  An edge
             can be directed or undirected.  A directed edge has a front and a back.
            
             <para>
             An edge always connects two vertices.  Although an edge can be created
             before it is added to a graph, it can't be created without specifying the
             vertices it connects.  An edge can be added only to the graph that contains
             the edge's vertices.
             </para>
            
             <para>
             An <see cref="T:Microsoft.NodeXL.Core.Edge"/> can be created via its constructor and then added to
             a graph via Graph.Edges.<see cref="M:Microsoft.NodeXL.Core.EdgeCollection.Add(Microsoft.NodeXL.Core.IEdge)"/>, or
             created and added to a graph at the same time via Graph.Edges.<see cref="M:Microsoft.NodeXL.Core.EdgeCollection.Add(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/>.
             </para>
            
             <para>
             An edge is immutable, meaning that its vertices can't be removed.  An edge
             can be removed from a graph and disposed of, but once the edge is removed,
             the edge is unusable.  Attempting to access the edge's properties or
             methods will lead to unpredictable results.
             </para>
            
             <para>
             This class can be used as-is in many graphing applications.  You can also
             customize it via inheritance, or implement your own edge class from
             scratch.  All edge classes must implement the <see cref="T:Microsoft.NodeXL.Core.IEdge"/>
             interface.  If you implement an edge class, you may also want to implement
             a corresponding <see cref="T:Microsoft.NodeXL.Core.IEdgeFactory"/> class.
             </para>
            
             </remarks>
            
             <example>
             The following code creates two Vertex objects, adds them to an existing
             undirected graph, and connects them with an Edge object.
            
             <code>
             // Create the Vertex objects.
            
             IVertex oVertex1 = new Vertex();
             IVertex oVertex2 = new Vertex();
            
             // Add the Vertex objects to the graph.
            
             IVertexCollection oVertices = oUndirectedGraph.Vertices;
             oVertices.Add(oVertex1);
             oVertices.Add(oVertex2);
            
             // Connect the Vertex objects with an Edge object.
            
             IEdge oEdge = new Edge(oVertex1, oVertex2);
            
             // Add the Edge object to the graph.
            
             oUndirectedGraph.Edges.Add(oEdge);
             </code>
            
             </example>
            
             <seealso cref="T:Microsoft.NodeXL.Core.IEdge"/>
             <seealso cref="T:Microsoft.NodeXL.Core.IEdgeCollection"/>
        </member>
        <member name="T:Microsoft.NodeXL.Core.IEdge">
             <summary>
             Represents an edge.
             </summary>
            
             <remarks>
             An edge is a connection between two vertices in the same graph.  An edge
             can be directed or undirected.  A directed edge has a front and a back.
            
             <para>
             An edge always connects two vertices.  Although an edge can be created
             before it is added to a graph, it can't be created without specifying the
             vertices it connects.  An edge can be added only to the graph that contains
             the edge's vertices.
             </para>
            
             <para>
             An edge can be created via <see cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/> and
             then added to a graph via IGraph.Edges.<see cref="M:Microsoft.NodeXL.Core.IEdgeCollection.Add(Microsoft.NodeXL.Core.IEdge)"/>, or created and added to a graph at
             the same time via IGraph.Edges.<see cref="M:Microsoft.NodeXL.Core.IEdgeCollection.Add(Microsoft.NodeXL.Core.IEdgeFactory,Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/>.
             </para>
            
             <para>
             An edge is immutable, meaning that its vertices can't be removed.  An edge
             can be removed from a graph and disposed of, however.
             </para>
            
             <para>
             The NodeXL system includes an <see cref="T:Microsoft.NodeXL.Core.Edge"/> implementation that can
             be used as-is in many graphing applications.  You can also derive a class
             from <see cref="T:Microsoft.NodeXL.Core.Edge"/> or implement your own custom edge class from
             scratch.  The only requirement is that your custom class must implement
             <see cref="T:Microsoft.NodeXL.Core.IEdge"/>.
             </para>
            
             <para>
             If you implement a custom edge class, you may also want to implement <see cref="T:Microsoft.NodeXL.Core.IEdgeFactory"/> to allow the NodeXL system to create instances of
             your custom edge.
             </para>
            
             </remarks>
            
             <seealso cref="T:Microsoft.NodeXL.Core.Edge"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdge.Clone(System.Boolean,System.Boolean)">
             <overloads>
             Creates a copy of the edge.
             </overloads>
            
             <summary>
             Creates a copy of the edge, making the copy the same type as the
             original.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new edge.  (This
             is a shallow copy.  The objects pointed to by the original values are
             NOT cloned.)  If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new
             edge is set to the same value as in the original edge.  (This is a
             shallow copy.  The object pointed to by the original <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new edge is set to
             null.
             </param>
            
             <returns>
             The copy of the edge, as an <see cref="T:Microsoft.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             The new edge is of the same type as the original.  It is connected to
             the same vertices as the original edge.  Its <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> is set to the same value as the
             original's, but it is assigned a new <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>.
            
             <para>
             The new edge can be added only to the same graph.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdge.Clone(System.Boolean,System.Boolean,Microsoft.NodeXL.Core.IEdgeFactory)">
             <summary>
             Creates a copy of the edge, making the copy a specified type.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new edge.  (This
             is a shallow copy.  The objects pointed to by the original values are
             NOT cloned.)  If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new
             edge is set to the same value as in the original edge.  (This is a
             shallow copy.  The object pointed to by the original <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new edge is set to
             null.
             </param>
            
             <param name="newEdgeFactory">
             Object that can create edges.
             </param>
            
             <returns>
             The copy of the edge, as an <see cref="T:Microsoft.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             The new edge is created using <paramref name="newEdgeFactory"/>.  It
             is connected to the same vertices as the original edge.  Its <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> is set to the same value as the
             original's, but it is assigned a new <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>.
            
             <para>
             The new edge can be added only to the same graph.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdge.Clone(System.Boolean,System.Boolean,Microsoft.NodeXL.Core.IEdgeFactory,Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Creates a copy of the edge, making the copy a specified type and using
             specified vertices.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new edge.  (This
             is a shallow copy.  The objects pointed to by the original values are
             NOT cloned.)  If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new
             edge is set to the same value as in the original edge.  (This is a
             shallow copy.  The object pointed to by the original <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new edge is set to
             null.
             </param>
            
             <param name="newEdgeFactory">
             Object that can create edges.
             </param>
            
             <param name="vertex1">
             The new edge's first vertex.  The vertex must be contained in the graph
             to which the new edge will be added.
             </param>
            
             <param name="vertex2">
             The new edge's second vertex.  The vertex must be contained in the
             graph to which the new edge will be added.
             </param>
            
             <param name="isDirected">
             If true, <paramref name="vertex1"/> is the new edge's back vertex and
             <paramref name="vertex2"/> is the new edge's front vertex.  If false,
             the new edge is undirected.
             </param>
            
             <returns>
             The copy of the edge, as an <see cref="T:Microsoft.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             The new edge is created using <paramref name="newEdgeFactory"/>.  It
             is connected to <paramref name="vertex1"/> and <paramref name="vertex2"/>, which can be in the same graph as the original edge
             or in a different graph.  Its <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> is
             set to the same value as the original's, but it is assigned a new <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>.
            
             <para>
             The new edge can be added only to the graph that owns <paramref name="vertex1"/> and <paramref name="vertex2"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdge.IsParallelTo(Microsoft.NodeXL.Core.IEdge)">
             <summary>
             Gets a value indicating whether the edge is parallel to a specified
             edge.
             </summary>
            
             <param name="otherEdge">
             Edge to test.
             </param>
            
             <returns>
             true if the edge is parallel to <paramref name="otherEdge"/>, false if
             not.
             </returns>
            
             <remarks>
             If the edges do not connect the same vertices, they are not parallel or
             anti-parallel.  If they do connect the same vertices, they are parallel
             or anti-parallel, depending on the directedness of the graph and the
             edges.  This is shown in the following table.
            
             <list type="table">
            
             <listheader>
             <term>Graph Directedness</term>
             <term>Edge 1</term>
             <term>Edge 2</term>
             <term>Edge 1 Parallel to Edge 2?</term>
             <term>Edge 1 Anti-Parallel to Edge 2?</term>
             </listheader>
            
             <item>
             <term>Directed</term>
             <term>(A-&gt;B)</term>
             <term>(A-&gt;B)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             <item>
             <term>Directed</term>
             <term>(A-&gt;B)</term>
             <term>(B-&gt;A)</term>
             <term>No</term>
             <term>Yes</term>
             </item>
            
             <item>
             <term>Undirected</term>
             <term>(A,B)</term>
             <term>(A,B)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(A,B)</term>
             <term>(A,B)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(A,B)</term>
             <term>(A-&gt;B)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(A,B)</term>
             <term>(B-&gt;A)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(A-&gt;B)</term>
             <term>(A,B)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(A-&gt;B)</term>
             <term>(A-&gt;B)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(A-&gt;B)</term>
             <term>(B-&gt;A)</term>
             <term>No</term>
             <term>Yes</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(B-&gt;A)</term>
             <term>(A,B)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(B-&gt;A)</term>
             <term>(A-&gt;B)</term>
             <term>No</term>
             <term>Yes</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(B-&gt;A)</term>
             <term>(B-&gt;A)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             </list>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.IEdge.IsAntiparallelTo(Microsoft.NodeXL.Core.IEdge)"/>
            
             TODO: "A simple graph is one that contains no loops or parallel edges,
             where more than one edge connects two given vertices,"
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdge.IsAntiparallelTo(Microsoft.NodeXL.Core.IEdge)">
             <summary>
             Gets a value indicating whether the edge is antiparallel to a specified
             edge.
             </summary>
            
             <param name="otherEdge">
             Edge to test.
             </param>
            
             <returns>
             true if the edge is antiparallel to <paramref name="otherEdge"/>,
             false if not.
             </returns>
            
             <remarks>
             See <see cref="M:Microsoft.NodeXL.Core.IEdge.IsParallelTo(Microsoft.NodeXL.Core.IEdge)"/> for details on the returned value.
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.IEdge.IsParallelTo(Microsoft.NodeXL.Core.IEdge)"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IEdge.GetAdjacentVertex(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Given one of the edge's vertices, returns the other vertex.
             </summary>
            
             <param name="vertex">
             One of the edge's vertices.
             </param>
            
             <returns>
             The edge's other vertex.
             </returns>
            
             <remarks>
             An ArgumentException is thrown if <paramref name="vertex" /> is not one
             of the edge's vertices.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IEdge.ParentGraph">
             <summary>
             Gets the graph that owns the edge.
             </summary>
            
             <value>
             The graph that owns the edge, as an <see cref="T:Microsoft.NodeXL.Core.IGraph"/>.
             </value>
            
             <remarks>
             This property is never null.  If the edge hasn't yet been added to a
             graph, the parent graph is obtained from the edge's vertices.  Because
             an edge can only be added to the graph that contains the edge's
             vertices, the vertices' parent graph is always the same as the edge's
             parent graph.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IEdge.IsDirected">
             <summary>
             Gets a value indicating whether the edge is directed.
             </summary>
            
             <value>
             true if the edge is directed, false if not.
             </value>
            
             <remarks>
             A directed edge has a front and a back.
            
             <para>
             This property is set when the edge is created by <see cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/>.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IEdge.Vertices">
             <summary>
             Gets the vertices to which the edge is connected.
             </summary>
            
             <value>
             An array of two vertices.
             </value>
            
             <remarks>
             The order of the returned vertices is the same order that was specified
             when the edge was created by <see cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/>.
            
             <para>
             If <see cref="P:Microsoft.NodeXL.Core.IEdge.IsDirected"/> is true, the first vertex in the array is
             the back vertex and the second vertex is the front vertex.  (The back
             and front vertices are also available via the <see cref="P:Microsoft.NodeXL.Core.IEdge.BackVertex"/>
             and <see cref="P:Microsoft.NodeXL.Core.IEdge.FrontVertex"/> properties.)
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.IEdge.IsDirected"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IEdge.FrontVertex"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IEdge.BackVertex"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IEdge.BackVertex">
             <summary>
             Gets the back vertex to which the directed edge is connected.
             </summary>
            
             <value>
             The edge's back vertex, as an <see cref="T:Microsoft.NodeXL.Core.IVertex"/>.
             </value>
            
             <remarks>
             This property can be read only if <see cref="P:Microsoft.NodeXL.Core.IEdge.IsDirected"/> is true.
             If <see cref="P:Microsoft.NodeXL.Core.IEdge.IsDirected"/> is false, an exception is thrown.
            
             <para>
             The back vertex is also available as the first vertex in the array
             returned by <see cref="P:Microsoft.NodeXL.Core.IEdge.Vertices"/>.
             </para>
            
             <para>
             The edge's vertices are set when the edge is created by <see cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/>.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.IEdge.IsDirected"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IEdge.Vertices"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IEdge.FrontVertex"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IEdge.FrontVertex">
             <summary>
             Gets the front vertex to which the directed edge is connected.
             </summary>
            
             <value>
             The edge's front vertex, as an <see cref="T:Microsoft.NodeXL.Core.IVertex"/>.
             </value>
            
             <remarks>
             This property can be read only if <see cref="P:Microsoft.NodeXL.Core.IEdge.IsDirected"/> is true.
             If <see cref="P:Microsoft.NodeXL.Core.IEdge.IsDirected"/> is false, an exception is thrown.
            
             <para>
             The front vertex is also available as the second vertex in the array
             returned by <see cref="P:Microsoft.NodeXL.Core.IEdge.Vertices"/>.
             </para>
            
             <para>
             The edge's vertices are set when the edge is created by <see cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/>.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.IEdge.IsDirected"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IEdge.Vertices"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IEdge.BackVertex"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IEdge.IsSelfLoop">
             <summary>
             Gets a value indicating whether the edge connects a vertex to itself.
             </summary>
            
             <value>
             true if the edge connects a vertex to itself, false if not.
             </value>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Edge.#cctor">
            <overloads>
            Static constructor for the <see cref="T:Microsoft.NodeXL.Core.Edge"/> class.
            </overloads>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Edge.#ctor(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Initializes a new instance of the Edge class.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <param name="isDirected">
             If true, <paramref name="vertex1" /> is the edge's back vertex and
             <paramref name="vertex2" /> is the edge's front vertex.  If false, the
             edge is undirected.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Edge.Clone(System.Boolean,System.Boolean)">
             <overloads>
             Creates a copy of the edge.
             </overloads>
            
             <summary>
             Creates a copy of the edge, making the copy the same type as the
             original.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new edge.  (This
             is a shallow copy.  The objects pointed to by the original values are
             NOT cloned.)  If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new
             edge is set to the same value as in the original edge.  (This is a
             shallow copy.  The object pointed to by the original <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new edge is set to
             null.
             </param>
            
             <returns>
             The copy of the edge, as an <see cref="T:Microsoft.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             The new edge is of the same type as the original.  It is connected to
             the same vertices as the original edge.  Its <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> is set to the same value as the
             original's, but it is assigned a new <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>.
            
             <para>
             The new edge can be added only to the same graph.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Edge.Clone(System.Boolean,System.Boolean,Microsoft.NodeXL.Core.IEdgeFactory)">
             <summary>
             Creates a copy of the edge, making the copy a specified type.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new edge.  (This
             is a shallow copy.  The objects pointed to by the original values are
             NOT cloned.)  If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new
             edge is set to the same value as in the original edge.  (This is a
             shallow copy.  The object pointed to by the original <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new edge is set to
             null.
             </param>
            
             <param name="newEdgeFactory">
             Object that can create edges.
             </param>
            
             <returns>
             The copy of the edge, as an <see cref="T:Microsoft.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             The new edge is created using <paramref name="newEdgeFactory"/>.  It
             is connected to the same vertices as the original edge.  Its <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> is set to the same value as the
             original's, but it is assigned a new <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>.
            
             <para>
             The new edge can be added only to the same graph.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Edge.Clone(System.Boolean,System.Boolean,Microsoft.NodeXL.Core.IEdgeFactory,Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Creates a copy of the edge, making the copy a specified type and using
             specified vertices.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new edge.  (This
             is a shallow copy.  The objects pointed to by the original values are
             NOT cloned.)  If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new
             edge is set to the same value as in the original edge.  (This is a
             shallow copy.  The object pointed to by the original <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new edge is set to
             null.
             </param>
            
             <param name="newEdgeFactory">
             Object that can create edges.
             </param>
            
             <param name="vertex1">
             The new edge's first vertex.  The vertex must be contained in the graph
             to which the new edge will be added.
             </param>
            
             <param name="vertex2">
             The new edge's second vertex.  The vertex must be contained in the
             graph to which the new edge will be added.
             </param>
            
             <param name="isDirected">
             If true, <paramref name="vertex1"/> is the new edge's back vertex and
             <paramref name="vertex2"/> is the new edge's front vertex.  If false,
             the new edge is undirected.
             </param>
            
             <returns>
             The copy of the edge, as an <see cref="T:Microsoft.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             The new edge is created using <paramref name="newEdgeFactory"/>.  It
             is connected to <paramref name="vertex1"/> and <paramref name="vertex2"/>, which can be in the same graph as the original edge
             or in a different graph.  Its <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> is
             set to the same value as the original's, but it is assigned a new <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>.
            
             <para>
             The new edge can be added only to the graph that owns <paramref name="vertex1"/> and <paramref name="vertex2"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Edge.IsParallelTo(Microsoft.NodeXL.Core.IEdge)">
             <summary>
             Gets a value indicating whether the edge is parallel to a specified
             edge.
             </summary>
            
             <param name="otherEdge">
             Edge to test.
             </param>
            
             <returns>
             true if the edge is parallel to <paramref name="otherEdge"/>, false if
             not.
             </returns>
            
             <remarks>
             See IEdge.<see cref="M:Microsoft.NodeXL.Core.IEdge.IsParallelTo(Microsoft.NodeXL.Core.IEdge)"/> for details on the returned
             value.
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.Edge.IsAntiparallelTo(Microsoft.NodeXL.Core.IEdge)"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Edge.IsAntiparallelTo(Microsoft.NodeXL.Core.IEdge)">
             <summary>
             Gets a value indicating whether the edge is antiparallel to a specified
             edge.
             </summary>
            
             <param name="otherEdge">
             Edge to test.
             </param>
            
             <returns>
             true if the edge is antiparallel to <paramref name="otherEdge"/>,
             false if not.
             </returns>
            
             <remarks>
             See IEdge.<see cref="M:Microsoft.NodeXL.Core.IEdge.IsParallelTo(Microsoft.NodeXL.Core.IEdge)"/> for details on the returned
             value.
             </remarks>
             
             <seealso cref="M:Microsoft.NodeXL.Core.Edge.IsParallelTo(Microsoft.NodeXL.Core.IEdge)"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Edge.GetAdjacentVertex(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Given one of the edge's vertices, returns the other vertex.
             </summary>
            
             <param name="vertex">
             One of the edge's vertices.
             </param>
            
             <returns>
             The edge's other vertex.
             </returns>
            
             <remarks>
             An ArgumentException is thrown if <paramref name="vertex" /> is not one
             of the edge's vertices.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Edge.AppendPropertiesToString(System.Text.StringBuilder,System.Int32,System.String)">
             <summary>
             Appends the derived class's public property values to a String.
             </summary>
            
             <param name="oStringBuilder">
             Object to append to.
             </param>
            
             <param name="iIndentationLevel">
             Current indentation level.  Level 0 is "no indentation."
             </param>
            
             <param name="sFormat">
             The format to use, either "G", "P", or "D".  See <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/> for details.
             </param>
            
             <remarks>
             This method calls <see cref="M:Microsoft.NodeXL.Core.ToStringUtil.AppendPropertyToString(System.Text.StringBuilder,System.Int32,System.String,System.Object,System.Boolean)"/> for each of the
             derived class's public properties.  It is used in the implementation of
             <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Edge.CheckVertexArgument(Microsoft.NodeXL.Core.IVertex,System.String)">
             <summary>
             Checks one of the <see cref="T:Microsoft.NodeXL.Core.IVertex"/> arguments passed to the
             constructor.
             </summary>
            
             <param name="oVertex">
             The vertex to check.
             </param>
            
             <param name="sArgumentName">
             Name of the vertex argument.
             </param>
            
             <remarks>
             An exception is thrown if <paramref name="oVertex"/> is invalid.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Edge.CheckIsDirected(System.Boolean)">
             <summary>
             Throws an exception if the edge is not directed.
             </summary>
            
             <param name="bCallerIsBackVertex">
             true if this is being called from <see cref="P:Microsoft.NodeXL.Core.Edge.BackVertex"/>, false if
             this is being called from <see cref="P:Microsoft.NodeXL.Core.Edge.FrontVertex"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Edge.IEdgeToEdge(Microsoft.NodeXL.Core.IEdge,System.String,System.String)">
             <summary>
             Casts an <see cref="T:Microsoft.NodeXL.Core.IEdge"/> to an <see cref="T:Microsoft.NodeXL.Core.Edge"/> object.
             </summary>
            
             <param name="oEdge">
             The <see cref="T:Microsoft.NodeXL.Core.IEdge"/> to cast to an <see cref="T:Microsoft.NodeXL.Core.Edge"/> object.
             </param>
            
             <param name="sClassName">
             Name of the class calling this method.
             </param>
            
             <param name="sMethodOrPropertyName">
             Name of the method or property calling this method.
             </param>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.Edge"/> object.
             </returns>
            
             <remarks>
             An exception is thrown if <paramref name="oEdge"/> is null or not of
             type <see cref="T:Microsoft.NodeXL.Core.Edge"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Edge.EdgeToVertices(Microsoft.NodeXL.Core.IEdge,System.String,System.String,Microsoft.NodeXL.Core.Vertex@,Microsoft.NodeXL.Core.Vertex@)">
             <summary>
             Obtains an edge's two <see cref="T:Microsoft.NodeXL.Core.Vertex"/> objects.
             </summary>
            
             <param name="oEdge">
             The edge to obtain the <see cref="T:Microsoft.NodeXL.Core.Vertex"/> objects from.
             </param>
            
             <param name="sClassName">
             Name of the class calling this method.
             </param>
            
             <param name="sMethodOrPropertyName">
             Name of the method or property calling this method.
             </param>
            
             <param name="oVertex1">
             Where the edge's first <see cref="T:Microsoft.NodeXL.Core.Vertex"/> gets stored.
             </param>
            
             <param name="oVertex2">
             Where the edge's second <see cref="T:Microsoft.NodeXL.Core.Vertex"/> gets stored.
             </param>
            
             <remarks>
             This method convertes <paramref name="oEdge"/> to an <see cref="T:Microsoft.NodeXL.Core.Edge"/> object, obtains the Edge's two <see cref="T:Microsoft.NodeXL.Core.Vertex"/>
             objects, and stores them at <paramref name="oVertex1"/> and <paramref name="oVertex2"/>.  An exception is thrown if <paramref name="oEdge"/> is null or not of type <see cref="T:Microsoft.NodeXL.Core.Edge"/>, or if the
             edge's vertices are null or not of type <see cref="T:Microsoft.NodeXL.Core.Vertex"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Edge.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.Edge.m_oIDGenerator">
            Generates unique IDs.
        </member>
        <member name="F:Microsoft.NodeXL.Core.Edge.m_oVertex1">
            First vertex.  If m_bIsDirected is true, this is the edge's back
            vertex.  Can't be null.
        </member>
        <member name="F:Microsoft.NodeXL.Core.Edge.m_oVertex2">
            Second vertex.  If m_bIsDirected is true, this is the edge's front
            vertex.  Can't be null.
        </member>
        <member name="F:Microsoft.NodeXL.Core.Edge.m_bIsDirected">
            If true, m_oVertex2 is the edge's back vertex and m_oVertex2 is the
            edge's front vertex.  If false, the edge is undirected.
        </member>
        <member name="P:Microsoft.NodeXL.Core.Edge.ParentGraph">
             <summary>
             Gets the graph that owns the edge.
             </summary>
            
             <value>
             The graph that owns the edge, as an <see cref="T:Microsoft.NodeXL.Core.IGraph"/>.
             </value>
            
             <remarks>
             This property is never null.  If the edge hasn't yet been added to a
             graph, the parent graph is obtained from the edge's vertices.  Because
             an edge can only be added to the graph that contains the edge's
             vertices, the vertices' parent graph is always the same as the edge's
             parent graph.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Edge.IsDirected">
             <summary>
             Gets a value indicating whether the edge is directed.
             </summary>
            
             <value>
             true if the edge is directed, false if not.
             </value>
            
             <remarks>
             A directed edge has a front and a back.
            
             <para>
             This property is set when the edge is created by <see cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/>.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Edge.Vertices">
             <summary>
             Gets the vertices to which the edge is connected.
             </summary>
            
             <value>
             An array of two vertices.
             </value>
            
             <remarks>
             The order of the returned vertices is the same order that was specified
             when the edge was created by <see cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/>.
            
             <para>
             If <see cref="P:Microsoft.NodeXL.Core.Edge.IsDirected"/> is true, the first vertex in the array is
             the back vertex and the second vertex is the front vertex.  (The back
             and front vertices are also available via the <see cref="P:Microsoft.NodeXL.Core.Edge.BackVertex"/>
             and <see cref="P:Microsoft.NodeXL.Core.Edge.FrontVertex"/> properties.)
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.Edge.IsDirected"/>
             <seealso cref="P:Microsoft.NodeXL.Core.Edge.FrontVertex"/>
             <seealso cref="P:Microsoft.NodeXL.Core.Edge.BackVertex"/>
             <seealso cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Edge.BackVertex">
             <summary>
             Gets the back vertex to which the directed edge is connected.
             </summary>
            
             <value>
             The edge's back vertex, as an <see cref="T:Microsoft.NodeXL.Core.IVertex"/>.
             </value>
            
             <remarks>
             This property can be read only if <see cref="P:Microsoft.NodeXL.Core.Edge.IsDirected"/> is true.
             If <see cref="P:Microsoft.NodeXL.Core.Edge.IsDirected"/> is false, an exception is thrown.
            
             <para>
             The back vertex is also available as the first vertex in the array
             returned by <see cref="P:Microsoft.NodeXL.Core.Edge.Vertices"/>.
             </para>
            
             <para>
             The edge's vertices are set when the edge is created by <see cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/>.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.Edge.IsDirected"/>
             <seealso cref="P:Microsoft.NodeXL.Core.Edge.Vertices"/>
             <seealso cref="P:Microsoft.NodeXL.Core.Edge.FrontVertex"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Edge.FrontVertex">
             <summary>
             Gets the front vertex to which the directed edge is connected.
             </summary>
            
             <value>
             The edge's front vertex, as an <see cref="T:Microsoft.NodeXL.Core.IVertex"/>.
             </value>
            
             <remarks>
             This property can be read only if <see cref="P:Microsoft.NodeXL.Core.Edge.IsDirected"/> is true.
             If <see cref="P:Microsoft.NodeXL.Core.Edge.IsDirected"/> is false, an exception is thrown.
            
             <para>
             The front vertex is also available as the second vertex in the array
             returned by <see cref="P:Microsoft.NodeXL.Core.Edge.Vertices"/>.
             </para>
            
             <para>
             The edge's vertices are set when the edge is created by <see cref="M:Microsoft.NodeXL.Core.IEdgeFactory.CreateEdge(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)"/>.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.Edge.IsDirected"/>
             <seealso cref="P:Microsoft.NodeXL.Core.Edge.Vertices"/>
             <seealso cref="P:Microsoft.NodeXL.Core.Edge.BackVertex"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Edge.IsSelfLoop">
             <summary>
             Gets a value indicating whether the edge connects a vertex to itself.
             </summary>
            
             <value>
             true if the edge connects a vertex to itself, false if not.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Core.VertexCollection">
             <summary>
             Provides a default vertex collection implementation.
             </summary>
            
             <remarks>
             This is a collection of objects that implement the <see cref="T:Microsoft.NodeXL.Core.IVertex"/>
             interface.  You can add vertices to the collection, remove them, access
             a vertex, and enumerate all vertices.
            
             <para>
             This collection class is used by the <see cref="T:Microsoft.NodeXL.Core.Graph"/> class to
             implement its <see cref="P:Microsoft.NodeXL.Core.IGraph.Vertices"/> collection.  If you implement
             your own graph class, you can use this class for the collection, customize
             it via inheritance, or implement your own vertex collection from scratch.
             All vertex collection classes must implement the <see cref="T:Microsoft.NodeXL.Core.IVertexCollection"/> interface.
             </para>
            
             </remarks>
            
        </member>
        <member name="T:Microsoft.NodeXL.Core.IVertexCollection">
             <summary>
             Represents a collection of vertices.
             </summary>
            
             <remarks>
             This is a collection of objects that implement the <see cref="T:Microsoft.NodeXL.Core.IVertex"/>
             interface.  You can add vertices to the collection, remove them, access
             a vertex, and enumerate all vertices.
            
             <para>
             The NodeXL system includes a <see cref="T:Microsoft.NodeXL.Core.VertexCollection"/> implementation
             that can be used as-is in many graphing applications.  You can also derive
             a class from <see cref="T:Microsoft.NodeXL.Core.VertexCollection"/> or implement your own custom
             vertex collection class from scratch.  The only requirement is that your
             custom class must implement IVertexCollection.
             </para>
            
             </remarks>
            
             <seealso cref="T:Microsoft.NodeXL.Core.VertexCollection"/>
             <seealso cref="T:Microsoft.NodeXL.Core.IVertex"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexCollection.Add(Microsoft.NodeXL.Core.IVertex)">
             <overloads>
             Adds a vertex to the collection.
             </overloads>
            
             <summary>
             Adds an existing vertex to the collection.
             </summary>
            
             <param name="vertex">
             The vertex to add to the collection.
             </param>
            
             <returns>
             The added vertex <paramref name="vertex" />.
             </returns>
            
             <remarks>
             An exception is thrown if <paramref name="vertex" /> has already been
             added to a graph.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexCollection.Add(Microsoft.NodeXL.Core.IVertexFactory)">
             <summary>
             Creates a vertex of a specified type and adds it to the collection.
             </summary>
            
             <param name="vertexFactory">
             Object that can create a vertex.
             </param>
            
             <returns>
             The added vertex.
             </returns>
            
             <remarks>
             <paramref name="vertexFactory" /> is used to create the vertex.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexCollection.Add">
             <summary>
             Creates a vertex of a default type and adds it to the collection.
             </summary>
            
             <returns>
             The added vertex.
             </returns>
            
             <remarks>
             The type of the new vertex is determined by the implementation.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexCollection.Clear">
             <summary>
             Removes all vertices from the collection.
             </summary>
            
             <remarks>
             This method removes all vertices from the collection and all edges from
             the graph that owns the collection.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexCollection.Contains(Microsoft.NodeXL.Core.IVertex)">
             <overloads>
             Determines whether the collection contains a specified vertex.
             </overloads>
            
             <summary>
             Determines whether the collection contains a vertex specified by
             reference.
             </summary>
            
             <param name="vertex">
             The vertex to search for.
             </param>
            
             <returns>
             true if the collection contains <paramref name="vertex" />.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexCollection.Contains(System.Int32)">
             <summary>
             Determines whether the collection contains a vertex specified by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>
             </summary>
            
             <param name="id">
             The ID to search for.
             </param>
            
             <returns>
             true if the collection contains a vertex with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.
             </returns>
            
             <remarks>
             IDs are unique among all vertices, so there can be only one vertex with
             the specified ID.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexCollection.Contains(System.String)">
             <summary>
             Determines whether the collection contains a vertex specified by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>
             </summary>
            
             <param name="name">
             The name to search for.  Can't be null or empty.
             </param>
            
             <returns>
             true if the collection contains a vertex with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.
             </returns>
            
             <remarks>
             Names do not have to be unique, so there could be more than one vertex
             with the same name.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexCollection.Find(System.Int32,Microsoft.NodeXL.Core.IVertex@)">
             <overloads>
             Searches for a specified vertex.
             </overloads>
            
             <summary>
             Searches for the vertex with the specified <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>.
             </summary>
            
             <param name="id">
             <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> of the vertex to search for.
             </param>
            
             <param name="vertex">
             Gets set to the specified <see cref="T:Microsoft.NodeXL.Core.IVertex"/> if true is returned,
             or to null if false is returned.
             </param>
            
             <returns>
             true if a vertex with an <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> of
             <paramref name="id"/> is found, false if not.
             </returns>
            
             <remarks>
             This method searches the collection for the vertex with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.  If such a
             vertex is found, it gets stored at <paramref name="vertex"/> and true
             is returned.  Otherwise, <paramref name="vertex"/> gets set to null
             and false is returned.
            
             <para>
             IDs are unique among all vertices, so there can be only one vertex
             with the specified ID.
             </para>
            
             <para>
             Use <see cref="M:Microsoft.NodeXL.Core.IVertexCollection.Contains(System.Int32)"/> if you want to determine whether
             such a vertex exists in the collection but you don't need the actual
             vertex.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexCollection.Find(System.String,Microsoft.NodeXL.Core.IVertex@)">
             <summary>
             Searches for the first vertex with the specified <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>.
             </summary>
            
             <param name="name">
             The <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> of the vertex to search for.
             Can't be null or empty.
             </param>
            
             <param name="vertex">
             Gets set to the specified <see cref="T:Microsoft.NodeXL.Core.IVertex"/> if true is returned,
             or to null if false is returned.
             </param>
            
             <returns>
             true if a vertex with a <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> of
             <paramref name="name"/> is found, false if not.
             </returns>
            
             <remarks>
             This method searches the collection for the first vertex with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.  If such
             a vertex is found, it gets stored at <paramref name="vertex"/> and
             true is returned.  Otherwise, <paramref name="vertex"/> gets set to
             null and false is returned.
            
             <para>
             Names do not have to be unique, so there could be more than one vertex
             with the same name.
             </para>
            
             <para>
             Use <see cref="M:Microsoft.NodeXL.Core.IVertexCollection.Contains(System.String)"/> if you want to determine whether
             such a vertex exists in the collection but you don't need the actual
             vertex.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexCollection.Remove(Microsoft.NodeXL.Core.IVertex)">
             <overloads>
             Removes a vertex from the collection.
             </overloads>
            
             <summary>
             Removes a vertex specified by reference from the collection.
             </summary>
            
             <param name="vertex">
             The vertex to remove from the collection.
             </param>
            
             <returns>
             true if the vertex was removed, false if the vertex wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for <paramref name="vertex" />.  If
             found, it is removed from the collection, any edges connected to it are
             removed from the graph that owns this vertex collection, and true is
             returned.  false is returned otherwise.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexCollection.Remove(System.Int32)">
             <summary>
             Removes a vertex specified by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> from
             the collection.
             </summary>
            
             <param name="id">
             The ID of the vertex to remove.
             </param>
            
             <returns>
             true if the vertex was removed, false if the vertex wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for the vertex with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.  If found, it
             is removed from the collection, any edges connected to it are removed
             from the graph that owns this vertex collection, and true is returned.
             false is returned otherwise.
            
             <para>
             IDs are unique among all vertices, so there can be only one vertex
             with the specified ID.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexCollection.Remove(System.String)">
             <summary>
             Removes a vertex specified by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>
             from the collection.
             </summary>
            
             <param name="name">
             Name of the vertex to remove.  Can't be null or empty.
             </param>
            
             <returns>
             true if the vertex was removed, false if the vertex wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for the first vertex with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.  If
             found, it is removed from the collection, any edges connected to it are
             removed from the graph that owns this vertex collection, and true is
             returned.  false is returned otherwise.
            
             <para>
             Names do not have to be unique, so there could be more than one vertex
             with the same name.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertexCollection.GetReverseEnumerable">
             <summary>
             Returns an IEnumerable that can be used to iterate backwards through
             the collection. 
             </summary>
            
             <returns>
             An IEnumerable that can be used to iterate backwards through the
             collection. 
             </returns>
        </member>
        <member name="E:Microsoft.NodeXL.Core.IVertexCollection.VertexAdded">
            <summary>
            Occurs when a vertex is added to the collection.
            </summary>
        </member>
        <member name="E:Microsoft.NodeXL.Core.IVertexCollection.VertexRemoved">
            <summary>
            Occurs when a vertex is removed from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.#ctor(Microsoft.NodeXL.Core.IGraph)">
             <summary>
             Initializes a new instance of the VertexCollection class.
             </summary>
            
             <param name="parentGraph">
             The <see cref="T:Microsoft.NodeXL.Core.IGraph"/> that owns this collection.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.Add(Microsoft.NodeXL.Core.IVertex)">
             <overloads>
             Adds a vertex to the collection.
             </overloads>
            
             <summary>
             Adds an existing vertex to the collection.
             </summary>
            
             <param name="vertex">
             The vertex to add to the collection.
             </param>
            
             <returns>
             The added vertex <paramref name="vertex" />.
             </returns>
            
             <remarks>
             An exception is thrown if <paramref name="vertex" /> has already been
             added to a graph.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.Add(Microsoft.NodeXL.Core.IVertexFactory)">
             <summary>
             Creates a vertex of a specified type and adds it to the collection.
             </summary>
            
             <param name="vertexFactory">
             Object that can create a vertex.
             </param>
            
             <returns>
             The added vertex.
             </returns>
            
             <remarks>
             <paramref name="vertexFactory" /> is used to create the vertex.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.Add">
             <summary>
             Creates a vertex of type <see cref="T:Microsoft.NodeXL.Core.Vertex"/> and adds it to the
             collection.
             </summary>
            
             <returns>
             The added <see cref="T:Microsoft.NodeXL.Core.Vertex"/>.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.Clear">
             <summary>
             Removes all vertices from the collection.
             </summary>
            
             <remarks>
             This method removes all vertices from the collection and all edges from
             the graph that owns the collection.
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.VertexCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.Contains(Microsoft.NodeXL.Core.IVertex)">
             <overloads>
             Determines whether the collection contains a specified vertex.
             </overloads>
            
             <summary>
             Determines whether the collection contains a vertex specified by
             reference.
             </summary>
            
             <param name="vertex">
             The vertex to search for.
             </param>
            
             <returns>
             true if the collection contains <paramref name="vertex"/>.
             </returns>
            
             <remarks>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.VertexCollection.Count"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.Contains(System.Int32)">
             <summary>
             Determines whether the collection contains a vertex specified by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>
             </summary>
            
             <param name="id">
             The ID to search for.
             </param>
            
             <returns>
             true if the collection contains a vertex with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.
             </returns>
            
             <remarks>
             IDs are unique among all vertices, so there can be only one vertex with
             the specified ID.
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.VertexCollection.Count"/>.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.VertexCollection.Find(System.Int32,Microsoft.NodeXL.Core.IVertex@)"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.Contains(System.String)">
             <summary>
             Determines whether the collection contains a vertex specified by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>
             </summary>
            
             <param name="name">
             The name to search for.  Can't be null or empty.
             </param>
            
             <returns>
             true if the collection contains a vertex with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.
             </returns>
            
             <remarks>
             Names do not have to be unique, so there could be more than one vertex
             with the same name.
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.VertexCollection.Count"/>.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.VertexCollection.Find(System.String,Microsoft.NodeXL.Core.IVertex@)"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.CopyTo(System.Array,System.Int32)">
             <summary>
             Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
             </summary>
            
             <param name="array">
             The one-dimensional <see cref="T:System.Array"/> that is the destination of the
             elements copied from <see cref="T:System.Collections.ICollection"/>.  The <see cref="T:System.Array"/> must be of type IVertex[] and have zero-based indexing. 
             </param>
            
             <param name="index">
             The zero-based index in <paramref name="array"/> at which copying
             begins. 
             </param>
            
             <remarks>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.VertexCollection.Count"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.Find(System.Int32,Microsoft.NodeXL.Core.IVertex@)">
             <overloads>
             Searches for a specified vertex.
             </overloads>
            
             <summary>
             Searches for the vertex with the specified <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>.
             </summary>
            
             <param name="id">
             <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> of the vertex to search for.
             </param>
            
             <param name="vertex">
             Gets set to the specified <see cref="T:Microsoft.NodeXL.Core.IVertex"/> if true is returned,
             or to null if false is returned.
             </param>
            
             <returns>
             true if a vertex with an <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> of
             <paramref name="id"/> is found, false if not.
             </returns>
            
             <remarks>
             This method searches the collection for the vertex with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.  If such a
             vertex is found, it gets stored at <paramref name="vertex"/> and true
             is returned.  Otherwise, <paramref name="vertex"/> gets set to null
             and false is returned.
            
             <para>
             IDs are unique among all vertices, so there can be only one vertex
             with the specified ID.
             </para>
            
             <para>
             Use <see cref="M:Microsoft.NodeXL.Core.VertexCollection.Contains(System.Int32)"/> if you want to determine whether
             such a vertex exists in the collection but you don't need the actual
             vertex.
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.VertexCollection.Count"/>.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.VertexCollection.Contains(System.Int32)"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.Find(System.String,Microsoft.NodeXL.Core.IVertex@)">
             <summary>
             Searches for the first vertex with the specified <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>.
             </summary>
            
             <param name="name">
             The <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> of the vertex to search for.
             Can't be null or empty.
             </param>
            
             <param name="vertex">
             Gets set to the specified <see cref="T:Microsoft.NodeXL.Core.IVertex"/> if true is returned,
             or to null if false is returned.
             </param>
            
             <returns>
             true if a vertex with a <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> of
             <paramref name="name"/> is found, false if not.
             </returns>
            
             <remarks>
             This method searches the collection for the first vertex with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.  If such
             a vertex is found, it gets stored at <paramref name="vertex"/> and
             true is returned.  Otherwise, <paramref name="vertex"/> gets set to
             null and false is returned.
            
             <para>
             Names do not have to be unique, so there could be more than one vertex
             with the same name.
             </para>
            
             <para>
             Use <see cref="M:Microsoft.NodeXL.Core.VertexCollection.Contains(System.String)"/> if you want to determine whether
             such a vertex exists in the collection but you don't need the actual
             vertex.
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.VertexCollection.Count"/>.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.VertexCollection.Contains(System.String)"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.GetEnumerator">
             <summary>
             Returns an enumerator that iterates through the collection. 
             </summary>
            
             <returns>
             An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate
             through the collection. 
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.GetReverseEnumerable">
             <summary>
             Returns an IEnumerable that can be used to iterate backwards through
             the collection. 
             </summary>
            
             <returns>
             An IEnumerable that can be used to iterate backwards through the
             collection. 
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.Remove(Microsoft.NodeXL.Core.IVertex)">
             <overloads>
             Removes a vertex from the collection.
             </overloads>
            
             <summary>
             Removes a vertex specified by reference from the collection.
             </summary>
            
             <param name="vertex">
             The vertex to remove from the collection.
             </param>
            
             <returns>
             true if the vertex was removed, false if the vertex wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for <paramref name="vertex"/>.  If
             found, it is removed from the collection, any edges connected to it are
             removed from the graph that owns this vertex collection, and true is
             returned.  false is returned otherwise.
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.VertexCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.Remove(System.Int32)">
             <summary>
             Removes a vertex specified by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> from
             the collection.
             </summary>
            
             <param name="id">
             The ID of the vertex to remove.
             </param>
            
             <returns>
             true if the vertex was removed, false if the vertex wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for the vertex with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.  If found, it
             is removed from the collection, any edges connected to it are removed
             from the graph that owns this vertex collection, and true is returned.
             false is returned otherwise.
            
             <para>
             IDs are unique among all vertices, so there can be only one vertex
             with the specified ID.
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.VertexCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.Remove(System.String)">
             <summary>
             Removes a vertex specified by <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>
             from the collection.
             </summary>
            
             <param name="name">
             Name of the vertex to remove.  Can't be null or empty.
             </param>
            
             <returns>
             true if the vertex was removed, false if the vertex wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for the first vertex with the <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.  If
             found, it is removed from the collection, any edges connected to it are
             removed from the graph that owns this vertex collection, and true is
             returned.  false is returned otherwise.
            
             <para>
             Names do not have to be unique, so there could be more than one vertex
             with the same name.
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Microsoft.NodeXL.Core.VertexCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.Find(System.Boolean,System.Int32,System.String,System.Collections.Generic.LinkedListNode{Microsoft.NodeXL.Core.IVertex}@)">
             <summary>
             Searches for a vertex with the specified <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> or <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>.
             </summary>
            
             <param name="bByID">
             true to search by ID, false to search by name.
             </param>
            
             <param name="iID">
             The <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/> of the vertex to search for if
             <paramref name="bByID"/> is true.
             </param>
            
             <param name="sName">
             The <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> of the vertex to search for
             if <paramref name="bByID"/> is false.  Can't be null or empty if
             <paramref name="bByID"/> is false.
             </param>
            
             <param name="oLinkedListNode">
             Gets set to the specified <see cref="T:System.Collections.Generic.LinkedListNode`1"/> if
             true is returned, or to null if false is returned.
             </param>
            
             <returns>
             true if the specified vertex is found, false if not.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.Remove(System.Collections.Generic.LinkedListNode{Microsoft.NodeXL.Core.IVertex})">
             <summary>
             Removes a <see cref="T:System.Collections.Generic.LinkedListNode`1"/> from the linked list.
             </summary>
            
             <param name="oLinkedListNode">
             The node to remove from the linked list.
             </param>
            
             <remarks>
             This method removes <paramref name="oLinkedListNode"/> from the linked
             list and removes any edges connected to it.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.AppendPropertiesToString(System.Text.StringBuilder,System.Int32,System.String)">
             <summary>
             Appends the derived class's public property values to a String.
             </summary>
            
             <param name="oStringBuilder">
             Object to append to.
             </param>
            
             <param name="iIndentationLevel">
             Current indentation level.  Level 0 is "no indentation."
             </param>
            
             <param name="sFormat">
             The format to use, either G", "P", or "D".  See <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/> for details.
             </param>
            
             <remarks>
             This method calls <see cref="M:Microsoft.NodeXL.Core.ToStringUtil.AppendPropertyToString(System.Text.StringBuilder,System.Int32,System.String,System.Object,System.Boolean)"/> for each of the
             derived class's public properties.  It is used in the implementation of
             <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.VertexCollection.m_oParentGraph">
            Graph that owns this collection.
        </member>
        <member name="F:Microsoft.NodeXL.Core.VertexCollection.m_oLinkedList">
            The linked list that stores the collection.
        </member>
        <member name="F:Microsoft.NodeXL.Core.VertexCollection.m_oVertexFactory">
            Gets used by several Add() methods.
        </member>
        <member name="P:Microsoft.NodeXL.Core.VertexCollection.Count">
             <summary>
             Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
             </summary>
            
             <value>
             The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
             </value>
            
             <remarks>
             Retrieving the value of this property is an O(1) operation.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.VertexCollection.IsSynchronized">
             <summary>
             Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe). 
             </summary>
            
             <value>
             true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized
             (thread safe); otherwise, false. 
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Core.VertexCollection.SyncRoot">
             <summary>
             Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>. 
             </summary>
            
             <value>
             An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>. 
             </value>
        </member>
        <member name="E:Microsoft.NodeXL.Core.VertexCollection.VertexAdded">
            <summary>
            Occurs when a vertex is added to the collection.
            </summary>
        </member>
        <member name="E:Microsoft.NodeXL.Core.VertexCollection.VertexRemoved">
            <summary>
            Occurs when a vertex is removed from the collection.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Core.VertexCollection.ReverseEnumerator">
             <summary>
             Supports iterating backwards over a <see cref="T:Microsoft.NodeXL.Core.VertexCollection"/>.
             </summary>
            
             <remarks>
             This class is nested within the <see cref="T:Microsoft.NodeXL.Core.VertexCollection"/> class, so
             its type is VertexCollection.ReverseEnumerator.  An instance of this class
             gets returned by <see cref="M:Microsoft.NodeXL.Core.VertexCollection.GetReverseEnumerable"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.ReverseEnumerator.#ctor(Microsoft.NodeXL.Core.VertexCollection)">
             <summary>
             Initializes a new instance of the ReverseEnumerator class.
             </summary>
            
             <param name="vertexCollection">
             Collection being enumerated.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.ReverseEnumerator.MoveNext">
             <summary>
             Moves to the next object in the enumeration.
             </summary>
            
             <returns>
             true if the enumerator was successfully advanced to the next element;
             false if the enumerator has passed the end of the collection. 
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.ReverseEnumerator.Reset">
            <summary>
            Resets the current position so it points to the beginning of the
            enumeration.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.ReverseEnumerator.GetEnumerator">
             <summary>
             Returns an enumerator that iterates through the collection. 
             </summary>
            
             <returns>
             An enumerator that iterates through the collection. 
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.ReverseEnumerator.GetCurrent">
             <summary>
             Gets the object at the current position.
             </summary>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IVertex"/> object at the enumerator's current position.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexCollection.ReverseEnumerator.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.VertexCollection.ReverseEnumerator.m_oVertexCollection">
            Collection being enumerated.
        </member>
        <member name="F:Microsoft.NodeXL.Core.VertexCollection.ReverseEnumerator.m_oCurrentNode">
            LinkedList node that contains the IVertex to return from the next call
            to Current(), or null if MoveNext() hasn't been called yet or the start
            of the LinkedList has been reached.
        </member>
        <member name="P:Microsoft.NodeXL.Core.VertexCollection.ReverseEnumerator.System#Collections#IEnumerator#Current">
             <summary>
             Gets the object at the current position.
             </summary>
            
             <value>
             The <see cref="T:Microsoft.NodeXL.Core.IVertex"/> object at the enumerator's current position.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Core.VertexCollection.ReverseEnumerator.Current">
             <summary>
             Gets the object at the current position.
             </summary>
            
             <value>
             The <see cref="T:Microsoft.NodeXL.Core.IVertex"/> object at the enumerator's current position.
             </value>
            
        </member>
        <member name="T:Microsoft.NodeXL.Core.ReservedMetadataKeys">
             <summary>
             Contains metadata keys used by the NodeXL system.
             </summary>
            
             <remarks>
             Some of the metadata keys defined in this class are meant for use by
             applications that use the NodeXL class libraries.  An application can add
             the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerColor"/> key to a vertex or edge to set its color, for
             example.  Other keys are used internally by NodeXL and are of no use to
             applications -- <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayoutBaseLayoutComplete"/> is used internally
             by the NodeXL layout classes, for example.
            
             <para>
             See <see cref="T:Microsoft.NodeXL.Core.IMetadataProvider"/> for information on the metadata scheme
             used by NodeXL.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.FirstChar">
            <summary>
            All reserved keys start with this character.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.EdgeWeight">
            <summary>
            Key added to an edge to specify an edge weight.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.VertexToolTip">
             <summary>
             Key added to a vertex to set the vertex's tooltip when using
             NodeXLControl.  The key's value is a String.
            
             <para>
             For tooltips to be visible, you must set
             NodeXLControl.UseVertexToolTips to true.  The default value is false.
             </para>
            
             </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.IsSelected">
             <summary>
             Key added to a vertex or edge to draw it as selected.  The key's value
             is null.
            
             <para>
             <b>Important Note:</b>
             </para>
            
             <para>
             When using NodeXLControl, do not use the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.IsSelected"/> key
             to select vertex or edges.  Use the selection methods on the control
             instead.
             </para>
            
             </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.Visibility">
             <summary>
             Key added to a vertex or edge to control its visibility.  The key's
             value is a member of the <see cref="T:Microsoft.NodeXL.Core.VisibilityKeyValue"/> enumeration.
            
             <para>
             If this key is present and its value is <see cref="F:Microsoft.NodeXL.Core.VisibilityKeyValue.Filtered"/> or <see cref="F:Microsoft.NodeXL.Core.VisibilityKeyValue.Hidden"/>, any <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerAlpha"/> key is
             ignored.
             </para>
            
             </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerColor">
            <summary>
            Key added to a vertex or edge to force it to be a specified color.
            The key's value can be either a System.Drawing.Color or a 
            System.Windows.Media.Color.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerAlpha">
             <summary>
             Key added to a vertex or edge to force it to be a specified
             transparency.  The key's value is a Byte between 0 (transparent) and
             255 (opaque).
            
             <para>
             If the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.Visibility"/> key is present and its value is <see cref="F:Microsoft.NodeXL.Core.VisibilityKeyValue.Filtered"/> or <see cref="F:Microsoft.NodeXL.Core.VisibilityKeyValue.Hidden"/>, the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerAlpha"/> key is
             ignored.
             </para>
            
             </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexShape">
            <summary>
            Key added to a vertex to force it to be a specified shape.  The key's
            value is a VertexShape.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexRadius">
            <summary>
            Key added to a vertex to force it to be a specified radius.  The key's
            value is a Single between VertexDrawer.MinimumRadius and
            VertexDrawer.MaximumRadius.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexImage">
            <summary>
            Key added to a vertex to force it to be drawn as an image instead of a
            shape.  The key's value is a System.Windows.Media.ImageSource.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexPrimaryLabel">
            <summary>
            Key added to a vertex to force it to be drawn as a primary label, which
            is a rectangle containing text.  The key's value is a System.String.
            <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexPrimaryLabel"/> and <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexSecondaryLabel"/> may be specified in any combination.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexPrimaryLabelFillColor">
            <summary>
            Key added to a vertex to force a primary label to have a specified fill
            color.  The key's value is a Color.  Used only if <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexPrimaryLabel"/> is specified.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexSecondaryLabel">
            <summary>
            Key added to a vertex to force a secondary label to be drawn near it.
            The key's value is a System.String.  A secondary label can be added to
            any vertex, regardless of whether it is drawn as a shape, primary
            label, or image.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerVertexDrawingPrecedence">
            <summary>
            Key added to a vertex to specify whether the vertex should be drawn a
            a shape, image, or primary label.  The key's value is a member of the
            VertexDrawingPrecedence enumeration.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerEdgeWidth">
            <summary>
            Key added to an edge to force it to be a specified width.  The key's
            value is a Single between EdgeDrawer.MinimumWidth and
            EdgeDrawer.MaximumWidth.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayoutBaseLayoutComplete">
            <summary>
            Key added to the graph after it has been laid out.  The key's value is
            of type Rectangle and stores the graph's layout rectangle.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly">
            <summary>
            Key added to a graph to tell the layout algorithm to lay out only a
            specified set of vertices.  The key's value is an IVertex array
            containing the vertices to lay out.  When this key is present on the
            graph, the layout completely ignores the graph's vertices that are not
            in the specified array.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation">
            <summary>
            Key added to a vertex to tell the layout algorithm to leave the vertex
            at its current location.  The key's value is a Boolean.  The layout may
            include the vertex in its overall layout calculations, but it cannot
            move the vertex.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.CircleLayoutCircleDrawn">
            <summary>
            Key added to the graph after it has been completely drawn.  The key's
            value is null.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.SpiralLayoutSpiralDrawn">
            <summary>
            Key added to the graph after it has been completely drawn.  The key's
            value is null.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.SinusoidLayoutSinusoidDrawn">
            <summary>
            Key added to the graph after it has been completely drawn.  The key's
            value is null.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.GridLayoutGridDrawn">
            <summary>
            Key added to the graph after it has been completely drawn.  The key's
            value is null.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.FruchtermanReingoldLayoutSelectivelyRandomize">
            <summary>
            Key added to the graph to tell the layout to randomize the locations
            of only those vertices whose location is set to
            LayoutBase.RandomizeThisLocation.  If this key is not present, all
            locations are randomized.  The key's value is null.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.FruchtermanReingoldLayoutTagStorage">
            <summary>
            Key added to each vertex to temporarily store the vertex's Tag.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.SugiyamaComputedRadius">
            <summary>
            SugiyamaLayout uses VertexDrawer.Radius as an initial radius for the
            vertex circles, then computes an actual radius that probably differs
            from the initial value.  It stores the computed radius in the IGraph's
            metadata in a key named SugiyamaComputedRadius  The type of the key's
            value is Single.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.SugiyamaCurvePoints">
             <summary>
             For each edge, SugiyamaLayout computes a curve that extends from the
             edge's first vertex to some point near the second vertex, then computes
             an endpoint on the second vertex's circle.  It stores an array of curve
             points in the edge's metadata in a key named SugiyamaCurvePoints.  The
             type of the key's value is PointF[].  The curve points should be drawn
             with code similar to the following:
            
             <code>
            
             GraphicsPath oGraphicsPath = new GraphicsPath();
             
             oGraphicsPath.AddBeziers(aoCurvePoints);
             
             oGraphics.DrawPath(oPen, oGraphicsPath);
            
             </code>
            
             </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.SugiyamaEndpoint">
             <summary>
             For each edge, SugiyamaLayout computes an endpoint on the second
             vertex's circle and stores it in the edge's metadata in a key named
             SugiyamaEndpoint.  The type of the key's value is PointF.  The line
             from the last curve point to the endpoint should be drawn with code
             similar to the following:
            
             <code>
            
             oGraphics.DrawLine(oPen,
                 aoCurvePoints[aoCurvePoints.Length - 1],
                 oEndpoint
                 );
            
             </code>
            
             </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.SugiyamaGleeNode">
            <summary>
            SugiyamaLayout uses SugiyamaGleeNode to temporarily store a NodeXL
            vertex's corresponding GLEE node in the NodeXL vertex's metadata.  The
            type of the key's value is Microsoft.Glee.Node.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.SugiyamaGleeEdge">
            <summary>
            SugiyamaLayout uses SugiyamaGleeEdge to temporarily store a NodeXL
            edge's corresponding GLEE edge in the NodeXL edge's metadata.  The type
            of the key's value is Microsoft.Glee.Edge.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.DraggedVerticesOriginalLocation">
            <summary>
            The Visualization.Wpf.DraggedVertices class adds this key to each
            selected vertex before it is dragged.  The key's value is the vertex's
            original location, as a PointF.  The key is removed when the drag
            completes.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.Marked">
            <summary>
            Key added to a vertex or edge to "mark" it.  The key's value is true or
            false.  The meaning of marking is up to the application.  None of the
            NodeXL core or visualization components pay attention to this key.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.CustomContextMenuItems">
            <summary>
            Key added to a vertex to add custom menu items to the vertex's
            context menu in the graph.  The key's value is an array of
            KeyValue&lt;String,String&gt;.  For each element, the key is the
            custom menu item text and the value is the custom menu item action.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Core.VisibilityKeyValue">
             <summary>
             Values used by the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.Visibility"/> reserved
             metadata key.
             </summary>
            
             <remarks>
             Setting the <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.Visibility"/> key on a vertex
             or edge to one of these values controls the visibility of the vertex or
             edge.
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Core.VisibilityKeyValue.Visible">
            <summary>
            The vertex or edge is drawn normally.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.VisibilityKeyValue.Hidden">
             <summary>
             The vertex or edge is not drawn, even though it participated in the
             layout.
            
             <para>
             Any <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerAlpha"/> key is ignored.
             </para>
            
             </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.VisibilityKeyValue.Filtered">
             <summary>
             The vertex or edge is drawn, but with a reduced alpha to indicate that
             it has been filtered with a dynamic filter.
            
             <para>
             Any <see cref="F:Microsoft.NodeXL.Core.ReservedMetadataKeys.PerAlpha"/> key is ignored.
             </para>
            
             </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Core.SimpleGraphMatrix">
             <summary>
             Simulates a matrix that can be used to determine whether two vertices are
             connected by an edge.
             </summary>
            
             <remarks>
             This class is meant for use in algorithms that require that a graph be
             represented in a square matrix format, where Aij is 1 if there is an edge
             between vertices i and j, and 0 otherwise.  It doesn't actually create a
             matrix; instead, it uses an internal sparse dictionary to implement a quick
             <see cref="M:Microsoft.NodeXL.Core.SimpleGraphMatrix.Aij(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)"/> lookup.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.SimpleGraphMatrix.#ctor(Microsoft.NodeXL.Core.IGraph)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.SimpleGraphMatrix"/>
             class.
             </summary>
            
             <param name="graph">
             The graph that needs to be represented in square matrix format.  The
             graph can be of any <see cref="T:Microsoft.NodeXL.Core.GraphDirectedness"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.SimpleGraphMatrix.Aij(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Determines whether an edge exists between two of the graph's vertices.
             </summary>
            
             <param name="vertex1">
             The first vertex.
             </param>
            
             <param name="vertex2">
             The second vertex.
             </param>
            
             <returns>
             true if an edge exists between <paramref name="vertex1" /> and
             <paramref name="vertex2" />.
             </returns>
            
             <remarks>
             The direction of the edge (if the graph is directed) is irrelevant;
             swapping the two parameters yields the same return value.  The
             existence of multiple edges between the vertices is also irrelevant.
             As long as there is at least one connecting edge, true is returned.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.SimpleGraphMatrix.GetKey(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Gets the dictionary key for two vertices.
             </summary>
            
             <param name="oVertex1">
             The first vertex.
             </param>
            
             <param name="oVertex2">
             The second vertex.
             </param>
            
             <returns>
             The dictionary key to use.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.SimpleGraphMatrix.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.SimpleGraphMatrix.m_oEdgeDictionary">
            The key is what gets returned by GetKey() and the value isn't used.
        </member>
        <member name="T:Microsoft.NodeXL.Core.EdgeUtil">
             <summary>
             Utility methods for dealing with <see cref="T:Microsoft.NodeXL.Core.IEdge"/> objects.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeUtil.EdgeToVertices(Microsoft.NodeXL.Core.IEdge,System.String,System.String,Microsoft.NodeXL.Core.IVertex@,Microsoft.NodeXL.Core.IVertex@)">
             <summary>
             Obtains an edge's two vertices.
             </summary>
            
             <param name="edge">
             The edge connecting the two vertices.  Can't be null.
             </param>
            
             <param name="className">
             Name of the class calling this method.
             </param>
            
             <param name="methodOrPropertyName">
             Name of the method or property calling this method.
             </param>
            
             <param name="vertex1">
             Where the edge's first vertex gets stored.
             </param>
            
             <param name="vertex2">
             Where the edge's second vertex gets stored.
             </param>
            
             <remarks>
             This method obtains an edge's two vertices and stores them at
             <paramref name="vertex1"/> and <paramref name="vertex2"/>.  An
             <see cref="T:System.ApplicationException"/> is thrown if the vertices can't be
             obtained.
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Core.VertexEventArgs">
            <summary>
            Provides event information for events involving a vertex.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexEventArgs.#ctor(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.VertexEventArgs"/> class.
             </summary>
            
             <param name="vertex">
             Vertex associated with the event.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexEventArgs.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.VertexEventArgs.m_oVertex">
            Vertex associated with the event.
        </member>
        <member name="P:Microsoft.NodeXL.Core.VertexEventArgs.Vertex">
             <summary>
             Gets the vertex associated with the event.
             </summary>
            
             <value>
             The vertex associated with the event, as an <see cref="T:Microsoft.NodeXL.Core.IVertex"/>.
             This is never null.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Core.VertexEventArgs.ArgumentChecker">
             <summary>
             Gets a new initialized ArgumentChecker object.
             </summary>
            
             <value>
             A new initialized ArgumentChecker object.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Core.VertexEventHandler">
             <summary>
             Represents a method that will handle an event involving a vertex.
             </summary>
            
             <param name="sender">
             The source of the event.
             </param>
            
             <param name="vertexEventArgs">
             An <see cref="T:Microsoft.NodeXL.Core.VertexEventArgs"/> object that contains the event data.
             </param>
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker">
             <summary>
             Contains methods that check method arguments and property values.
             </summary>
            
             <remarks>
             This can be used by a class that wants to check values passed to its
             property setters and arguments passed to its methods.  The CheckXXX()
             methods in this class throw an exception if a parameter value or method
             argument is invalid.
            
             <para>
             This class is marked internal to avoid compiler error CS0433 ("The
             type ... exists in both ...") when an executable references two or more
             assemblies that use this class.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.#ctor(System.String)">
             <summary>
             Initializes a new instance of the ArgumentChecker class.
             </summary>
            
             <param name="sOwnerClassName">
             Class name of the object that created this object.  The class name gets
             prepended to all exception messages.  Sample: "MyClass".
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotNull(System.String,System.Object)">
             <summary>
             Throws an exception if a property value is null.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEmpty(System.String,System.String)">
             <summary>
             Throws an exception if a string property value is null or has a length
             of zero.
             </summary>
            
             <param name="sPropertyName">
             Name of the string property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Double)">
             <summary>
             Throws an exception if a Double property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Decimal)">
             <summary>
             Throws an exception if a Decimal property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="decPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotNegative(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is negative.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
            
             <param name="sInvalidValue">
             Invalid value for <paramref name="sPropertyValue" />.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iInvalidValue">
             Invalid value for <paramref name="iPropertyValue" />.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Int32,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="iMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Single,System.Single,System.Single)">
             <summary>
             Throws an exception if a Single property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="fPropertyValue">
             Property value to check.
             </param>
            
             <param name="fMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="fMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Double,System.Double,System.Double)">
             <summary>
             Throws an exception if a Double property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
            
             <param name="dMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="dMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyIsDefined(System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a property value is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oPropertyValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNull(System.String,System.String,System.Object)">
             <summary>
             Throws an exception if a method argument is null.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotEmpty(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string method argument is null or has a length
             of zero.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="sArgumentValue">
             Argument value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Double)">
             <summary>
             Throws an exception if a Double method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="dArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentIsDefined(System.String,System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a method argument is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oArgumentValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is an inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is no inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is an inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is no inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.m_sOwnerClassName">
            Class name of the object that created this object.
        </member>
        <member name="T:Microsoft.NodeXL.Core.LayoutUtil">
             <summary>
             Utility methods for dealing with graph layouts.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.LayoutUtil.GetRectangleTransformation(System.Drawing.RectangleF,System.Drawing.RectangleF)">
             <summary>
             Returns a <see cref="T:System.Drawing.Drawing2D.Matrix"/> that will transform points from
             coordinates in one rectangle to cooordinates in another rectangle.
             </summary>
            
             <param name="rectangle1">
             Source rectangle.
             </param>
            
             <param name="rectangle2">
             Destination rectangle.
             </param>
            
             <returns>
             A <see cref="T:System.Drawing.Drawing2D.Matrix"/> to transform points from <paramref name="rectangle1"/> to <paramref name="rectangle2"/>.
             </returns>
            
             <remarks>
             The <see cref="T:System.Drawing.Drawing2D.Matrix"/> returned by this method can be used to
             transform vertex locations and other points from one rectangle to
             another.  The transformation can involve both a translation and a
             scaling.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.LayoutUtil.TransformVertexLocations(Microsoft.NodeXL.Core.IGraph,System.Drawing.RectangleF,System.Drawing.RectangleF)">
             <overloads>
             Transforms a graph's vertex locations from their original rectangle to
             a new rectangle.
             </overloads>
            
             <summary>
             Transforms a graph's vertex locations from their original rectangle to
             a new rectangle.
             </summary>
            
             <param name="graph">
             Graph whose vertex locations should be transformed.
             </param>
            
             <param name="originalGraphRectangle">
             Graph rectangle in which <paramref name="graph" /> was laid out.
             </param>
            
             <param name="newGraphRectangle">
             Graph rectangle into which <paramref name="graph" />'s vertices should
             be transformed.
             </param>
            
             <remarks>
             After a graph is laid out, this method can be used to transform the
             vertex locations from the original graph rectangle to a new graph
             rectangle.  The transformation can involve both a translation and a
             scaling.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.LayoutUtil.TransformVertexLocations(Microsoft.NodeXL.Core.IGraph,System.Drawing.Drawing2D.Matrix)">
             <summary>
             Transforms a graph's vertex locations from their original rectangle to
             a new rectangle using a specified transformation matrix.
             </summary>
            
             <param name="graph">
             Graph whose vertex locations should be transformed.
             </param>
            
             <param name="transformationMatrix">
             Transformation matrix to use.
             </param>
            
             <remarks>
             After a graph is laid out, this method can be used to transform the
             vertex locations from the original graph rectangle to a new graph
             rectangle.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.LayoutUtil.TransformPointF(System.Drawing.PointF,System.Drawing.Drawing2D.Matrix)">
             <summary>
             Transforms a PointF using a specified transformation matrix.
             </summary>
            
             <param name="pointF">
             PointF to transform.
             </param>
            
             <param name="transformationMatrix">
             Transformation matrix to use.
             </param>
            
             <returns>
             Transformed copy of <paramref name="pointF" />.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.LayoutUtil.GetGraphBoundingRectangle(Microsoft.NodeXL.Core.IGraph)">
             <summary>
             Returns the smallest <see cref="T:System.Drawing.RectangleF"/> that contains all of a
             graph's vertices.
             </summary>
            
             <param name="graph">
             Graph to get a bounding rectangle for.
             </param>
            
             <returns>
             A <see cref="T:System.Drawing.RectangleF"/> that contains all of a graph's vertices.
             </returns>
            
             <remarks>
             If <paramref name="graph"/> contains zero vertices, RectangleF.Empty
             is returned.
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Core.EdgeFactory">
             <summary>
             Class that knows how to create <see cref="T:Microsoft.NodeXL.Core.Edge"/> objects.
             </summary>
            
             <remarks>
             This class implements <see cref="T:Microsoft.NodeXL.Core.IEdgeFactory"/>, which allows the core
             NodeXL system to create edge objects without knowing their type.
             </remarks>
            
             <seealso cref="T:Microsoft.NodeXL.Core.Edge"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.EdgeFactory"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeFactory.CreateEdgeCore(Microsoft.NodeXL.Core.IVertex,Microsoft.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Creates an edge object with a specified directedness.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <param name="isDirected">
             If true, <paramref name="vertex1"/> is the edge's back vertex and
             <paramref name="vertex2"/> is the edge's front vertex.  If false, the
             edge is undirected.
             </param>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IEdge"/> interface on a newly created edge object.
             </returns>
            
             <remarks>
             The arguments have already been checked for validity.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.EdgeFactory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Core.Graph">
             <summary>
             Provides a default graph implementation.
             </summary>
            
             <remarks>
             A graph has a collection of <see cref="P:Microsoft.NodeXL.Core.Graph.Vertices"/> and a collection of
             <see cref="P:Microsoft.NodeXL.Core.Graph.Edges"/> that connect the <see cref="P:Microsoft.NodeXL.Core.Graph.Vertices"/>.  The <see cref="P:Microsoft.NodeXL.Core.Graph.Directedness"/> property specifies the type of edges that can be
             added to the graph.
            
             <para>
             This class can be used as-is in many graphing applications.  You can also
             customize it via inheritance, or implement your own graph class from
             scratch.  All graph classes must implement the <see cref="T:Microsoft.NodeXL.Core.IGraph"/>
             interface.  If you implement a graph class, you may also want to implement
             a corresponding <see cref="T:Microsoft.NodeXL.Core.IGraphFactory"/> class.
             </para>
            
             </remarks>
            
             <example>
             The following code creates a graph, populates it with vertices and edges,
             and lists the graph's contents.
            
             <code>
            
             // Create a graph with mixed directedness and no restrictions.
             
             IGraph oGraph = new Graph();
             
             // Add vertices to the graph.  Save the vertices in a local array for
             // later use.
             
             const Int32 Vertices = 10;
             
             IVertexCollection oVertices = oGraph.Vertices;
             
             IVertex[] aoVertices = new IVertex[Vertices];
             
             for (Int32 i = 0; i &lt; Vertices; i++)
             {
                 aoVertices[i] = oVertices.Add();
             }
             
             // Add a set of edges that connect the first vertex to each of the
             // other vertices.
             
             Int32 iEdges = Vertices - 1;
             
             IEdge[] aoEdges = new IEdge[iEdges];
             
             IEdgeCollection oEdges = oGraph.Edges;
             
             for (Int32 i = 0; i &lt; iEdges; i++)
             {
                 aoEdges[i] = oEdges.Add( aoVertices[0], aoVertices[i + 1] );
             }
             
             // List the graph's contents.
             
             Console.Write( oGraph.ToString("D") );
            
             </code>
            
             <para>
             This produces the following output:
             </para>
            
             <code>
             Microsoft.NodeXL.Core.Graph
             ID = 1
             Name = [null]
             Tag = [null]
             Values = 0 key/value pairs
             Directedness = Mixed
             PerformExtraValidations = False
             Restrictions = None
             Vertices = 10 vertices
                 ID = 1
                 ID = 2
                 ID = 3
                 ID = 4
                 ID = 5
                 ID = 6
                 ID = 7
                 ID = 8
                 ID = 9
                 ID = 10
             Edges = 9 edges
                 ID = 9
                 ID = 8
                 ID = 7
                 ID = 6
                 ID = 5
                 ID = 4
                 ID = 3
                 ID = 2
                 ID = 1
             </code>
            
             </example>
            
             <seealso cref="T:Microsoft.NodeXL.Core.IGraph"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Graph.#cctor">
            <overloads>
            Static constructor for the Graph class.
            </overloads>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Graph.#ctor">
             <overloads>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.Graph"/> class.
             </overloads>
            
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.Graph"/> class with a
             mixed directedness and no restrictions.
             </summary>
            
             <remarks>
             The <see cref="P:Microsoft.NodeXL.Core.Graph.Directedness"/> property is set to <see cref="F:Microsoft.NodeXL.Core.GraphDirectedness.Mixed"/>.  The <see cref="P:Microsoft.NodeXL.Core.Graph.Restrictions"/>
             property is set to <see cref="F:Microsoft.NodeXL.Core.GraphRestrictions.None"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Graph.#ctor(Microsoft.NodeXL.Core.GraphDirectedness)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.Graph"/> class with a
             specified directedness and no restrictions.
             </summary>
            
             <param name="directedness">
             Specifies the type of edges that can be added to the graph.
             </param>
            
             <remarks>
             The <see cref="P:Microsoft.NodeXL.Core.Graph.Restrictions"/> property is set to <see cref="F:Microsoft.NodeXL.Core.GraphRestrictions.None"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Graph.#ctor(Microsoft.NodeXL.Core.GraphDirectedness,Microsoft.NodeXL.Core.GraphRestrictions)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.Graph"/> class with
             specified directedness and restrictions.
             </summary>
            
             <param name="directedness">
             Specifies the type of edges that can be added to the graph.
             </param>
            
             <param name="restrictions">
             Specifies restrictions imposed by the graph.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Graph.HasRestrictions(Microsoft.NodeXL.Core.GraphRestrictions)">
             <summary>
             Gets a flag that indicates whether the graph imposes specified
             restrictions.
             </summary>
            
             <param name="restrictions">
             An ORed combination of one or more <see cref="T:Microsoft.NodeXL.Core.GraphRestrictions"/>
             flags.
             </param>
            
             <returns>
             true if the graph imposes all of the restrictions specified by
             <paramref name="restrictions"/>.
             </returns>
            
             <remarks>
             The graph's restrictions are specified when the graph is created and
             cannot be changed.
            
             <para>
             Use <see cref="P:Microsoft.NodeXL.Core.Graph.Restrictions"/> to return all of the graph's
             restrictions.
             </para>
            
             </remarks>
            
             <example>
             The following code determines whether a graph prohibits parallel edges.
            
             <code>
             Boolean bNoParallelEdges =
                 oGraph.HasRestrictions(GraphRestrictions.NoParallelEdges);
             </code>
            
             </example>
            
             <seealso cref="P:Microsoft.NodeXL.Core.Graph.Restrictions"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Graph.Clone(System.Boolean,System.Boolean)">
             <overloads>
             Creates a copy of the graph.
             </overloads>
            
             <summary>
             Creates a copy of the graph, making the copy the same type as the
             original.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new graph,
             vertices, and edges.  (This is a shallow copy.  The objects pointed to
             by the original values are NOT cloned.)  If false, the key/value pairs
             are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> properties on the new
             graph, vertices, and edges are set to the same value as in the original
             objects.  (This is a shallow copy.  The objects pointed to by the
             original <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> properties are NOT
             cloned.)  If false, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/>
             properties on the new graph, vertices, and edges are set to null.
             </param>
            
             <returns>
             The copy of the graph, as an <see cref="T:Microsoft.NodeXL.Core.IGraph"/>.
             </returns>
            
             <remarks>
             The new graph, vertices, and edges are of the same types as the
             originals.  Their <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>s are set to
             the same values as the originals', but they are assigned new <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>s.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Graph.Clone(System.Boolean,System.Boolean,Microsoft.NodeXL.Core.IGraphFactory,Microsoft.NodeXL.Core.IVertexFactory,Microsoft.NodeXL.Core.IEdgeFactory)">
             <summary>
             Creates a copy of the graph, making the copy a specified type.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new graph,
             vertices, and edges.  (This is a shallow copy.  The objects pointed to
             by the original values are NOT cloned.)  If false, the key/value pairs
             are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> properties on the new
             graph, vertices, and edges are set to the same value as in the original
             objects.  (This is a shallow copy.  The objects pointed to by the
             original <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> properties are NOT
             cloned.)  If false, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/>
             properties on the new graph, vertices, and edges are set to null.
             </param>
            
             <param name="newGraphFactory">
             Object that can create a graph.
             </param>
            
             <param name="newVertexFactory">
             Object that can create vertices.
             </param>
            
             <param name="newEdgeFactory">
             Object that can create edges.
             </param>
            
             <returns>
             The copy of the graph, as an <see cref="T:Microsoft.NodeXL.Core.IGraph"/>.
             </returns>
            
             <remarks>
             The new graph, vertices, and edges are created using <paramref name="newGraphFactory"/>, <paramref name="newVertexFactory"/>, and
             <paramref name="newEdgeFactory"/>.  Their <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/>s are set to the same values as the
             originals', but they are assigned new <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>s.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Graph.AppendPropertiesToString(System.Text.StringBuilder,System.Int32,System.String)">
             <summary>
             Appends the derived class's public property values to a String.
             </summary>
            
             <param name="oStringBuilder">
             Object to append to.
             </param>
            
             <param name="iIndentationLevel">
             Current indentation level.  Level 0 is "no indentation."
             </param>
            
             <param name="sFormat">
             The format to use, either "G", "P", or "D".  See <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/> for details.
             </param>
            
             <remarks>
             This method calls <see cref="M:Microsoft.NodeXL.Core.ToStringUtil.AppendPropertyToString(System.Text.StringBuilder,System.Int32,System.String,System.Object,System.Boolean)"/> for each of the
             derived class's public properties.  It is used in the implementation of
             <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Graph.CheckRestrictions(Microsoft.NodeXL.Core.GraphRestrictions,System.String,System.String)">
             <summary>
             Checks whether a value contains only flags specified in the <see cref="T:Microsoft.NodeXL.Core.GraphRestrictions"/> enumeration.
             </summary>
            
             <param name="eRestrictions">
             Value to check.
             </param>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sParameterName">
             Name of the parameter to which <paramref name="eRestrictions"/> was
             passed.
             </param>
            
             <remarks>
             An exception is thrown if <paramref name="eRestrictions"/> contains
             flags not defined in the <see cref="T:Microsoft.NodeXL.Core.GraphRestrictions"/> enumeration.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Graph.VertexCollection_VertexAdded(System.Object,Microsoft.NodeXL.Core.VertexEventArgs)">
             <summary>
             Handles the VertexAdded event on the m_oVertexCollection object.
             </summary>
            
             <param name="oSender">
             Standard event argument.
             </param>
            
             <param name="oVertexEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Graph.EdgeCollection_EdgeAdded(System.Object,Microsoft.NodeXL.Core.EdgeEventArgs)">
             <summary>
             Handles the EdgeAdded event on the m_oEdgeCollection object.
             </summary>
            
             <param name="oSender">
             Standard event argument.
             </param>
            
             <param name="oEdgeEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Graph.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.Graph.m_oIDGenerator">
            Generates unique IDs.
        </member>
        <member name="F:Microsoft.NodeXL.Core.Graph.m_bPerformExtraValidations">
            true to perform extra but possibly slow validations.
        </member>
        <member name="F:Microsoft.NodeXL.Core.Graph.m_oVertexCollection">
            The graph's collection of vertices.
        </member>
        <member name="F:Microsoft.NodeXL.Core.Graph.m_oEdgeCollection">
            The graph's collection of edges.
        </member>
        <member name="F:Microsoft.NodeXL.Core.Graph.m_eDirectedness">
            Indicates the type of edges that can be added to the graph.
        </member>
        <member name="F:Microsoft.NodeXL.Core.Graph.m_eRestrictions">
            Specifies restrictions imposed by the graph.
        </member>
        <member name="P:Microsoft.NodeXL.Core.Graph.Vertices">
             <summary>
             Gets the graph's collection of vertices.
             </summary>
            
             <value>
             A collection of vertices, as an <see cref="T:Microsoft.NodeXL.Core.IVertexCollection"/>.  The
             collection contains zero or more objects that implement <see cref="T:Microsoft.NodeXL.Core.IVertex"/>.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Graph.Edges">
             <summary>
             Gets the graph's collection of edges.
             </summary>
            
             <value>
             A collection of edges, as an <see cref="T:Microsoft.NodeXL.Core.IEdgeCollection"/>.  The
             collection contains zero or more objects that implement <see cref="T:Microsoft.NodeXL.Core.IEdge"/> and that connect vertices in this graph.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Graph.Directedness">
             <summary>
             Gets a value that indicates the type of edges that can be added to the
             graph.
             </summary>
            
             <value>
             A <see cref="T:Microsoft.NodeXL.Core.GraphDirectedness"/> value.
             </value>
            
             <remarks>
             The directedness of a graph is specified when the graph is created and
             cannot be changed.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Graph.Restrictions">
             <summary>
             Gets an ORed set of flags that specify restrictions imposed by the
             graph.
             </summary>
            
             <value>
             An ORed combination of <see cref="T:Microsoft.NodeXL.Core.GraphRestrictions"/> flags.
             </value>
            
             <remarks>
             The graph's restrictions are specified when the graph is created and
             cannot be changed.
            
             <para>
             <see cref="M:Microsoft.NodeXL.Core.Graph.HasRestrictions(Microsoft.NodeXL.Core.GraphRestrictions)"/> can be used to determine whether the
             graph imposes a specified restriction.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NodeXL.Core.Graph.HasRestrictions(Microsoft.NodeXL.Core.GraphRestrictions)"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Graph.PerformExtraValidations">
             <summary>
             Gets or sets a flag specifying whether extra but possibly slow
             validations are performed.
             </summary>
            
             <value>
             true to perform extra validations, false otherwise.  The default value
             is false.  A value of true can dramatically slow graph operations.
             </value>
            
             <remarks>
             When this property is set to true, the graph performs extra validations
             during certain operations.  For example, when a vertex is added to the
             <see cref="P:Microsoft.NodeXL.Core.Graph.Vertices"/> collection, the graph checks whether the vertex
             already exists in the collection and throws an exception if it does.
            
             <para>
             Important note: The extra validations can be very slow, and therefore
             this property should be set to true only during development or after an
             unexpected problem occurs and the problem needs to be diagnosed.
             For example, checking whether a vertex already exists in the <see cref="P:Microsoft.NodeXL.Core.Graph.Vertices"/> collection is an O(n) operation, where n is the
             number of vertices in the graph.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.NodeXL.Core.Graph.EdgeAdded">
            <summary>
            Occurs when an edge is added to the <see cref="P:Microsoft.NodeXL.Core.Graph.Edges"/> collection.
            </summary>
        </member>
        <member name="E:Microsoft.NodeXL.Core.Graph.VertexAdded">
            <summary>
            Occurs when a vertex is added to the <see cref="P:Microsoft.NodeXL.Core.Graph.Vertices"/>
            collection.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Core.Graph.VertexMapper">
             <summary>
             Helper struct used for cloning the graph's vertices.
             </summary>
            
             <remarks>
             The <see cref="M:Microsoft.NodeXL.Core.Graph.Clone(System.Boolean,System.Boolean,Microsoft.NodeXL.Core.IGraphFactory,Microsoft.NodeXL.Core.IVertexFactory,Microsoft.NodeXL.Core.IEdgeFactory)"/> method uses this structure to map
             vertices in the original graph to the corresponding vertices in the
             in the new graph.
            
             <para>
             This struct is nested within the <see cref="T:Microsoft.NodeXL.Core.Graph"/> class.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Graph.VertexMapper.#ctor(System.Object,Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Initializes a new instance of the VertexMapper class.
             </summary>
            
             <param name="oOriginalVertexTag">
             Value of the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property of the
             original vertex.  Can be null.
             </param>
            
             <param name="oNewVertex">
             New vertex that corresponds to the original vertex.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Graph.VertexMapper.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.Graph.VertexMapper.m_oOriginalVertexTag">
            Value of the Tag property in the original vertex.  Can be null.
        </member>
        <member name="F:Microsoft.NodeXL.Core.Graph.VertexMapper.m_oNewVertex">
            New vertex that corresponds to the original vertex.  Can't be null.
        </member>
        <member name="P:Microsoft.NodeXL.Core.Graph.VertexMapper.OriginalVertexTag">
             <summary>
             Gets the value of the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property
             of the original vertex.
             </summary>
            
             <value>
             The value of the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property of
             the original vertex.  Can be null.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Graph.VertexMapper.NewVertex">
             <summary>
             Gets the new vertex that corresponds to the original vertex.
             </summary>
            
             <value>
             The new vertex that corresponds to the original vertex.  Can't be
             null.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Core.Vertex">
             <summary>
             Provides a default vertex implementation.
             </summary>
            
             <remarks>
             A vertex, also known as a node, is a point in a graph that can be connected
             to other vertices in the same graph.  The connections are called edges.
            
             <para>
             A <see cref="T:Microsoft.NodeXL.Core.Vertex"/> can be created via its constructor and then added
             to a graph via IGraph.Vertices.<see cref="M:Microsoft.NodeXL.Core.IVertexCollection.Add(Microsoft.NodeXL.Core.IVertex)"/>, or created and added to a graph
             at the same time via IGraph.Vertices.<see cref="M:Microsoft.NodeXL.Core.IVertexCollection.Add"/>.
             </para>
            
             <para>
             A vertex can be added to one graph only.  It cannot be added to a second
             graph unless it is first removed from the first graph.
             </para>
            
             <para>
             This class can be used as-is in many graphing applications.  You can also
             customize it via inheritance, or implement your own vertex class from
             scratch.  All vertex classes must implement the <see cref="T:Microsoft.NodeXL.Core.IVertex"/>
             interface.  If you implement a vertex class, you may also want to implement
             a corresponding <see cref="T:Microsoft.NodeXL.Core.IVertexFactory"/> class.
             </para>
            
             </remarks>
            
             <example>
             The following code creates a <see cref="T:Microsoft.NodeXL.Core.Vertex"/> object and adds it to a
             graph.
            
             <code>
             oGraph.Vertices.Add();
             </code>
            
             </example>
            
             <seealso cref="T:Microsoft.NodeXL.Core.IVertex"/>
             <seealso cref="T:Microsoft.NodeXL.Core.IVertexCollection"/>
        </member>
        <member name="T:Microsoft.NodeXL.Core.IVertex">
             <summary>
             Represents a vertex.
             </summary>
            
             <remarks>
             A vertex, also known as a node, is a point in a graph that can be connected
             to other vertices in the same graph.  The connections are called edges.
            
             <para>
             A vertex can be created via <see cref="M:Microsoft.NodeXL.Core.IVertexFactory.CreateVertex"/> and
             then added to a graph via IGraph.Vertices.<see cref="M:Microsoft.NodeXL.Core.IVertexCollection.Add(Microsoft.NodeXL.Core.IVertex)"/>, or created and added to a graph
             at the same time via IGraph.Vertices.<see cref="M:Microsoft.NodeXL.Core.IVertexCollection.Add"/>.
             </para>
            
             <para>
             A vertex can be added to one graph only.  It cannot be added to a second
             graph unless it is first removed from the first graph.
             </para>
            
             <para>
             The NodeXL system includes a <see cref="T:Microsoft.NodeXL.Core.Vertex"/> implementation that can
             be used as-is in many graphing applications.  You can also derive a class
             from <see cref="T:Microsoft.NodeXL.Core.Vertex"/> or implement your own custom vertex class from
             scratch.  The only requirement is that your custom class must implement
             <see cref="T:Microsoft.NodeXL.Core.IVertex"/>.
             </para>
            
             <para>
             If you implement a custom vertex class, you may also want to implement <see cref="T:Microsoft.NodeXL.Core.IVertexFactory"/> to allow the NodeXL system to create instances of
             your custom vertex.
             </para>
            
             </remarks>
            
             <seealso cref="T:Microsoft.NodeXL.Core.Vertex"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertex.Clone(System.Boolean,System.Boolean)">
             <overloads>
             Creates a copy of the vertex.
             </overloads>
            
             <summary>
             Creates a copy of the vertex, making the copy the same type as the
             original.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new vertex.
             (This is a shallow copy.  The objects pointed to by the original values
             are NOT cloned.)  If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new
             vertex is set to the same value as in the original vertex.  (This is a
             shallow copy.  The object pointed to by the original <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new vertex is set to
             null.
             </param>
            
             <returns>
             The copy of the vertex, as an <see cref="T:Microsoft.NodeXL.Core.IVertex"/>.
             </returns>
            
             <remarks>
             The new vertex is of the same type as the original.  It has no edges
             connected to it.  Its <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> is set to
             the same value as the original's, but it is assigned a new <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>.  Its <see cref="P:Microsoft.NodeXL.Core.IVertex.ParentGraph"/>
             is null and its <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> is the default value of <see cref="F:System.Drawing.Point.Empty"/>.
            
             <para>
             The new vertex can be added to the same graph or to a different graph.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertex.Clone(System.Boolean,System.Boolean,Microsoft.NodeXL.Core.IVertexFactory)">
             <summary>
             Creates a copy of the vertex, making the copy a specified type.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new vertex.
             (This is a shallow copy.  The objects pointed to by the original values
             are NOT cloned.)  If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new
             vertex is set to the same value as in the original vertex.  (This is a
             shallow copy.  The object pointed to by the original <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new vertex is set to
             null.
             </param>
            
             <param name="newVertexFactory">
             Object that can create a vertex.
             </param>
            
             <returns>
             The copy of the vertex, as an <see cref="T:Microsoft.NodeXL.Core.IVertex"/>.
             </returns>
            
             <remarks>
             The new vertex is created using <paramref name="newVertexFactory"/>.
             It has no edges connected to it.  Its <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> is set to the same value as the
             original's, but it is assigned a new <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>.  Its <see cref="P:Microsoft.NodeXL.Core.IVertex.ParentGraph"/> is null
             and its <see cref="P:Microsoft.NodeXL.Core.IVertex.Location"/> is the default value of <see cref="F:System.Drawing.Point.Empty"/>.
            
             <para>
             The new vertex can be added to the same graph or to a different graph.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertex.GetConnectingEdges(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Gets an array of edges that connect this vertex to a specified vertex.
             </summary>
            
             <param name="otherVertex">
             Other vertex.
             </param>
            
             <returns>
             An array of zero or more edges that connect this vertex to <paramref name="otherVertex"/>, as an array of <see cref="T:Microsoft.NodeXL.Core.IEdge"/> objects.
             </returns>
            
             <remarks>
             If there are no such edges, the returned array is empty.  The returned
             value is never null.
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is returned in
             the array only if <paramref name="otherVertex"/> is this vertex.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertex.IsIncidentEdge(Microsoft.NodeXL.Core.IEdge)">
             <summary>
             Determines whether an edge is incident to the vertex.
             </summary>
            
             <param name="edge">
             The edge to test.
             </param>
            
             <returns>
             true if <paramref name="edge" /> is incident to the vertex, false if
             not.
             </returns>
            
             <remarks>
             An incident edge is an edge that is connected to the vertex.
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertex.IsOutgoingEdge(Microsoft.NodeXL.Core.IEdge)">
             <summary>
             Determines whether an edge is one of the vertex's outgoing edges.
             </summary>
            
             <param name="edge">
             The edge to test.
             </param>
            
             <returns>
             true if <paramref name="edge" /> is one of the vertex's outgoing edges,
             false if not.
             </returns>
            
             <remarks>
             An outgoing edge is either a directed edge that has the vertex at its
             back, or an undirected edge connected to the vertex.
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IVertex.IsIncomingEdge(Microsoft.NodeXL.Core.IEdge)">
             <summary>
             Determines whether an edge is one of the vertex's incoming edges.
             </summary>
            
             <param name="edge">
             The edge to test.
             </param>
            
             <returns>
             true if <paramref name="edge" /> is one of the vertex's incoming edges,
             false if not.
             </returns>
            
             <remarks>
             An incoming edge is either a directed edge that has the vertex at its
             front, or an undirected edge connected to the vertex.
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IVertex.ParentGraph">
             <summary>
             Gets the graph that owns the vertex.
             </summary>
            
             <value>
             The graph that owns the vertex, as an <see cref="T:Microsoft.NodeXL.Core.IGraph"/>, or null if
             the vertex does not belong to a graph.
             </value>
            
             <remarks>
             This is a read-only property.  The implementation determines how this
             property gets set.  When the vertex is added to a graph, it must be set
             to that graph.  If the vertex is removed from a graph, it must be set
             to null.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IVertex.IncomingEdges">
             <summary>
             Gets an array of the vertex's incoming edges.
             </summary>
            
             <value>
             An array of the vertex's zero or more incoming edges, as an array of
             <see cref="T:Microsoft.NodeXL.Core.IEdge"/> objects.
             </value>
            
             <remarks>
             An incoming edge is either a directed edge that has this vertex at its
             front, or an undirected edge connected to this vertex.
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one incoming edge.
             </para>
            
             <para>
             If there are no incoming edges, the returned array is empty.  The
             returned value is never null.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.IVertex.OutgoingEdges"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IVertex.IncidentEdges"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IVertex.OutgoingEdges">
             <summary>
             Gets an array of the vertex's outgoing edges.
             </summary>
            
             <value>
             An array of the vertex's zero or more outgoing edges, as an array of
             <see cref="T:Microsoft.NodeXL.Core.IEdge"/> objects.
             </value>
            
             <remarks>
             An outgoing edge is either a directed edge that has this vertex at its
             back, or an undirected edge connected to this vertex.
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one outgoing edge.
             </para>
            
             <para>
             If there are no outgoing edges, the returned array is empty.  The
             returned value is never null.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.IVertex.IncomingEdges"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IVertex.IncidentEdges"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IVertex.IncidentEdges">
             <summary>
             Gets an array of the vertex's incident edges.
             </summary>
            
             <value>
             An array of the vertex's zero or more incident edges, as an array of
             <see cref="T:Microsoft.NodeXL.Core.IEdge"/> objects.
             </value>
            
             <remarks>
             An incident edge is an edge that is connected to the vertex.
            
             <para>
             The returned array is the union of the <see cref="P:Microsoft.NodeXL.Core.IVertex.IncomingEdges"/> and
             <see cref="P:Microsoft.NodeXL.Core.IVertex.OutgoingEdges"/> arrays.
             </para>
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one incident edge.
             </para>
            
             <para>
             If there are no incident edges, the returned array is empty.  The
             returned value is never null.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.IVertex.IncomingEdges"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IVertex.IncidentEdges"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IVertex.Degree">
             <summary>
             Gets the vertex's degree.
             </summary>
            
             <value>
             The vertex's degree, as an Int32.
             </value>
            
             <remarks>
             The degree of a vertex is the number of edges that are incident to it.
             (An incident edge is an edge that is connected to this vertex.)
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one incident edge.
             </para>
            
             <para>
             This property returns the same value as <see cref="P:Microsoft.NodeXL.Core.IVertex.IncidentEdges"/>.Length.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.IVertex.IncomingEdges"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IVertex.OutgoingEdges"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IVertex.IncidentEdges"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IVertex.PredecessorVertices">
             <summary>
             Gets an array of the vertex's predecessor vertices.
             </summary>
            
             <value>
             An array of the vertex's zero or more predecessor vertices, as an array
             of <see cref="T:Microsoft.NodeXL.Core.IVertex"/> objects.
             </value>
            
             <remarks>
             A predecessor vertex is a vertex at the other side of an incoming edge.
             (An incoming edge is either a directed edge that has this vertex at its
             front, or an undirected edge connected to this vertex.)
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is always
             considered an incoming edge.  Therefore, if there is an edge that
             connects this vertex to itself, then this vertex is included in the
             returned array.
             </para>
            
             <para>
             The predecessor vertices in the returned array are unique.  If two or
             more edges connect this vertex with another vertex, the other vertex is
             included once only.
             </para>
            
             <para>
             If there are no predecessor vertices, the returned array is empty.  The
             returned value is never null.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.IVertex.SuccessorVertices"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IVertex.AdjacentVertices"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IVertex.SuccessorVertices">
             <summary>
             Gets an array of the vertex's successor vertices.
             </summary>
            
             <value>
             An array of the vertex's zero or more successor vertices, as an array
             of <see cref="T:Microsoft.NodeXL.Core.IVertex"/> objects.
             </value>
            
             <remarks>
             A successor vertex is a vertex at the other side of an outgoing edge.
             (An outgoing edge is either a directed edge that has this vertex at its
             back, or an undirected edge connected to this vertex.)
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is always
             considered an outgoing edge.  Therefore, if there is an edge that
             connects this vertex to itself, then this vertex is included in the
             returned array.
             </para>
            
             <para>
             The successor vertices in the returned array are unique.  If two or
             more edges connect this vertex with another vertex, the other vertex is
             included once only.
             </para>
            
             <para>
             If there are no successor vertices, the returned array is empty.  The
             returned value is never null.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.IVertex.PredecessorVertices"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IVertex.AdjacentVertices"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IVertex.AdjacentVertices">
             <summary>
             Gets an array of the vertex's adjacent vertices.
             </summary>
            
             <value>
             An array of the vertex's zero or more adjacent vertices, as an array of
             <see cref="T:Microsoft.NodeXL.Core.IVertex"/> objects.
             </value>
            
             <remarks>
             An adjacent vertex is a vertex at the other side of an incident edge.
             (An incident edge is an edge that is connected to the vertex.)
            
             <para>
             The returned collection is the union of the <see cref="P:Microsoft.NodeXL.Core.IVertex.PredecessorVertices"/> and <see cref="P:Microsoft.NodeXL.Core.IVertex.SuccessorVertices"/>
             collections.
             </para>
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is always
             considered an incident edge.  Therefore, if there is an edge that
             connects this vertex to itself, then this vertex is included in the
             returned array.
             </para>
            
             <para>
             The adjacent vertices in the returned array are unique.  If two or
             more edges connect this vertex with another vertex, the other vertex is
             included once only.
             </para>
            
             <para>
             If there are no adjacent vertices, the returned array is empty.  The
             returned value is never null.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.IVertex.PredecessorVertices"/>
             <seealso cref="P:Microsoft.NodeXL.Core.IVertex.SuccessorVertices"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.IVertex.Location">
             <summary>
             Gets or sets the vertex's location.
             </summary>
            
             <value>
             The vertex's location as a <see cref="T:System.Drawing.PointF"/>.  The default value is
             cref="PointF.Empty" /&gt;.
             </value>
            
             <remarks>
             This property is set when the graph is laid out by
             ILayout.LayOutGraph and is read when the graph is drawn.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Vertex.#cctor">
            <overloads>
            Static constructor for the <see cref="T:Microsoft.NodeXL.Core.Vertex"/> class.
            </overloads>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Vertex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.Vertex"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Vertex.Clone(System.Boolean,System.Boolean)">
             <overloads>
             Creates a copy of the vertex.
             </overloads>
            
             <summary>
             Creates a copy of the vertex, making the copy the same type as the
             original.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new vertex.
             (This is a shallow copy.  The objects pointed to by the original values
             are NOT cloned.)  If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new
             vertex is set to the same value as in the original vertex.  (This is a
             shallow copy.  The object pointed to by the original <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new vertex is set to
             null.
             </param>
            
             <returns>
             The copy of the vertex, as an <see cref="T:Microsoft.NodeXL.Core.IVertex"/>.
             </returns>
            
             <remarks>
             The new vertex is of the same type as the original.  It has no edges
             connected to it.  Its <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> is set to
             the same value as the original's, but it is assigned a new <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>.  Its <see cref="P:Microsoft.NodeXL.Core.Vertex.ParentGraph"/>
             is null and its <see cref="P:Microsoft.NodeXL.Core.Vertex.Location"/> is the default value of <see cref="F:System.Drawing.Point.Empty"/>.
            
             <para>
             The new vertex can be added to the same graph or to a different graph.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Vertex.Clone(System.Boolean,System.Boolean,Microsoft.NodeXL.Core.IVertexFactory)">
             <summary>
             Creates a copy of the vertex, making the copy a specified type.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Microsoft.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new vertex.
             (This is a shallow copy.  The objects pointed to by the original values
             are NOT cloned.)  If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new
             vertex is set to the same value as in the original vertex.  (This is a
             shallow copy.  The object pointed to by the original <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Microsoft.NodeXL.Core.IMetadataProvider.Tag"/> property on the new vertex is set to
             null.
             </param>
            
             <param name="newVertexFactory">
             Object that can create a vertex.
             </param>
            
             <returns>
             The copy of the vertex, as an <see cref="T:Microsoft.NodeXL.Core.IVertex"/>.
             </returns>
            
             <remarks>
             The new vertex is created using <paramref name="newVertexFactory"/>.
             It has no edges connected to it.  Its <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> is set to the same value as the
             original's, but it is assigned a new <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.ID"/>.  Its <see cref="P:Microsoft.NodeXL.Core.Vertex.ParentGraph"/> is null
             and its <see cref="P:Microsoft.NodeXL.Core.Vertex.Location"/> is the default value of <see cref="F:System.Drawing.Point.Empty"/>.
            
             <para>
             The new vertex can be added to the same graph or to a different graph.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Vertex.GetConnectingEdges(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Gets an array of edges that connect this vertex to a specified vertex.
             </summary>
            
             <param name="otherVertex">
             Other vertex.
             </param>
            
             <returns>
             An array of zero or more edges that connect this vertex to <paramref name="otherVertex"/>, as an array of <see cref="T:Microsoft.NodeXL.Core.IEdge"/> objects.
             </returns>
            
             <remarks>
             If there are no such edges, the returned array is empty.  The returned
             value is never null.
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is returned in
             the array only if <paramref name="otherVertex"/> is this vertex.
             </para>
            
             <para>
             This method is an O(n) operation, where n is the number of edges
             incident to this vertex.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Vertex.IsIncidentEdge(Microsoft.NodeXL.Core.IEdge)">
             <summary>
             Determines whether an edge is incident to the vertex.
             </summary>
            
             <param name="edge">
             The edge to test.
             </param>
            
             <returns>
             true if <paramref name="edge" /> is incident to the vertex, false if
             not.
             </returns>
            
             <remarks>
             An incident edge is an edge that is connected to the vertex.
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Vertex.IsOutgoingEdge(Microsoft.NodeXL.Core.IEdge)">
             <summary>
             Determines whether an edge is one of the vertex's outgoing edges.
             </summary>
            
             <param name="edge">
             The edge to test.
             </param>
            
             <returns>
             true if <paramref name="edge" /> is one of the vertex's outgoing edges,
             false if not.
             </returns>
            
             <remarks>
             An outgoing edge is either a directed edge that has the vertex at its
             back, or an undirected edge connected to the vertex.
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Vertex.IsIncomingEdge(Microsoft.NodeXL.Core.IEdge)">
             <summary>
             Determines whether an edge is one of the vertex's incoming edges.
             </summary>
            
             <param name="edge">
             The edge to test.
             </param>
            
             <returns>
             true if <paramref name="edge" /> is one of the vertex's incoming edges,
             false if not.
             </returns>
            
             <remarks>
             An incoming edge is either a directed edge that has the vertex at its
             front, or an undirected edge connected to the vertex.
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Vertex.SetParentGraph(Microsoft.NodeXL.Core.IGraph)">
             <summary>
             Sets the graph that owns the vertex.
             </summary>
            
             <param name="oParentGraph">
             The graph that owns the vertex, as an <see cref="T:Microsoft.NodeXL.Core.IGraph"/>, or null if
             the vertex does not belong to a graph.
             </param>
             
             <remarks>
             This is the implementation-specific way that the <see cref="P:Microsoft.NodeXL.Core.Vertex.ParentGraph"/> property gets set.  When the vertex is added to a
             graph, it must be set to that graph.  If the vertex is removed from a
             graph, it must be set to null.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Vertex.IVertexToVertex(Microsoft.NodeXL.Core.IVertex,System.String,System.String)">
             <summary>
             Casts an <see cref="T:Microsoft.NodeXL.Core.IVertex"/> to a <see cref="T:Microsoft.NodeXL.Core.Vertex"/> object.
             </summary>
            
             <param name="oVertex">
             The <see cref="T:Microsoft.NodeXL.Core.IVertex"/> to cast to a <see cref="T:Microsoft.NodeXL.Core.Vertex"/> object.
             </param>
            
             <param name="sClassName">
             Name of the class calling this method.
             </param>
            
             <param name="sMethodOrPropertyName">
             Name of the method or property calling this method.
             </param>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.Vertex"/> object.
             </returns>
            
             <remarks>
             An <see cref="T:System.ApplicationException"/> is thrown if <paramref name="oVertex"/> is null or not of type <see cref="T:Microsoft.NodeXL.Core.Vertex"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Vertex.GetIncomingOrOutgoingEdges(System.Boolean,System.Boolean)">
             <summary>
             Gets an array of the vertex's incoming or outgoing edges.
             </summary>
            
             <param name="bIncludeIncoming">
             true to include the vertex's incoming edges.
             </param>
            
             <param name="bIncludeOutgoing">
             true to include the vertex's outgoing edges.
             </param>
            
             <returns>
             An array of the vertex's zero or more incoming or outgoing edges (or
             both), as an array of <see cref="T:Microsoft.NodeXL.Core.IEdge"/> objects.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Vertex.GetPredecessorOrSuccessorVertices(System.Boolean,System.Boolean)">
             <summary>
             Gets an array of the vertex's predecessor or successor vertices, or
             both.
             </summary>
            
             <param name="bIncludePredecessor">
             true to include the vertex's predecessor vertices.
             </param>
            
             <param name="bIncludeSuccessor">
             true to include the vertex's successor vertices.
             </param>
            
             <returns>
             An array of the vertex's zero or more predecessor or successor
             vertices, as an array of <see cref="T:Microsoft.NodeXL.Core.IVertex"/> objects.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Vertex.RemoveIncidentEdges">
            <summary>
            Removes all edges incident to this vertex.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Vertex.AppendPropertiesToString(System.Text.StringBuilder,System.Int32,System.String)">
             <summary>
             Appends the derived class's public property values to a String.
             </summary>
            
             <param name="oStringBuilder">
             Object to append to.
             </param>
            
             <param name="iIndentationLevel">
             Current indentation level.  Level 0 is "no indentation."
             </param>
            
             <param name="sFormat">
             The format to use, either "G", "P", or "D".  See <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/> for details.
             </param>
            
             <remarks>
             This method calls <see cref="M:Microsoft.NodeXL.Core.ToStringUtil.AppendPropertyToString(System.Text.StringBuilder,System.Int32,System.String,System.Object,System.Boolean)"/> for each of the
             derived class's public properties.  It is used in the implementation of
             <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Vertex.GetEdgeCollection(Microsoft.NodeXL.Core.EdgeCollection@)">
             <summary>
             Gets the <see cref="T:Microsoft.NodeXL.Core.EdgeCollection"/> owned by the parent graph.
             </summary>
            
             <param name="oEdgeCollection">
             Where the <see cref="T:Microsoft.NodeXL.Core.EdgeCollection"/> gets stored if true is
             returned.
             </param>
            
             <returns>
             true if the <see cref="T:Microsoft.NodeXL.Core.EdgeCollection"/> was stored at <paramref name="oEdgeCollection"/>, false if the vertex does not belong to a
             graph.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.Vertex.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.Vertex.m_oIDGenerator">
            Generates unique IDs.
        </member>
        <member name="F:Microsoft.NodeXL.Core.Vertex.m_oParentGraph">
            Graph to which this vertex has been added, or null if does not belong
            to a graph.
        </member>
        <member name="F:Microsoft.NodeXL.Core.Vertex.m_oFirstIncidentEdgeNode">
            First node in the vertex's group of incident edges, or null if the
            vertex has no incident edges.  The edges are maintained by
            EdgeCollection.
        </member>
        <member name="F:Microsoft.NodeXL.Core.Vertex.m_oLocation">
            The vertex's location, or Point.Empty if Location hasn't been set yet.
        </member>
        <member name="P:Microsoft.NodeXL.Core.Vertex.ParentGraph">
             <summary>
             Gets the graph that owns the vertex.
             </summary>
            
             <value>
             The graph that owns the vertex, as an <see cref="T:Microsoft.NodeXL.Core.IGraph"/>, or null if
             the vertex does not belong to a graph.
             </value>
            
             <remarks>
             This is a read-only property.  When the vertex is added to a graph,
             this property is automatically set to that graph.  If the vertex is
             removed from the graph, this property is set to null.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Vertex.IncomingEdges">
             <summary>
             Gets an array of the vertex's incoming edges.
             </summary>
            
             <value>
             An array of the vertex's zero or more incoming edges, as an array of
             <see cref="T:Microsoft.NodeXL.Core.IEdge"/> objects.
             </value>
            
             <remarks>
             An incoming edge is either a directed edge that has this vertex at its
             front, or an undirected edge connected to this vertex.
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one incoming edge.
             </para>
            
             <para>
             If there are no incoming edges, the returned array is empty.  The
             returned value is never null.
             </para>
            
             <para>
             This property is an O(n) operation, where n is the number of edges
             incident to this vertex.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.Vertex.OutgoingEdges"/>
             <seealso cref="P:Microsoft.NodeXL.Core.Vertex.IncidentEdges"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Vertex.OutgoingEdges">
             <summary>
             Gets an array of the vertex's outgoing edges.
             </summary>
            
             <value>
             An array of the vertex's zero or more outgoing edges, as an array of
             <see cref="T:Microsoft.NodeXL.Core.IEdge"/> objects.
             </value>
            
             <remarks>
             An outgoing edge is either a directed edge that has this vertex at its
             back, or an undirected edge connected to this vertex.
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one outgoing edge.
             </para>
            
             <para>
             If there are no outgoing edges, the returned array is empty.  The
             returned value is never null.
             </para>
            
             <para>
             This property is an O(n) operation, where n is the number of edges
             incident to this vertex.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.Vertex.IncomingEdges"/>
             <seealso cref="P:Microsoft.NodeXL.Core.Vertex.IncidentEdges"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Vertex.IncidentEdges">
             <summary>
             Gets an array of the vertex's incident edges.
             </summary>
            
             <value>
             An array of the vertex's zero or more incident edges, as an array of
             <see cref="T:Microsoft.NodeXL.Core.IEdge"/> objects.
             </value>
            
             <remarks>
             An incident edge is an edge that is connected to the vertex.
            
             <para>
             The returned array is the union of the <see cref="P:Microsoft.NodeXL.Core.Vertex.IncomingEdges"/> and
             <see cref="P:Microsoft.NodeXL.Core.Vertex.OutgoingEdges"/> arrays.
             </para>
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one incident edge.
             </para>
            
             <para>
             If there are no incident edges, the returned array is empty.  The
             returned value is never null.
             </para>
            
             <para>
             This property is an O(n) operation, where n is the number of edges
             incident to this vertex.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.Vertex.IncomingEdges"/>
             <seealso cref="P:Microsoft.NodeXL.Core.Vertex.IncidentEdges"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Vertex.Location">
             <summary>
             Gets or sets the vertex's location.
             </summary>
            
             <value>
             The vertex's location as a <see cref="T:System.Drawing.PointF"/>.  The default value is
             cref="PointF.Empty" /&gt;.
             </value>
            
             <remarks>
             This property is set when the graph is laid out by
             ILayout.LayOutGraph and is read when the graph is drawn.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Vertex.Degree">
             <summary>
             Gets the vertex's degree.
             </summary>
            
             <value>
             The vertex's degree, as an Int32.
             </value>
            
             <remarks>
             The degree of a vertex is the number of edges that are incident to it.
             (An incident edge is an edge that is connected to this vertex.)
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one incident edge.
             </para>
            
             <para>
             This property returns the same value as <see cref="P:Microsoft.NodeXL.Core.Vertex.IncidentEdges"/>.Length.
             </para>
            
             <para>
             This property is an O(n) operation, where n is the number of edges
             incident to this vertex.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.Vertex.IncomingEdges"/>
             <seealso cref="P:Microsoft.NodeXL.Core.Vertex.OutgoingEdges"/>
             <seealso cref="P:Microsoft.NodeXL.Core.Vertex.IncidentEdges"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Vertex.PredecessorVertices">
             <summary>
             Gets an array of the vertex's predecessor vertices.
             </summary>
            
             <value>
             An array of the vertex's zero or more predecessor vertices, as an array
             of <see cref="T:Microsoft.NodeXL.Core.IVertex"/> objects.
             </value>
            
             <remarks>
             A predecessor vertex is a vertex at the other side of an incoming edge.
             (An incoming edge is either a directed edge that has this vertex at its
             front, or an undirected edge connected to this vertex.)
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is always
             considered an incoming edge.  Therefore, if there is an edge that
             connects this vertex to itself, then this vertex is included in the
             returned array.
             </para>
            
             <para>
             The predecessor vertices in the returned array are unique.  If two or
             more incoming edges connect this vertex with another vertex, the other
             vertex is included once only.
             </para>
            
             <para>
             If there are no predecessor vertices, the returned array is empty.  The
             returned value is never null.
             </para>
            
             <para>
             This property is an O(n) operation, where n is the number of edges
             incident to this vertex.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.Vertex.SuccessorVertices"/>
             <seealso cref="P:Microsoft.NodeXL.Core.Vertex.AdjacentVertices"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Vertex.SuccessorVertices">
             <summary>
             Gets an array of the vertex's successor vertices.
             </summary>
            
             <value>
             An array of the vertex's zero or more successor vertices, as an array
             of <see cref="T:Microsoft.NodeXL.Core.IVertex"/> objects.
             </value>
            
             <remarks>
             A successor vertex is a vertex at the other side of an outgoing edge.
             (An outgoing edge is either a directed edge that has this vertex at its
             back, or an undirected edge connected to this vertex.)
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is always
             considered an outgoing edge.  Therefore, if there is an edge that
             connects this vertex to itself, then this vertex is included in the
             returned array.
             </para>
            
             <para>
             The successor vertices in the returned array are unique.  If two or
             more outgoing edges connect this vertex with another vertex, the other
             vertex is included once only.
             </para>
            
             <para>
             If there are no successor vertices, the returned array is empty.  The
             returned value is never null.
             </para>
            
             <para>
             This property is an O(n) operation, where n is the number of edges
             incident to this vertex.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.Vertex.PredecessorVertices"/>
             <seealso cref="P:Microsoft.NodeXL.Core.Vertex.AdjacentVertices"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Vertex.AdjacentVertices">
             <summary>
             Gets an array of the vertex's adjacent vertices.
             </summary>
            
             <value>
             An array of the vertex's zero or more adjacent vertices, as an array of
             <see cref="T:Microsoft.NodeXL.Core.IVertex"/> objects.
             </value>
            
             <remarks>
             An adjacent vertex is a vertex at the other side of an incident edge.
             (An incident edge is an edge that is connected to the vertex.)
            
             <para>
             The returned collection is the union of the <see cref="P:Microsoft.NodeXL.Core.Vertex.PredecessorVertices"/> and <see cref="P:Microsoft.NodeXL.Core.Vertex.SuccessorVertices"/>
             collections.
             </para>
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is always
             considered an incident edge.  Therefore, if there is an edge that
             connects this vertex to itself, then this vertex is included in the
             returned array.
             </para>
            
             <para>
             The adjacent vertices in the returned array are unique.  If two or
             more edges connect this vertex with another vertex, the other vertex is
             included once only.
             </para>
            
             <para>
             If there are no adjacent vertices, the returned array is empty.  The
             returned value is never null.
             </para>
            
             <para>
             This property is an O(n) operation, where n is the number of edges
             incident to this vertex.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NodeXL.Core.Vertex.PredecessorVertices"/>
             <seealso cref="P:Microsoft.NodeXL.Core.Vertex.SuccessorVertices"/>
        </member>
        <member name="P:Microsoft.NodeXL.Core.Vertex.FirstIncidentEdgeNode">
             <summary>
             Gets or sets the first node in the vertex's group of incident edges.
             </summary>
            
             <value>
             First node in the vertex's group of incident edges, or null if the
             vertex has no incident edges.
             </value>
            
             <remarks>
             This is used by <see cref="T:Microsoft.NodeXL.Core.EdgeCollection"/>, which maintains the
             incident edge groups for all vertices.
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Core.VertexFactory">
             <summary>
             Class that knows how to create <see cref="T:Microsoft.NodeXL.Core.Vertex"/> objects.
             </summary>
            
             <remarks>
             This class implements <see cref="T:Microsoft.NodeXL.Core.IVertexFactory"/>, which allows the core
             NodeXL system to create vertex objects without knowing their type.
             </remarks>
            
             <seealso cref="T:Microsoft.NodeXL.Core.Vertex"/>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.VertexFactory"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexFactory.CreateVertexCore">
             <summary>
             Creates a <see cref="T:Microsoft.NodeXL.Core.Vertex"/> object.
             </summary>
            
             <returns>
             The <see cref="T:Microsoft.NodeXL.Core.IVertex"/> interface on a newly created <see cref="T:Microsoft.NodeXL.Core.Vertex"/> object.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.VertexFactory.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1">
             <summary>
             Sorts a collection of vertices on a specified metadata value.
             </summary>
            
             <typeparam name="TValue">
             The type of the values that will be sorted on.
             </typeparam>
            
             <remarks>
             Use this class when you want to sort a collection of vertices on a metadata
             value.  Set the metadata value on each vertex in the collection, then call
             one of the <see cref="M:Microsoft.NodeXL.Core.IVertexSorter.Sort(Microsoft.NodeXL.Core.IVertexCollection)"/> methods.
            
             <para>
             The <see cref="M:Microsoft.NodeXL.Core.IVertexSorter.Sort(Microsoft.NodeXL.Core.IVertexCollection)"/> methods optimize
             sort performance by caching the metadata values instead of reading them
             every time two vertices are compared.
             </para>
            
             </remarks>
            
             <example>
             The following code sorts a graph's vertices in ascending order of a
             metadata value named Weight, which is of type Int32.  The code assumes that
             a Weight metadata value has been set on every vertex.
            
             <code>
             ByMetadataVertexSorter oByMetadataVertexSorter =
                 new ByMetadataVertexSorter&lt;Int32&gt;("Weight")
            
             IVertex [] aoSortedVertices = oByMetadataVertexSorter.Sort(oGraph.Vertices);
             </code>
            
             </example>
        </member>
        <member name="M:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1"/> class.
             </summary>
            
             <param name="sortKey">
             The metadata key whose values should be sorted on.  Can't be null or
             empty.  The key must exist on each vertex and the corresponding value
             must be of type TValue.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1.SortCore(Microsoft.NodeXL.Core.IVertex[])">
             <summary>
             Sorts an array of vertices in place.
             </summary>
            
             <param name="vertices">
             Array to sort.  The array is sorted in place.
             </param>
            
             <returns>
             Sorted <paramref name="vertices" />.
             </returns>
            
             <remarks>
             This method sorts <paramref name="vertices" /> in place and returns the
             sorted vertices.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1.m_sSortKey">
            Key whose values should be sorted on.
        </member>
        <member name="F:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1.m_bSortAscending">
            true to sort in ascending order, false to sort in descending order.
        </member>
        <member name="P:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1.SortKey">
             <summary>
             Gets or sets the key whose values should be sorted on.
             </summary>
            
             <value>
             The metadata key whose values should be sorted on.  Can't be null or
             empty.
             </value>
            
             <remarks>
             The key must exist on each vertex and the corresponding value must be
             of type TValue.
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1.SortAscending">
             <summary>
             Gets or sets a flag specifying whether the sort is ascending or
             descending.
             </summary>
            
             <value>
             true to sort the collection of vertices in ascending order of the
             values specified by <see cref="P:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1.SortKey"/>, false to sort the
             collection in descending order.  The default value is true.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1.ValueComparer">
             <summary>
             Compares two metadata values.
             </summary>
            
             <remarks>
             This is nested within the MetadataSorter class, so its type is
             VertexSorter.Comparer.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1.ValueComparer.#ctor(System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1.ValueComparer"/>
             class.
             </summary>
            
             <param name="sortAscending">
             true to sort in ascending order of metadata values, false to sort
             in descending order.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1.ValueComparer.Compare(`0,`0)">
             <summary>
             Compares two values.
             </summary>
            
             <param name="value1">
             First value to compare.
             </param>
            
             <param name="value2">
             Second value to compare.
             </param>
            
             <returns>
             See <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)"/>.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1.ValueComparer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.ByMetadataVertexSorter`1.ValueComparer.m_bSortAscending">
            true to sort in ascending order, false to sort in descending order.
        </member>
        <member name="T:Microsoft.NodeXL.Core.IDGenerator">
             <summary>
             Generates a sequence of unique IDs.
             </summary>
            
             <remarks>
             Call <see cref="M:Microsoft.NodeXL.Core.IDGenerator.GetNextID"/> to get a unique integer ID.  By default, <see cref="M:Microsoft.NodeXL.Core.IDGenerator.GetNextID"/> generates a simple integer sequence that starts at 1.
            
             <para>
             This class can be used to generate unique IDs for graphs, vertices, and
             edges.  The class responsible for creating objects of one of these types
             should define a static field of type <see cref="T:Microsoft.NodeXL.Core.IDGenerator"/>, then call
             <see cref="M:Microsoft.NodeXL.Core.IDGenerator.GetNextID"/> every time an object of that type is created.
             This results in independent sequences for each type.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IDGenerator.#ctor">
             <overloads>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.IDGenerator"/> class.
             </overloads>
            
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.IDGenerator"/> class with
             a first ID of 1.
             </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IDGenerator.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Core.IDGenerator"/> class with
             a specified first ID.
             </summary>
            
             <param name="firstID">
             First ID to return from <see cref="M:Microsoft.NodeXL.Core.IDGenerator.GetNextID"/>.  Can't be <see cref="F:System.Int32.MaxValue"/>.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IDGenerator.GetNextID">
             <summary>
             Returns the ID to use for the next created object.
             </summary>
            
             <returns>
             The ID to use for the next created object.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Core.IDGenerator.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Core.IDGenerator.m_iNextID">
            ID to use for the next created object.
        </member>
    </members>
</doc>
