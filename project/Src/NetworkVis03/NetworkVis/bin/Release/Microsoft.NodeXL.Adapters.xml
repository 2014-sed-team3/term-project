<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.NodeXL.Adapters</name>
    </assembly>
    <members>
        <member name="T:Microsoft.NodeXL.Adapters.PajekGraphAdapter">
             <summary>
             Converts a graph to and from a subset of the Pajek format.
             </summary>
            
             <remarks>
             This class supports only a subset of the Pajek format, which is roughly
             described in the Pajek Reference Manual at
             http://vlado.fmf.uni-lj.si/pub/networks/pajek/doc/pajekman.pdf.
            
             <para>
             This is the supported subset:
             </para>
            
             <code>
             *vertices N
             1 "vertex 1 name" [x y z]
             2 "vertex 2 name" [x y z]
             ...
             N "vertex N name" [x y z]
            
             *edges
             Vi Vj weight
             Vm Vn weight
             ...
            
             *edgeslist
             Vi Vj Vk ...
             Vm Vn ...
             ...
            
             *arcs
             Vi Vj weight
             Vm Vn weight
             ...
            
             *arcslist
             Vi Vj Vk ...
             Vm Vn ...
             ...
             </code>
            
             <para>
             The delimiter is any combination of spaces and tabs.
             </para>
            
             <para>
             All sections are optional.  If there is at least one section, there must be
             one and only one *vertices section and it must be the first section.  If
             edges are specified with *edges and *edgeslist sections only, the graph
             is considered undirected.  If edges are specified with *arcs and *arcslist
             sections only, the graph is considered directed.  If there are both
             undirected and directed edges, the graph is considered mixed.
             </para>
            
             <para>
             Empty lines are ignored.  Lines starting with slash-asterisk are considered
             comments and are skipped.
             </para>
            
             <para>
             Everything is case-insensitive except the vertex names.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Adapters.GraphAdapterBase">
             <summary>
             Base class for graph adapters.
             </summary>
            
             <remarks>
             This abstract class can serve as a base class for <see cref="T:Microsoft.NodeXL.Adapters.IGraphAdapter"/> implementations.  Its implementations of the <see cref="T:Microsoft.NodeXL.Adapters.IGraphAdapter"/> public methods provide error checking but defer the
             actual work to protected abstract methods.
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Adapters.AdapterBase">
            <summary>
            Base class for most classes in the <see cref="N:Microsoft.NodeXL.Adapters"/>
            namespace.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.AdapterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Adapters.AdapterBase"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.AdapterBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Microsoft.NodeXL.Adapters.AdapterBase.ArgumentChecker">
             <summary>
             Gets a new initialized <see cref="P:Microsoft.NodeXL.Adapters.AdapterBase.ArgumentChecker"/> object.
             </summary>
            
             <value>
             A new initialized <see cref="P:Microsoft.NodeXL.Adapters.AdapterBase.ArgumentChecker"/> object.
             </value>
            
             <remarks>
             The returned object can be used to check the validity of property
             values and method parameters.
            
             <para>
             The <see cref="T:Microsoft.NodeXL.Core.NodeXLBase"/> implementation of this property cannot be
             used because it's marked as internal.  The reason it's internal is
             explained in the comments for the <see cref="P:Microsoft.NodeXL.Adapters.AdapterBase.ArgumentChecker"/> class.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Adapters.IGraphAdapter">
             <summary>
             Supports conversion of a graph to and from a specific data format.
             </summary>
            
             <remarks>
             The NodeXL core components do not know anything about the various formats
             commonly used to store graph data.  Instead, data conversion is
             accomplished with a family of classes that implement the <see cref="T:Microsoft.NodeXL.Adapters.IGraphAdapter"/> interface.  Each such class knows how to load a
             graph with data that is in a particular format, and to save a graph to that
             format.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.IGraphAdapter.LoadGraph(System.String)">
             <overloads>
             Creates a graph and loads it with graph data.
             </overloads>
            
             <summary>
             Creates a graph of type <see cref="T:Microsoft.NodeXL.Core.Graph"/> and loads it with graph
             data read from a file.
             </summary>
            
             <param name="filename">
             Full path to the file containing graph data.
             </param>
            
             <returns>
             A new <see cref="T:Microsoft.NodeXL.Core.Graph"/> loaded with graph data read from <paramref name="filename"/>.
             </returns>
            
             <remarks>
             This method creates a <see cref="T:Microsoft.NodeXL.Core.Graph"/> and loads it with the graph
             data read from <paramref name="filename"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.IGraphAdapter.LoadGraph(Microsoft.NodeXL.Core.IGraphFactory,System.IO.Stream)">
             <summary>
             Creates a graph of a specified type and loads it with graph data read
             from a <see cref="T:System.IO.Stream"/>.
             </summary>
            
             <param name="graphFactory">
             Object that knows how to create a graph.
             </param>
            
             <param name="stream">
             <see cref="T:System.IO.Stream"/> containing graph data.
             </param>
            
             <returns>
             A new graph created by <paramref name="graphFactory"/> and loaded with
             graph data read from <paramref name="stream"/>.
             </returns>
            
             <remarks>
             This method creates a graph using <paramref name="graphFactory"/> and
             loads it with the graph data read from <paramref name="stream"/>.  It
             does not close <paramref name="stream"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.IGraphAdapter.LoadGraph(Microsoft.NodeXL.Core.IGraphFactory,System.String)">
             <summary>
             Creates a graph of a specified type and loads it with graph data read
             from a <see cref="T:System.String"/>.
             </summary>
            
             <param name="graphFactory">
             Object that knows how to create a graph.
             </param>
            
             <param name="theString">
             <see cref="T:System.String"/> containing graph data.
             </param>
            
             <returns>
             A new graph created by <paramref name="graphFactory"/> and loaded with
             graph data read from <paramref name="theString"/>.
             </returns>
            
             <remarks>
             This method creates a graph using <paramref name="graphFactory"/> and
             loads it with the graph data read from <paramref name="theString"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.IGraphAdapter.SaveGraph(Microsoft.NodeXL.Core.IGraph,System.String)">
             <overloads>
             Saves graph data.
             </overloads>
            
             <summary>
             Saves graph data to a file.
             </summary>
            
             <param name="graph">
             Graph to save.
             </param>
            
             <param name="filename">
             Full path to the file to save to.  If the file exists, it gets
             overwritten.
             </param>
            
             <remarks>
             This method saves <paramref name="graph"/> to <paramref name="filename"/>.
            
             <para>
             If the <see cref="P:Microsoft.NodeXL.Core.IGraph.Directedness"/> property on <paramref name="graph"/> is set to a value that is incompatible with the graph
             adapter, an exception is thrown.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.IGraphAdapter.SaveGraph(Microsoft.NodeXL.Core.IGraph,System.IO.Stream)">
             <summary>
             Saves graph data to a <see cref="T:System.IO.Stream"/>.
             </summary>
            
             <param name="graph">
             Graph to save.
             </param>
            
             <param name="stream">
             <see cref="T:System.IO.Stream"/> to save the graph data to.
             </param>
            
             <remarks>
             This method saves <paramref name="graph"/> to <paramref name="stream"/>.  It does not close <paramref name="stream"/>.
            
             <para>
             If the <see cref="P:Microsoft.NodeXL.Core.IGraph.Directedness"/> property on <paramref name="graph"/> is set to a value that is incompatible with the graph
             adapter, an exception is thrown.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.IGraphAdapter.SupportsDirectedness(Microsoft.NodeXL.Core.GraphDirectedness)">
             <summary>
             Returns a flag indicating whether the graph adapter can be used with
             graphs of a specified <see cref="T:Microsoft.NodeXL.Core.GraphDirectedness"/>.
             </summary>
            
             <param name="directedness">
             A <see cref="T:Microsoft.NodeXL.Core.GraphDirectedness"/> value.
             </param>
            
             <returns>
             true if the graph adapter can be used with graphs of the specified
             directedness.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Adapters.GraphAdapterBase"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.LoadGraph(System.String)">
             <overloads>
             Creates a graph and loads it with graph data.
             </overloads>
            
             <summary>
             Creates a graph of type <see cref="T:Microsoft.NodeXL.Core.Graph"/> and loads it with graph
             data read from a file.
             </summary>
            
             <param name="filename">
             Full path to the file containing graph data.
             </param>
            
             <returns>
             A new <see cref="T:Microsoft.NodeXL.Core.Graph"/> loaded with graph data read from <paramref name="filename"/>.
             </returns>
            
             <remarks>
             This method creates a <see cref="T:Microsoft.NodeXL.Core.Graph"/> and loads it with the graph
             data read from <paramref name="filename"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.LoadGraph(Microsoft.NodeXL.Core.IGraphFactory,System.String)">
             <summary>
             Creates a graph of a specified type and loads it with graph data read
             from a <see cref="T:System.String"/>.
             </summary>
            
             <param name="graphFactory">
             Object that knows how to create a graph.
             </param>
            
             <param name="theString">
             <see cref="T:System.String"/> containing graph data.
             </param>
            
             <returns>
             A new graph created by <paramref name="graphFactory"/> and loaded with
             graph data read from <paramref name="theString"/>.
             </returns>
            
             <remarks>
             This method creates a graph using <paramref name="graphFactory"/> and
             loads it with the graph data read from <paramref name="theString"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.LoadGraph(Microsoft.NodeXL.Core.IGraphFactory,System.IO.Stream)">
             <summary>
             Creates a graph of a specified type and loads it with graph data read
             from a <see cref="T:System.IO.Stream"/>.
             </summary>
            
             <param name="graphFactory">
             Object that knows how to create a graph.
             </param>
            
             <param name="stream">
             <see cref="T:System.IO.Stream"/> containing graph data.
             </param>
            
             <returns>
             A new graph created by <paramref name="graphFactory"/> and loaded with
             graph data read from <paramref name="stream"/>.
             </returns>
            
             <remarks>
             This method creates a graph using <paramref name="graphFactory"/> and
             loads it with the graph data read from <paramref name="stream"/>.  It
             does not close <paramref name="stream"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.SaveGraph(Microsoft.NodeXL.Core.IGraph,System.String)">
             <overloads>
             Saves graph data.
             </overloads>
            
             <summary>
             Saves graph data to a file.
             </summary>
            
             <param name="graph">
             Graph to save.
             </param>
            
             <param name="filename">
             Full path to the file to save to.  If the file exists, it gets
             overwritten.
             </param>
            
             <remarks>
             This method saves <paramref name="graph"/> to <paramref name="filename"/>.
            
             <para>
             If the <see cref="P:Microsoft.NodeXL.Core.IGraph.Directedness"/> property on <paramref name="graph"/> is set to a value that is incompatible with the graph
             adapter, an exception is thrown.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.SaveGraph(Microsoft.NodeXL.Core.IGraph,System.IO.Stream)">
             <summary>
             Saves graph data to a <see cref="T:System.IO.Stream"/>.
             </summary>
            
             <param name="graph">
             Graph to save.
             </param>
            
             <param name="stream">
             <see cref="T:System.IO.Stream"/> to save the graph data to.
             </param>
            
             <remarks>
             This method saves <paramref name="graph"/> to <paramref name="stream"/>.  It does not close <paramref name="stream"/>.
            
             <para>
             If the <see cref="P:Microsoft.NodeXL.Core.IGraph.Directedness"/> property on <paramref name="graph"/> is set to a value that is incompatible with the graph
             adapter, an exception is thrown.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.SupportsDirectedness(Microsoft.NodeXL.Core.GraphDirectedness)">
             <summary>
             Returns a flag indicating whether the graph adapter can be used with
             graphs of a specified <see cref="T:Microsoft.NodeXL.Core.GraphDirectedness"/>.
             </summary>
            
             <param name="directedness">
             A <see cref="T:Microsoft.NodeXL.Core.GraphDirectedness"/> value.
             </param>
            
             <returns>
             true if the graph adapter can be used with graphs of the specified
             directedness.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.GetSupportedDirectedness(System.Boolean@,System.Boolean@,System.Boolean@)">
             <summary>
             Gets a set of flags indicating the directedness of the graphs that the
             implementation can load and save.
             </summary>
            
             <param name="supportsDirected">
             Gets set to true if the implementation can load and save directed
             graphs.
             </param>
            
             <param name="supportsUndirected">
             Gets set to true if the implementation can load and save undirected
             graphs.
             </param>
            
             <param name="supportsMixed">
             Gets set to true if the implementation can load and save mixed graphs.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.LoadGraphCore(Microsoft.NodeXL.Core.IGraphFactory,System.IO.Stream)">
             <summary>
             Creates a graph of a specified type and loads it with graph data read
             from a <see cref="T:System.IO.Stream"/>.
             </summary>
            
             <param name="graphFactory">
             Object that can create a graph.
             </param>
            
             <param name="stream">
             <see cref="T:System.IO.Stream"/> containing graph data.
             </param>
            
             <returns>
             A new graph created by <paramref name="graphFactory"/> and loaded with
             graph data read from <paramref name="stream"/>.
             </returns>
            
             <remarks>
             This method creates a graph using <paramref name="graphFactory"/> and
             loads it with the graph data read from <paramref name="stream"/>.  It
             does not close <paramref name="stream"/>.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.SaveGraphCore(Microsoft.NodeXL.Core.IGraph,System.IO.Stream)">
             <summary>
             Saves graph data to a stream.
             </summary>
            
             <param name="graph">
             Graph to save.
             </param>
            
             <param name="stream">
             Stream to save the graph data to.
             </param>
            
             <remarks>
             This method saves <paramref name="graph" /> to <paramref
             name="stream" />.  It does not close <paramref name="stream" />.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.CheckGraphDirectedness(Microsoft.NodeXL.Core.IGraph,System.Boolean)">
             <summary>
             Checks whether the directedness of a graph is supported by the
             implementation.
             </summary>
            
             <param name="graph">
             Graph to check.
             </param>
            
             <param name="loading">
             true if this method is being called while a graph is being loaded,
             false if it is being called while a graph is being saved.
             </param>
            
             <remarks>
             An exception is thrown if the directedness of <paramref name="graph" />
             is not supported by the implementation.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.VertexCountToString(System.Int32)">
             <summary>
             Returns a string describing a vertex count.
             </summary>
            
             <param name="vertices">
             Number of vertices.  Must be non-negative.
             </param>
            
             <returns>
             A string describing <paramref name="vertices" />, in the format
             "N vertices".
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.OnLoadFormatError(System.String,System.Int32,System.String)">
             <summary>
             Handles a formatting error detected by <see cref="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.LoadGraphCore(Microsoft.NodeXL.Core.IGraphFactory,System.IO.Stream)"/>.
             </summary>
            
             <param name="line">
             Line that is incorrectly formatted.  Can't be null.
             </param>
            
             <param name="lineNumber">
             One-based line number of <paramref name="line"/>.
             </param>
            
             <param name="expectedFormat">
             Description of what a correctly-formatted line should look like.
             </param>
            
             <remarks>
             If the derived class reads from a line-oriented text file and detects
             a formatting error on a line, it should handle the error by calling
             this method or <see cref="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.OnLoadFormatError2(System.String,System.Int32,System.String)"/>.  A <see cref="T:System.FormatException"/> is thrown.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.OnLoadFormatError2(System.String,System.Int32,System.String)">
             <summary>
             Handles a formatting error detected by <see cref="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.LoadGraphCore(Microsoft.NodeXL.Core.IGraphFactory,System.IO.Stream)"/>.
             </summary>
            
             <param name="line">
             Line that is incorrectly formatted.  Can't be null.
             </param>
            
             <param name="lineNumber">
             One-based line number of <paramref name="line"/>.
             </param>
            
             <param name="errorDetails">
             Description of the formatting error.
             </param>
            
             <remarks>
             If the derived class reads from a line-oriented text file and detects
             a formatting error on a line, it should handle the error by calling
             this method or <see cref="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.OnLoadFormatError(System.String,System.Int32,System.String)"/>.  A <see cref="T:System.FormatException"/> is thrown.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.GraphAdapterBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Adapters.PajekGraphAdapter.DefaultEdgeWeight">
            Default edge weight to use when an edge weight isn't specified.
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.PajekGraphAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Adapters.PajekGraphAdapter"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.PajekGraphAdapter.GetSupportedDirectedness(System.Boolean@,System.Boolean@,System.Boolean@)">
             <summary>
             Gets a set of flags indicating the directedness of the graphs that the
             implementation can load and save.
             </summary>
            
             <param name="supportsDirected">
             Gets set to true if the implementation can load and save directed
             graphs.
             </param>
            
             <param name="supportsUndirected">
             Gets set to true if the implementation can load and save undirected
             graphs.
             </param>
            
             <param name="supportsMixed">
             Gets set to true if the implementation can load and save mixed graphs.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.PajekGraphAdapter.LoadGraphCore(Microsoft.NodeXL.Core.IGraphFactory,System.IO.Stream)">
             <summary>
             Creates a graph of a specified type and loads it with graph data read
             from a <see cref="T:System.IO.Stream"/>.
             </summary>
            
             <param name="graphFactory">
             Object that can create a graph.
             </param>
            
             <param name="stream">
             <see cref="T:System.IO.Stream"/> containing graph data.
             </param>
            
             <returns>
             A new graph created by <paramref name="graphFactory"/> and loaded with
             graph data read from <paramref name="stream"/>.
             </returns>
            
             <remarks>
             This method creates a graph using <paramref name="graphFactory"/> and
             loads it with the graph data read from <paramref name="stream"/>.  It
             does not close <paramref name="stream"/>.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.PajekGraphAdapter.SaveGraphCore(Microsoft.NodeXL.Core.IGraph,System.IO.Stream)">
             <summary>
             Saves graph data to a stream.
             </summary>
            
             <param name="graph">
             Graph to save.
             </param>
            
             <param name="stream">
             Stream to save the graph data to.
             </param>
            
             <remarks>
             This method saves <paramref name="graph" /> to <paramref
             name="stream" />.  It does not close <paramref name="stream" />.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.PajekGraphAdapter.IsValidEdgeSection(System.String,System.Int32,System.String,Microsoft.NodeXL.Core.IVertex[])">
             <summary>
             Determines whether a line is a valid section marker for an *edges,
             *edgeslist, *arcs, or *arcslist section.
             </summary>
            
             <param name="sLine">
             Line read from the file.
             </param>
            
             <param name="iLineNumber">
             One-based line number of <paramref name="sLine" />.
             </param>
            
             <param name="sSectionName">
             Section name to check for.  Sample: "*edges".
             </param>
            
             <param name="aoVertices">
             Vertices created so far, or null if there are no vertices.
             </param>
            
             <returns>
             true if the line is a valid section marker.
             </returns>
            
             <remarks>
             If the line is in the wrong format, an exception is thrown.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.PajekGraphAdapter.ParseVertex(System.String,System.Int32,Microsoft.NodeXL.Core.IVertex[],System.Int32@)">
             <summary>
             Parses a vertex line.
             </summary>
            
             <param name="sLine">
             Line read from the file.
             </param>
            
             <param name="iLineNumber">
             One-based line number of <paramref name="sLine" />.
             </param>
            
             <param name="aoVertices">
             The array length is equal to the expected number of vertices.  The
             first <paramref name="iVerticesParse" /> elements are set to vertices
             that have already been parsed; the remaining elements are null.
             </param>
            
             <param name="iVerticesParsed">
             Number of parsed vertices in <paramref name="aoVertices" />.  Gets
             incremented.
             </param>
            
             <remarks>
             This method attempts to parse <paramref name="sLine" />, which is a
             line in the *vertices section.  If it succeeds, a new vertex is added
             to <paramref name="aoVertices" /> and <paramref
             name="iVerticesParsed" /> is incremented.  An exception is thrown
             otherwise.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.PajekGraphAdapter.ParseEdge(System.String,System.Int32,System.Int32,System.Collections.Generic.List{Microsoft.NodeXL.Adapters.PajekGraphAdapter.PajekEdgeData})">
             <summary>
             Parses an edge line.
             </summary>
            
             <param name="sLine">
             Line read from the file.
             </param>
            
             <param name="iLineNumber">
             One-based line number of <paramref name="sLine" />.
             </param>
            
             <param name="iVertices">
             Number of vertices in the graph.  Must be greater than 0.
             </param>
            
             <param name="oEdgeData">
             List to add the new edge data to.
             </param>
            
             <remarks>
             This method attempts to parse <paramref name="sLine" />, which is a
             line in the *edges or *arcs section.  If it succeeds, a new
             PajekEdgeData struct is added to <paramref name="oEdgeData" />.  An
             exception is thrown otherwise.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.PajekGraphAdapter.ParseEdgeList(System.String,System.Int32,System.Int32,System.Collections.Generic.List{Microsoft.NodeXL.Adapters.PajekGraphAdapter.PajekEdgeData})">
             <summary>
             Parses an edge list line.
             </summary>
            
             <param name="sLine">
             Line read from the file.
             </param>
            
             <param name="iLineNumber">
             One-based line number of <paramref name="sLine" />.
             </param>
            
             <param name="iVertices">
             Number of vertices in the graph.
             </param>
            
             <param name="oEdgeData">
             List to add the new edge data to.
             </param>
            
             <remarks>
             This method attempts to parse <paramref name="sLine" />, which is a
             line in the *edgeslist or *arcslist section.  If it succeeds, a new
             PajekEdgeData struct is added to <paramref name="oEdgeData" />.  An
             exception is thrown otherwise.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.PajekGraphAdapter.SplitLine(System.String)">
             <summary>
             Splits a line read from a file.
             </summary>
            
             <param name="sLine">
             Line read from the file.
             </param>
            
             <returns>
             An array of string tokens.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.PajekGraphAdapter.CheckVertexNumber(System.Int32,System.String,System.Int32,System.Int32)">
             <summary>
             Checks whether a vertex number is valid.
             </summary>
            
             <param name="iVertexNumber">
             Vertex number read from the file.
             </param>
            
             <param name="sLine">
             Line read from the file.
             </param>
            
             <param name="iLineNumber">
             One-based line number of <paramref name="sLine" />.
             </param>
            
             <param name="iVertices">
             Number of vertices in the graph.
             </param>
            
             <remarks>
             An exception is thrown if <paramref name="iVertexNumber" /> is invalid.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.PajekGraphAdapter.CreateGraph(Microsoft.NodeXL.Core.IGraphFactory,Microsoft.NodeXL.Core.IVertex[],System.Collections.Generic.List{Microsoft.NodeXL.Adapters.PajekGraphAdapter.PajekEdgeData},System.Collections.Generic.List{Microsoft.NodeXL.Adapters.PajekGraphAdapter.PajekEdgeData})">
             <summary>
             Creates a graph given collections of vertices and edges.
             </summary>
            
             <param name="oGraphFactory">
             Object that can create a graph.
             </param>
            
             <param name="aoVertices">
             Vertices to add to the graph, or null if there are no vertices.
             </param>
            
             <param name="oUndirectedEdgeData">
             List of undirected edges to add to the graph.
             </param>
            
             <param name="oDirectedEdgeData">
             List of directed edges to add to the graph.
             </param>
            
             <returns>
             A new graph.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.PajekGraphAdapter.AddEdgeToGraph(Microsoft.NodeXL.Adapters.PajekGraphAdapter.PajekEdgeData,Microsoft.NodeXL.Core.IEdgeCollection,Microsoft.NodeXL.Core.IVertex[],System.Boolean)">
             <summary>
             Adds an edge to a graph's edge collection.
             </summary>
            
             <param name="oEdgeData">
             Contains data for the new edge.
             </param>
            
             <param name="oEdges">
             Graph's edge collection.
             </param>
            
             <param name="aoVertices">
             Graph's vertices.  Can't be null.
             </param>
            
             <param name="bDirected">
             true if the edge is directed.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.PajekGraphAdapter.WriteEdge(Microsoft.NodeXL.Core.IEdge,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.IO.StreamWriter)">
             <summary>
             Writes an edge to a file.
             </summary>
            
             <param name="oEdge">
             Edge to write.
             </param>
            
             <param name="oVertexIDToNumber">
             Dictionary that keeps track of vertices.  The keys are vertex IDs and
             the values are the one-based vertex numbers used by the Pajek format.
             </param>
            
             <param name="oStreamWriter">
             StreamWriter to write to.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.PajekGraphAdapter.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Adapters.PajekGraphAdapter.StreamEncoding">
            Encoding to use when loading and saving graphs.
        </member>
        <member name="F:Microsoft.NodeXL.Adapters.PajekGraphAdapter.m_eCurrentSection">
            Indicates which section is currently being parsed.
        </member>
        <member name="F:Microsoft.NodeXL.Adapters.PajekGraphAdapter.m_oVertexRegex">
            Regex used to parse vertex lines.
        </member>
        <member name="T:Microsoft.NodeXL.Adapters.PajekGraphAdapter.Sections">
            <summary>
            Specifies a section in the file.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Adapters.PajekGraphAdapter.Sections.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Adapters.PajekGraphAdapter.Sections.Vertices">
            <summary>
            The *vertices section is being parsed.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Adapters.PajekGraphAdapter.Sections.Edges">
            <summary>
            The *edges section is being parsed.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Adapters.PajekGraphAdapter.Sections.EdgesList">
            <summary>
            The *edgeslist section is being parsed.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Adapters.PajekGraphAdapter.Sections.Arcs">
            <summary>
            The *arcs section is being parsed.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Adapters.PajekGraphAdapter.Sections.ArcsList">
            <summary>
            The *arcslist section is being parsed.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Adapters.PajekGraphAdapter.PajekEdgeData">
             <summary>
             Stores information about one edge in a Pajek file.
             </summary>
            
             <remarks>
             This structure is embedded within the <see cref="T:Microsoft.NodeXL.Adapters.PajekGraphAdapter"/>
             class and is meant for use only within the class.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.PajekGraphAdapter.PajekEdgeData.#ctor(System.Int32,System.Int32,System.Single)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Adapters.PajekGraphAdapter.PajekEdgeData"/> class.
             </summary>
            
             <param name="firstVertexNumber">
             Vertex number of the edge's first vertex.  The vertex number is the
             first field of the lines within the *vertices section and ranges from
             1 to the number of vertices.
             </param>
            
             <param name="secondVertexNumber">
             Vertex number of the edge's second vertex.
             </param>
            
             <param name="weight">
             Edge weight.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.PajekGraphAdapter.PajekEdgeData.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Adapters.PajekGraphAdapter.PajekEdgeData.m_iFirstVertexNumber">
            Number of the first vertex.
        </member>
        <member name="F:Microsoft.NodeXL.Adapters.PajekGraphAdapter.PajekEdgeData.m_iSecondVertexNumber">
            Number of the second vertex.
        </member>
        <member name="F:Microsoft.NodeXL.Adapters.PajekGraphAdapter.PajekEdgeData.m_fWeight">
            Edge weight.
        </member>
        <member name="P:Microsoft.NodeXL.Adapters.PajekGraphAdapter.PajekEdgeData.FirstVertexNumber">
             <summary>
             Gets the vertex number of the first vertex.
             </summary>
            
             <value>
             The vertex number of the edges's first vertex.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Adapters.PajekGraphAdapter.PajekEdgeData.SecondVertexNumber">
             <summary>
             Gets the vertex number of the second vertex.
             </summary>
            
             <value>
             The vertex number of the edges's second vertex.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Adapters.PajekGraphAdapter.PajekEdgeData.Weight">
             <summary>
             Gets the edge's weight.
             </summary>
            
             <value>
             The edge's weight.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Adapters.SimpleGraphAdapter">
             <summary>
             Converts a graph to and from a simple two-name pair format.
             </summary>
            
             <remarks>
             The two-name format consists of one line of text per edge, where each line
             specifies the names of the vertices connected by the edge.  This is the
             format of each line:
            
             <code>
             Vertex1Name{tab}Vertex2Name
             </code>
            
             <para>
             The delimiter is a tab, and the vertex names can consist of any Unicode
             characters, including leading, trailing, and embedded spaces.
             </para>
            
             <para>
             This adapter can be used with directed graphs only.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Adapters.SimpleGraphAdapter.ExpectedFormat">
            Expected format of each line.
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.SimpleGraphAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Adapters.SimpleGraphAdapter"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.SimpleGraphAdapter.GetSupportedDirectedness(System.Boolean@,System.Boolean@,System.Boolean@)">
             <summary>
             Gets a set of flags indicating the directedness of the graphs that the
             implementation can load and save.
             </summary>
            
             <param name="supportsDirected">
             Gets set to true if the implementation can load and save directed
             graphs.
             </param>
            
             <param name="supportsUndirected">
             Gets set to true if the implementation can load and save undirected
             graphs.
             </param>
            
             <param name="supportsMixed">
             Gets set to true if the implementation can load and save mixed graphs.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.SimpleGraphAdapter.LoadGraphCore(Microsoft.NodeXL.Core.IGraphFactory,System.IO.Stream)">
             <summary>
             Creates a graph of a specified type and loads it with graph data read
             from a <see cref="T:System.IO.Stream"/>.
             </summary>
            
             <param name="graphFactory">
             Object that can create a graph.
             </param>
            
             <param name="stream">
             <see cref="T:System.IO.Stream"/> containing graph data.
             </param>
            
             <returns>
             A new graph created by <paramref name="graphFactory"/> and loaded with
             graph data read from <paramref name="stream"/>.
             </returns>
            
             <remarks>
             This method creates a graph using <paramref name="graphFactory"/> and
             loads it with the graph data read from <paramref name="stream"/>.  It
             does not close <paramref name="stream"/>.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.SimpleGraphAdapter.SaveGraphCore(Microsoft.NodeXL.Core.IGraph,System.IO.Stream)">
             <summary>
             Saves graph data to a stream.
             </summary>
            
             <param name="graph">
             Graph to save.
             </param>
            
             <param name="stream">
             Stream to save the graph data to.
             </param>
            
             <remarks>
             This method saves <paramref name="graph" /> to <paramref
             name="stream" />.  It does not close <paramref name="stream" />.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.SimpleGraphAdapter.VertexNameToVertex(System.String,Microsoft.NodeXL.Core.IVertexCollection,System.Collections.Generic.Dictionary{System.String,Microsoft.NodeXL.Core.IVertex})">
             <summary>
             Finds or creates a vertex given a vertex name.
             </summary>
            
             <param name="sVertexName">
             Name of the vertex to find or create.
             </param>
            
             <param name="oVertices">
             Vertex collection to add a new vertex to if a new vertex is created.
             </param>
            
             <param name="oDictionary">
             Dictionary of existing vertices.  The key is the vertex name and the
             value is the vertex.
             </param>
            
             <returns>
             The found or created vertex.
             </returns>
            
             <remarks>
             If <paramref name="oDictionary" /> contains a vertex named <paramref
             name="sVertexName" />, the vertex is returned.  Otherwise, a vertex is
             created, added to <paramref name="oVertices" />, added to <paramref
             name="oDictionary" />, and returned.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.SimpleGraphAdapter.VertexToVertexName(Microsoft.NodeXL.Core.IVertex)">
             <summary>
             Gets a vertex's name.
             </summary>
            
             <param name="oVertex">
             Vertex to get the name for.
             </param>
            
             <returns>
             The vertex's non-null, non-empty name.
             </returns>
            
             <remarks>
             An exception is thrown if <paramref name="oVertex" /> has a null or
             empty name.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.SimpleGraphAdapter.VertexNameIsValid(System.String)">
             <summary>
             Determines whether a vertex name is valid.
             </summary>
            
             <param name="sVertexName">
             Vertex name to check.
             </param>
            
             <returns>
             true if <paramref name="sVertexName" /> is valid.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Adapters.SimpleGraphAdapter.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Adapters.SimpleGraphAdapter.StreamEncoding">
            Encoding to use when loading and saving graphs.
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker">
             <summary>
             Contains methods that check method arguments and property values.
             </summary>
            
             <remarks>
             This can be used by a class that wants to check values passed to its
             property setters and arguments passed to its methods.  The CheckXXX()
             methods in this class throw an exception if a parameter value or method
             argument is invalid.
            
             <para>
             This class is marked internal to avoid compiler error CS0433 ("The
             type ... exists in both ...") when an executable references two or more
             assemblies that use this class.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.#ctor(System.String)">
             <summary>
             Initializes a new instance of the ArgumentChecker class.
             </summary>
            
             <param name="sOwnerClassName">
             Class name of the object that created this object.  The class name gets
             prepended to all exception messages.  Sample: "MyClass".
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotNull(System.String,System.Object)">
             <summary>
             Throws an exception if a property value is null.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEmpty(System.String,System.String)">
             <summary>
             Throws an exception if a string property value is null or has a length
             of zero.
             </summary>
            
             <param name="sPropertyName">
             Name of the string property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Double)">
             <summary>
             Throws an exception if a Double property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Decimal)">
             <summary>
             Throws an exception if a Decimal property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="decPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotNegative(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is negative.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
            
             <param name="sInvalidValue">
             Invalid value for <paramref name="sPropertyValue" />.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iInvalidValue">
             Invalid value for <paramref name="iPropertyValue" />.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Int32,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="iMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Single,System.Single,System.Single)">
             <summary>
             Throws an exception if a Single property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="fPropertyValue">
             Property value to check.
             </param>
            
             <param name="fMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="fMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Double,System.Double,System.Double)">
             <summary>
             Throws an exception if a Double property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
            
             <param name="dMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="dMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyIsDefined(System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a property value is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oPropertyValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNull(System.String,System.String,System.Object)">
             <summary>
             Throws an exception if a method argument is null.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotEmpty(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string method argument is null or has a length
             of zero.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="sArgumentValue">
             Argument value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Double)">
             <summary>
             Throws an exception if a Double method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="dArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentIsDefined(System.String,System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a method argument is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oArgumentValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is an inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is no inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is an inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is no inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.m_sOwnerClassName">
            Class name of the object that created this object.
        </member>
    </members>
</doc>
