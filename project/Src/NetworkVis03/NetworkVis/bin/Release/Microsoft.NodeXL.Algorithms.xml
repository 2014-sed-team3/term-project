<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.NodeXL.Algorithms</name>
    </assembly>
    <members>
        <member name="T:Microsoft.NodeXL.Algorithms.SubgraphCalculator">
             <summary>
             Gets a subgraph for a specified vertex.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.SubgraphCalculator.GetSubgraph(Microsoft.NodeXL.Core.IVertex,System.Decimal,System.Boolean,System.Collections.Generic.Dictionary{Microsoft.NodeXL.Core.IVertex,System.Int32}@,System.Collections.Generic.Dictionary{Microsoft.NodeXL.Core.IEdge,System.Char}@)">
             <summary>
             Gets a subgraph for a specified vertex.
             </summary>
            
             <param name="vertex">
             Vertex to get a subgraph for.
             </param>
            
             <param name="levels">
             The number of levels to go out from <paramref name="vertex" />.
             Must be a multiple of 0.5.  If 0, the subgraph includes just the
             vertex; if 1, it includes the vertex and its adjacent vertices; if 2,
             it includes the vertex, its adjacent vertices, and their adjacent
             vertices; and so on.  The difference between N.5 and N.0 is that N.5
             includes any edges connecting the outermost vertices to each other,
             whereas N.0 does not.  1.5, for example, includes any edges that
             connect the vertex's adjacent vertices to each other, whereas 1.0
             includes only those edges that connect the adjacent vertices to the
             vertex.
             </param>
            
             <param name="getSubgraphEdges">
             true to get the subgraph's vertices and edges, false to get the
             subgraph's vertices only.
             
             </param>
            
             <param name="subgraphVertices">
             Where a dictionary of subgraph vertices gets stored.  The key is the
             IVertex and the value is the vertex's level, which is the distance of
             the subgraph vertex from <paramref name="vertex" />.
             </param>
            
             <param name="subgraphEdges">
             Where a dictionary of subgraph edges gets stored.  The key is the IEdge
             and the value isn't used.  If <paramref name="getSubgraphEdges" /> is
             false, the dictionary is always empty.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.SubgraphCalculator.AddOuterEdgesToSubgraph(System.Int32,System.Collections.Generic.Dictionary{Microsoft.NodeXL.Core.IVertex,System.Int32},System.Collections.Generic.Dictionary{Microsoft.NodeXL.Core.IEdge,System.Char})">
             <summary>
             Adds any subgraph edges connecting the outermost vertices.
             </summary>
            
             <param name="iOuterLevel">
             Level of the outermost vertices.
             </param>
            
             <param name="oSubgraphVertices">
             Dictionary of subgraph vertices.  The key is the IVertex and the value
             is the vertex's level.
             </param>
            
             <param name="oSubgraphEdges">
             Dictionary of subgraph edges.  The key is the IEdge and the value isn't
             used.  This method adds any outer edges to this dictionary.
             </param>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.Community">
            <summary>
            Represents a community used by <see cref="T:Microsoft.NodeXL.Algorithms.ClusterCalculator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.Community.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.Community"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.Community.InitializeDeltaQs(System.Collections.Generic.LinkedList{Microsoft.NodeXL.Algorithms.Community},System.Int32)">
             <summary>
             Initializes the delta Q values for this community.
             </summary>
            
             <param name="communities">
             List of all communities.
             </param>
            
             <param name="edgesInGraph">
             Number of edges in the graph.
             </param>
            
             <remarks>
             It's assumed that the community is in its initial state of having one
             vertex only.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.Community.OnMergedCommunities(Microsoft.NodeXL.Algorithms.Community,Microsoft.NodeXL.Algorithms.Community,Microsoft.NodeXL.Algorithms.Community,System.Single,Microsoft.NodeXL.Algorithms.DeltaQMaxHeap)">
             <summary>
             Gets called when two communities merge and one or both of them were
             connected to this community.
             </summary>
            
             <param name="mergedCommunity1">
             The first community that was merged.
             </param>
            
             <param name="mergedCommunity2">
             The second community that was merged.
             </param>
            
             <param name="newMergedCommunity">
             The new community that the communities were merged into.
             </param>
            
             <param name="newCommunityPairDeltaQ">
             The new delta Q value for the community pair that connects this
             community to the merged community.
             </param>
            
             <param name="deltaQMaxHeap">
             Max heap, used to keep track of the maximum delta Q value in each
             community.  There is an element in the max heap for each community.
             The key is the Community and the value is the Community's maximum
             delta Q.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.Community.ToString">
             <summary>
             Formats the value of the current instance using the default format. 
             </summary>
            
             <returns>
             The formatted string.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.Community.GetHashCode">
             <summary>
             Serves as a hash function for a particular type. 
             </summary>
            
             <returns>
             A hash code for the current Object.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.Community.AppendPropertiesToString(System.Text.StringBuilder,System.Int32,System.String)">
             <summary>
             Appends the derived class's public property values to a String.
             </summary>
            
             <param name="oStringBuilder">
             Object to append to.
             </param>
            
             <param name="iIndentationLevel">
             Current indentation level.  Level 0 is "no indentation."
             </param>
            
             <param name="sFormat">
             The format to use, either "G", "P", or "D".  See <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/> for details.
             </param>
            
             <remarks>
             This method calls <see cref="M:Microsoft.NodeXL.Core.ToStringUtil.AppendPropertyToString(System.Text.StringBuilder,System.Int32,System.String,System.Object,System.Boolean)"/> for each of the
             derived class's public properties.  It is used in the implementation of
             <see cref="M:Microsoft.NodeXL.Core.NodeXLBase.ToString"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.Community.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.Community.DeltaQNotSet">
            <summary>
            Value of <see cref="P:Microsoft.NodeXL.Algorithms.CommunityPair.DeltaQ"/> and <see cref="P:Microsoft.NodeXL.Algorithms.Community.MaximumDeltaQ"/> when a delta Q hasn't been set yet.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.Community.m_iID">
            Unique community ID.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.Community.m_oCommunityPairs">
            SortedList of CommunityPair objects.  The sort key is the Community.ID
            of the CommunityPair's Community2, and the value is the CommunityPair.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.Community.m_oCommunityPairWithMaximumDeltaQ">
            The CommunityPair object that has the maximum delta Q value in the
            m_oCommunityPairs list, or null.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.Community.m_oVertices">
            Linked list of the vertices that this community contains.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.Community.m_iDegree">
            The sum of the degrees for the vertices in m_oVertices.
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.Community.ID">
             <summary>
             Gets or sets a unique community ID.
             </summary>
            
             <value>
             A unique community ID, as an Int32.  The default is 0.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.Community.CommunityPairs">
             <summary>
             Gets a sorted list of <see cref="T:Microsoft.NodeXL.Algorithms.CommunityPair"/> objects that this
             community contains.
             </summary>
            
             <value>
             A SortedList of <see cref="T:Microsoft.NodeXL.Algorithms.CommunityPair"/> objects.  The sort key is
             the ID of CommunityPair.<see cref="P:Microsoft.NodeXL.Algorithms.CommunityPair.Community2"/> and the
             value is the <see cref="T:Microsoft.NodeXL.Algorithms.CommunityPair"/>.  The default is an empty
             SortedList.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.Community.CommunityPairWithMaximumDeltaQ">
             <summary>
             Gets or sets the <see cref="T:Microsoft.NodeXL.Algorithms.CommunityPair"/> object that has the
             maximum delta Q value.
             </summary>
            
             <value>
             The <see cref="T:Microsoft.NodeXL.Algorithms.CommunityPair"/> object that has the maximum delta Q
             value in the <see cref="P:Microsoft.NodeXL.Algorithms.Community.CommunityPairs"/> list.  The default is null.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.Community.MaximumDeltaQ">
             <summary>
             Gets the maximum delta Q value among all community pairs within <see cref="P:Microsoft.NodeXL.Algorithms.Community.CommunityPairs"/>.
             </summary>
            
             <value>
             The maximum delta Q value, as a Single.  The default is <see cref="F:Microsoft.NodeXL.Algorithms.Community.DeltaQNotSet"/>.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.Community.Vertices">
             <summary>
             Gets a linked list of the vertices that this community contains.
             </summary>
            
             <value>
             A LinkedList of <see cref="T:Microsoft.NodeXL.Core.IVertex"/> objects.  The default is an
             empty LinkedList.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.Community.Degree">
             <summary>
             Gets or sets the sum of the degrees for the vertices that this
             community contains.
             </summary>
            
             <value>
             The sum of the degrees for the community's vertices, as an Int32.  The
             default is zero.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.BetweennessCentralityCalculator">
             <summary>
             Calculates the betweenness centrality for each of the graph's vertices.
             </summary>
            
             <remarks>
             The betweenness centralities are provided as a
             Dictionary&lt;Int32, Single&gt;.  There is one key/value pair for each
             vertex in the graph.  The key is the IVertex.ID and the value is the
             vertex's betweenness centrality, as a Single.
            
             <para>
             The algorithm used to calculate betweenness centrality is taken from the
             paper "A Faster Algorithm for Betweenness Centrality," by Ulrik Brandes.
             The paper can be found here:
             </para>
            
             <para>
             http://www.inf.uni-konstanz.de/algo/publications/b-fabc-01.pdf
             </para>
            
             <para>
             According to the paper, the algorithm works even if the graph has
             self-loops and duplicate edges.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.GraphMetricCalculatorBase">
            <summary>
            Base class for classes that implement <see cref="T:Microsoft.NodeXL.Algorithms.IGraphMetricCalculator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.IGraphMetricCalculator">
             <summary>
             Supports the calculation of one set of graph metrics.
             </summary>
            
             <remarks>
             There is a family of classes that calculate metrics for a graph.  Each
             class calculates a set of one or more related metrics, and each class
             implements this interface.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.IGraphMetricCalculator.CalculateGraphMetrics(Microsoft.NodeXL.Core.IGraph)">
             <summary>
             Calculate a set of one or more related metrics.
             </summary>
            
             <param name="graph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <returns>
             The graph metrics.  The return type must be defined and documented by
             each implementation.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.IGraphMetricCalculator.TryCalculateGraphMetrics(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Object@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             running on a background thread.
             </summary>
            
             <param name="graph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="backgroundWorker">
             The BackgroundWorker whose thread is calling this method.
             </param>
            
             <param name="graphMetrics">
             Where the graph metrics get stored if true is returned.  The type must
             be defined and documented by each implementation.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
            
             <remarks>
             This method should periodically check <paramref name="backgroundWorker"/>.<see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/>.  If true, the method
             should immediately return false.
            
             <para>
             It should also periodically report progress by calling the
             BackgroundWorker.<see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)"/> method.  The
             second argument must be a string in the format "Calculating
             [GraphMetricDescription]."
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.IGraphMetricCalculator.GraphMetricDescription">
             <summary>
             Gets a description of the graph metrics calculated by the
             implementation.
             </summary>
            
             <value>
             A description suitable for use within the sentence "Calculating
             [GraphMetricDescription]."
             </value>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.GraphMetricCalculatorBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.GraphMetricCalculatorBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.GraphMetricCalculatorBase.CalculateGraphMetrics(Microsoft.NodeXL.Core.IGraph)">
             <summary>
             Calculate a set of one or more related metrics.
             </summary>
            
             <param name="graph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <returns>
             The graph metrics.  The return type must be defined and documented by
             each implementation.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.GraphMetricCalculatorBase.TryCalculateGraphMetrics(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Object@)">
             <overloads>
             Attempts to calculate a set of one or more related metrics while
             running on a background thread.
             </overloads>
            
             <summary>
             Attempts to calculate a set of one or more related metrics while
             running on a background thread, and provides the metrics as an Object.
             </summary>
            
             <param name="graph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="backgroundWorker">
             The BackgroundWorker whose thread is calling this method.
             </param>
            
             <param name="graphMetrics">
             Where the graph metrics get stored if true is returned.  The type is
             defined and documented by each implementation.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
            
             <remarks>
             This method periodically checks <paramref name="backgroundWorker"/>.<see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/>.  If true, false is
             immediately returned.
            
             <para>
             It also periodically reports progress by calling the
             BackgroundWorker.<see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)"/> method.  The
             second argument is a string in the format "Calculating
             [GraphMetricDescription]."
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.GraphMetricCalculatorBase.TryCalculateGraphMetricsCore(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Object@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread.
             </summary>
            
             <param name="oGraph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="oBackgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="oGraphMetrics">
             Where the graph metrics get stored if true is returned.  The return
             type must be defined and documented by each implementation.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.GraphMetricCalculatorBase.ReportProgress(System.Int32,System.Int32,System.ComponentModel.BackgroundWorker)">
             <summary>
             Reports progress to the calling thread.
             </summary>
            
             <param name="iCalculationsSoFar">
             Number of calculations that have been performed so far.
             </param>
            
             <param name="iTotalCalculations">
             Total number of calculations.
             </param>
            
             <param name="oBackgroundWorker">
             The <see cref="T:System.ComponentModel.BackgroundWorker"/> object that is performing all graph
             metric calculations.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.GraphMetricCalculatorBase.ReportCannotCalculateGraphMetrics(System.String)">
             <summary>
             Throws an exception to the calling thread indicating a condition that
             prevents the graph metrics from being calculated.
             </summary>
            
             <param name="sMessage">
             Error message, suitable for displaying to the user.
             </param>
            
             <remarks>
             This method throws a <see cref="T:Microsoft.NodeXL.Algorithms.GraphMetricException"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.GraphMetricCalculatorBase.CalculateEdgesInFullyConnectedNeighborhood(System.Int32,System.Boolean)">
             <summary>
             Calculates the number of edges there would be in the neighborhood of a
             vertex if the neighborhood were fully connected.
             </summary>
            
             <param name="iAdjacentVertices">
             The number of the vertex's adjacent vertices.
             </param>
            
             <param name="bGraphIsDirected">
             true if the graph is directed, false if it's undirected.
             </param>
            
             <returns>
             The number of edges in the fully connected neighborhood.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.GraphMetricCalculatorBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.GraphMetricCalculatorBase.GraphMetricDescription">
             <summary>
             Gets a description of the graph metrics calculated by the
             implementation.
             </summary>
            
             <value>
             A description suitable for use within the sentence "Calculating
             [GraphMetricDescription]."
             </value>
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.BetweennessCentralityCalculator.VerticesPerProgressReport">
            Number of vertices that are processed before progress is reported and
            the cancellation flag is checked.
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.BetweennessCentralityCalculator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.BetweennessCentralityCalculator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.BetweennessCentralityCalculator.TryCalculateGraphMetrics(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Collections.Generic.Dictionary{System.Int32,System.Single}@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread, and provides the metrics in
             a type-safe manner.
             </summary>
            
             <param name="graph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="backgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="betweennessCentralities">
             Where the graph metrics get stored if true is returned.  See the class
             notes for details on the type.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.BetweennessCentralityCalculator.TryCalculateGraphMetricsCore(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Object@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread.
             </summary>
            
             <param name="oGraph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="oBackgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="oGraphMetrics">
             Where the graph metrics get stored if true is returned.  See the class
             notes for the return type.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.BetweennessCentralityCalculator.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.BetweennessCentralityCalculator.GraphMetricDescription">
             <summary>
             Gets a description of the graph metrics calculated by the
             implementation.
             </summary>
            
             <value>
             A description suitable for use within the sentence "Calculating
             [GraphMetricDescription]."
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.VertexDegreeCalculator">
             <summary>
             Calculates the in-degree, out-degree, and degree for each of the graph's
             vertices.
             </summary>
            
             <remarks>
             The vertex degrees are provided as a
             Dictionary&lt;Int32, VertexDegrees&gt;.  There is one key/value pair for
             each vertex in the graph.  The key is the IVertex.ID and the value is a
             <see cref="T:Microsoft.NodeXL.Algorithms.VertexDegrees"/> object containing the degree metrics for the
             vertex.
            
             <para>
             This calculator includes all self-loops in its calculations.  It also
             includes all parallel edges, which may not be expected by the user.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.VertexDegreeCalculator.VerticesPerProgressReport">
            Number of vertices that are processed before progress is reported and
            the cancellation flag is checked.
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.VertexDegreeCalculator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.VertexDegreeCalculator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.VertexDegreeCalculator.TryCalculateGraphMetrics(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Collections.Generic.Dictionary{System.Int32,Microsoft.NodeXL.Algorithms.VertexDegrees}@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread, and provides the metrics in
             a type-safe manner.
             </summary>
            
             <param name="graph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="backgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="vertexDegrees">
             Where the graph metrics get stored if true is returned.  See the class
             notes for details on the type.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.VertexDegreeCalculator.TryCalculateGraphMetricsCore(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Object@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread.
             </summary>
            
             <param name="oGraph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="oBackgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="oGraphMetrics">
             Where the graph metrics get stored if true is returned.  See the class
             notes for details on the type.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.VertexDegreeCalculator.CalculateVertexDegrees(Microsoft.NodeXL.Core.IVertex,System.Int32@,System.Int32@)">
             <summary>
             Calculates a vertex's in-degree and out-degree.
             </summary>
            
             <param name="oVertex">
             The vertex to calculate the in-degree and out-degree for.
             </param>
            
             <param name="iInDegree">
             Where the vertex's in-degree gets stored.
             </param>
            
             <param name="iOutDegree">
             Where the vertex's out-degree gets stored.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.VertexDegreeCalculator.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.VertexDegreeCalculator.GraphMetricDescription">
             <summary>
             Gets a description of the graph metrics calculated by the
             implementation.
             </summary>
            
             <value>
             A description suitable for use within the sentence "Calculating
             [GraphMetricDescription]."
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.VertexDegrees">
             <summary>
             Stores the degree metrics for one vertex.
             </summary>
            
             <remarks>
             Technically, in-degree and out-degree are valid only for directed graphs
             and degree is valid only for undirected graphs, but all three metrics are
             provided by this class anyway.  Degree is the sum of in-degree and
             out-degree.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.VertexDegrees.#ctor(System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.VertexDegrees"/> class.
             </summary>
            
             <param name="inDegree">
             The vertex's in-degree.
             </param>
            
             <param name="outDegree">
             The vertex's out-degree.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.VertexDegrees.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.VertexDegrees.m_iInDegree">
            In-degree.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.VertexDegrees.m_iOutDegree">
            Out-degree.
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.VertexDegrees.InDegree">
             <summary>
             Gets the vertex's in-degree.
             </summary>
            
             <value>
             The vertex's in-degree.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.VertexDegrees.OutDegree">
             <summary>
             Gets the vertex's out-degree.
             </summary>
            
             <value>
             The vertex's out-degree.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.VertexDegrees.Degree">
             <summary>
             Gets the vertex's degree.
             </summary>
            
             <value>
             The vertex's degree.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.GraphMetricException">
            <summary>
            Represents an exception thrown when a graph metric calculator detects a
            condition that prevents its graph metrics from being calculated.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.GraphMetricException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.GraphMetricException"/>
             class.
             </summary>
            
             <param name="message">
             Error message, suitable for displaying to the user.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.GraphMetricException.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.DeltaQMaxHeap">
             <summary>
             Represents a max heap used by <see cref="T:Microsoft.NodeXL.Algorithms.ClusterCalculator"/> to keep
             track of the maximum delta Q value in each community.
            
             <para>
             There is an element in the max heap for each community.  The key is the
             Community and the value is the Community's maximum delta Q.
             </para>
            
             </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.DeltaQMaxHeap.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.DeltaQMaxHeap"/> class
             with a specified initial capacity.
             </summary>
            
             <param name="initialCapacity">
             Initial capacity.  Must be non-negative.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.DeltaQMaxHeap.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.DeltaQComparer">
            <summary>
            Compares two delta Q values.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.DeltaQComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.DeltaQComparer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.DeltaQComparer.Compare(System.Single,System.Single)">
             <summary>
             Compares two objects and returns a value indicating whether one is less
             than, equal to, or greater than the other.
             </summary>
            
             <param name="x">
             The first object to compare.
             </param>
            
             <param name="y">
             The second object to compare.
             </param>
            
             <returns>
             See the interface definition.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.DeltaQComparer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.ClosenessCentralityCalculator">
             <summary>
             Calculates the closeness centrality for each of the graph's vertices.
             </summary>
            
             <remarks>
             The closeness centralities are provided as a
             Dictionary&lt;Int32, Double&gt;.  There is one key/value pair for each
             vertex in the graph.  The key is the IVertex.ID and the value is the
             vertex's closeness centrality, as a Double.
            
             <para>
             The closeness centrality of a vertex is calculated as the mean geodesic
             distance (the shortest path) between the vertex and all other vertices
             reachable from it.  If the vertex is isolated, its closeness centrality is
             zero.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClosenessCentralityCalculator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.ClosenessCentralityCalculator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClosenessCentralityCalculator.TryCalculateGraphMetrics(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Collections.Generic.Dictionary{System.Int32,System.Double}@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread, and provides the metrics in
             a type-safe manner.
             </summary>
            
             <param name="graph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="backgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="closenessCentralities">
             Where the graph metrics get stored if true is returned.  See the class
             notes for details on the type.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClosenessCentralityCalculator.TryCalculateGraphMetricsCore(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Object@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread.
             </summary>
            
             <param name="oGraph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="oBackgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="oGraphMetrics">
             Where the graph metrics get stored if true is returned.  See the class
             notes for details on the type.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClosenessCentralityCalculator.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.ClosenessCentralityCalculator.GraphMetricDescription">
             <summary>
             Gets a description of the graph metrics calculated by the
             implementation.
             </summary>
            
             <value>
             A description suitable for use within the sentence "Calculating
             [GraphMetricDescription]."
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.ClusteringCoefficientCalculator">
             <summary>
             Calculates the clustering coefficient for each of the graph's vertices.
             </summary>
            
             <remarks>
             The clustering coefficients are provided as a
             Dictionary&lt;Int32, Double&gt;.  There is one key/value pair for each
             vertex in the graph.  The key is the IVertex.ID and the value is the
             vertex's clustering coefficient, as a Double.
            
             <para>
             See this article for a definition of clustering coefficient:
             </para>
            
             <para>
             http://en.wikipedia.org/wiki/Clustering_coefficient
             </para>
            
             <para>
             This calculator skips all self-loops, which would render the calculations
             invalid.  The calculations are rendered invalid if the graph has duplicate
             edges, however.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.ClusteringCoefficientCalculator.VerticesPerProgressReport">
            Number of vertices that are processed before progress is reported and
            the cancellation flag is checked.
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClusteringCoefficientCalculator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.ClusteringCoefficientCalculator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClusteringCoefficientCalculator.TryCalculateGraphMetrics(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Collections.Generic.Dictionary{System.Int32,System.Double}@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread, and provides the metrics in
             a type-safe manner.
             </summary>
            
             <param name="graph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="backgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="clusteringCoefficients">
             Where the graph metrics get stored if true is returned.  See the class
             notes for details on the type.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClusteringCoefficientCalculator.TryCalculateGraphMetricsCore(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Object@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread.
             </summary>
            
             <param name="oGraph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="oBackgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="oGraphMetrics">
             Where the graph metrics get stored if true is returned.  See the class
             notes for details on the type.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClusteringCoefficientCalculator.CalculateClusteringCoefficient(Microsoft.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Calculates a vertex's clustering coefficient.
             </summary>
            
             <param name="oVertex">
             The vertex to calculate the clustering coefficient for.
             </param>
            
             <param name="bGraphIsDirected">
             true if the graph is directed, false if it's undirected.
             </param>
            
             <returns>
             The vertex's clustering coefficient.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClusteringCoefficientCalculator.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.ClusteringCoefficientCalculator.GraphMetricDescription">
             <summary>
             Gets a description of the graph metrics calculated by the
             implementation.
             </summary>
            
             <value>
             A description suitable for use within the sentence "Calculating
             [GraphMetricDescription]."
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.CommunityPair">
            <summary>
            Represents a pair of communities used by <see cref="T:Microsoft.NodeXL.Algorithms.ClusterCalculator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.CommunityPair.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.CommunityPair"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.CommunityPair.ToString">
             <summary>
             Formats the value of the current instance using the default format. 
             </summary>
            
             <returns>
             The formatted string.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.CommunityPair.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.CommunityPair.m_oCommunity1">
            The first community in the pair.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.CommunityPair.m_oCommunity2">
            The second community in the pair.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.CommunityPair.m_fDeltaQ">
            Maximum delta Q value among all community pairs within
            m_oCommunityPairs.
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.CommunityPair.Community1">
             <summary>
             Gets or sets the first community in the pair.
             </summary>
            
             <value>
             The first community in the pair, as a <see cref="T:Microsoft.NodeXL.Algorithms.Community"/>.  The
             default is null.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.CommunityPair.Community2">
             <summary>
             Gets or sets the second community in the pair.
             </summary>
            
             <value>
             The second community in the pair, as a <see cref="T:Microsoft.NodeXL.Algorithms.Community"/>.  The
             default is null.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.CommunityPair.DeltaQ">
             <summary>
             Gets or sets the delta Q for this community pair.
             </summary>
            
             <value>
             The delta Q for this community pair, as a Single.  The default is <see cref="F:Microsoft.NodeXL.Algorithms.Community.DeltaQNotSet"/>.
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.ClusterCalculator">
             <summary>
             Partitions a graph into clusters.
             </summary>
            
             <remarks>
             The clusters are provided as a LinkedList&lt;Community&gt;.  There is one
             <see cref="T:Microsoft.NodeXL.Algorithms.Community"/> object in the LinkedList for each calculated
             cluster.  The vertices in each cluster can be obtained via the
             Community.<see cref="P:Microsoft.NodeXL.Algorithms.Community.Vertices"/> property.  All the other
             properties and methods of the  <see cref="T:Microsoft.NodeXL.Algorithms.Community"/> class are meant for
             internal use and should be ignored.
            
             <para>
             The algorithm used by this class is from "Finding Community Structure in
             Mega-scale Social Networks," by Ken Wakita and Toshiyuki Tsurumi:
             </para>
            
             <para>
             http://arxiv.org/PS_cache/cs/pdf/0702/0702048v1.pdf
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.ClusterCalculator.MergeCyclesPerProgressReport">
            Number of community merge cycles before progress is reported and the
            cancellation flag is checked.
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClusterCalculator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.ClusterCalculator"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClusterCalculator.TryCalculateGraphMetrics(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Collections.Generic.LinkedList{Microsoft.NodeXL.Algorithms.Community}@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread, and provides the metrics in
             a type-safe manner.
             </summary>
            
             <param name="graph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="backgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="communities">
             Where the graph metrics get stored if true is returned.  See the class
             notes for details on the type.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClusterCalculator.TryCalculateGraphMetricsCore(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Object@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread.
             </summary>
            
             <param name="oGraph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="oBackgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="oGraphMetrics">
             Where the graph metrics get stored if true is returned.  See the class
             notes for the return type.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClusterCalculator.CreateCommunities(Microsoft.NodeXL.Core.IVertexCollection,Microsoft.NodeXL.Core.IDGenerator)">
             <summary>
             Creates and populates a community for each of the graph's vertices.
             </summary>
            
             <param name="oVertices">
             The graph's vertices.
             </param>
            
             <param name="oIDGenerator">
             ID generator for new communities.
             </param>
            
             <returns>
             A linked list of Community objects, one for each of the graph's
             vertices.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClusterCalculator.InitializeDeltaQs(System.Collections.Generic.LinkedList{Microsoft.NodeXL.Algorithms.Community},Microsoft.NodeXL.Algorithms.DeltaQMaxHeap,System.Int32)">
             <summary>
             Initializes the delta Q values for each community.
             </summary>
            
             <param name="oCommunities">
             List of all communities.
             </param>
            
             <param name="oDeltaQMaxHeap">
             Max heap, used to keep track of the maximum delta Q value in each
             community.  There is an element in the max heap for each community.
             The key is the Community and the value is the Community's maximum
             delta Q.
             </param>
            
             <param name="iEdgesInGraph">
             Number of edges in the graph.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClusterCalculator.MergeCommunities(System.Collections.Generic.LinkedList{Microsoft.NodeXL.Algorithms.Community},Microsoft.NodeXL.Algorithms.CommunityPair,Microsoft.NodeXL.Algorithms.DeltaQMaxHeap,System.Int32,Microsoft.NodeXL.Core.IDGenerator)">
             <summary>
             Merges the communities in a community pair, updates the maximum delta Q
             values for all communities, and updates the global max heap.
             </summary>
            
             <param name="oCommunities">
             List of all communities.
             </param>
            
             <param name="oCommunityPairToMerge">
             The community pair to merge.
             </param>
            
             <param name="oDeltaQMaxHeap">
             Max heap, used to keep track of the maximum delta Q value in each
             community.  There is an element in the max heap for each community.
             The key is the Community and the value is the Community's maximum
             delta Q.
             </param>
            
             <param name="iEdgesInGraph">
             Number of edges in the graph.
             </param>
            
             <param name="oIDGenerator">
             ID generator for new communities.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClusterCalculator.WriteCommunitiesToTrace(System.Collections.Generic.LinkedList{Microsoft.NodeXL.Algorithms.Community})">
             <summary>
             Writes the collection of communities to the TraceListeners collection.
             Debug-only.
             </summary>
            
             <param name="oCommunities">
             List of all communities.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.ClusterCalculator.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.ClusterCalculator.GraphMetricDescription">
             <summary>
             Gets a description of the graph metrics calculated by the
             implementation.
             </summary>
            
             <value>
             A description suitable for use within the sentence "Calculating
             [GraphMetricDescription]."
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector">
             <summary>
             Counts duplicate and unique edges in a graph.
             </summary>
            
             <remarks>
             The <see cref="P:Microsoft.NodeXL.Core.IIdentityProvider.Name"/> property on each of an
             edge's vertices is used to test for duplicate edges.
            
             <para>
             The edges A,B and A,B are always considered duplicates.  The edges A,B
             and B,A are considered duplicates if the graph is undirected, but not if it
             is directed.
             </para>
            
             <para>
             Edges with null or empty names are ignored.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector.#ctor(Microsoft.NodeXL.Core.IGraph)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector"/>
             class.
             </summary>
            
             <param name="graph">
             Graph to check.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector.CountEdges">
            <summary>
            Counts the edges and cache the results if they haven't already been
            counted.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector.GetVertexNamePair(System.String,System.String,System.Boolean)">
             <summary>
             Combines the names of an edge's vertices into a name pair suitable for
             use as a dictionary key.
             </summary>
            
             <param name="vertex0Name">
             Name of the edge's first vertex.  Can't be null or empty.
             </param>
            
             <param name="vertex1Name">
             Name of the edge's second vertex.  Can't be null or empty.
             </param>
            
             <param name="graphIsDirected">
             true if the graph is directed, false if it is undirected.
             </param>
            
             <returns>
             A name pair suitable for use as a dictionary key.
             </returns>
            
             <remarks>
             The returned string can be used as a key in a dictionary used to find
             duplicate edges.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector.m_oGraph">
            Graph to check.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector.m_bEdgesCounted">
            true if the edges have already been counted.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector.m_iUniqueEdges">
            If m_bEdgesCounted is true, this is the number of unique edges in
            m_oGraph.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector.m_iEdgesWithDuplicates">
            If m_bEdgesCounted is true, this is the number of edges in m_oGraph
            that have duplicates.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector.m_iEdges">
            If m_bEdgesCounted is true, this is the total number of edges in
            m_oGraph.
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector.GraphContainsDuplicateEdges">
             <summary>
             Gets a flag indicating whether the graph contains at least one pair
             of duplicate edges.
             </summary>
            
             <value>
             true if <paramref name="graph" /> contains at least one pair of
             duplicate edges.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector.EdgesWithDuplicates">
             <summary>
             Gets the number of edges in the graph that have duplicates.
             </summary>
            
             <value>
             The number of edges in the graph that have duplicates.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector.UniqueEdges">
             <summary>
             Gets the number of unique edges in the graph.
             </summary>
            
             <value>
             The number of unique edges in the graph.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector.Edges">
             <summary>
             Gets the number of edges in the graph.
             </summary>
            
             <value>
             The number of edges in the graph.
             </value>
            
             <remarks>
             The number of edges in the graph is the sum of <see cref="P:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector.UniqueEdges"/> and <see cref="P:Microsoft.NodeXL.Algorithms.DuplicateEdgeDetector.EdgesWithDuplicates"/>.
             </remarks>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.EigenvectorCentralityCalculator">
             <summary>
             Calculates the eigenvector centrality for each of the graph's vertices.
             </summary>
            
             <remarks>
             The eigenvector centralities are provided as a
             Dictionary&lt;Int32, Double&gt;.  There is one key/value pair for each
             vertex in the graph.  The key is the IVertex.ID and the value is the
             vertex's eigenvector centrality, as a Double.
            
             <para>
             Eigenvector centrality is defined in this article:
             </para>
            
             <para>
             http://en.wikipedia.org/wiki/Eigenvector_centrality#Eigenvector_centrality
             </para>
            
             <para>
             The dominant eigenvector required for eigenvector centrality is found using
             the "accelerated power method" outlined here:
             </para>
            
             <para>
             http://www.analytictech.com/networks/centaids.htm
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.EigenvectorCentralityCalculator.IterationsPerProgressReport">
            Number of accelerated power method iterations before progress is
            reported and the cancellation flag is checked.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.EigenvectorCentralityCalculator.LambdaDifferencePercentForEquality">
            Percent difference in lambda from one iteration to the next for which
            the lambdas are considered equal.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.EigenvectorCentralityCalculator.MaximumIterations">
            Maximum number of iterations to run.
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.EigenvectorCentralityCalculator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.EigenvectorCentralityCalculator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.EigenvectorCentralityCalculator.TryCalculateGraphMetrics(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Collections.Generic.Dictionary{System.Int32,System.Double}@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread, and provides the metrics in
             a type-safe manner.
             </summary>
            
             <param name="graph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="backgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="eigenvectorCentralities">
             Where the graph metrics get stored if true is returned.  See the class
             notes for details on the type.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.EigenvectorCentralityCalculator.TryCalculateGraphMetricsCore(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Object@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread.
             </summary>
            
             <param name="oGraph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="oBackgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="oGraphMetrics">
             Where the graph metrics get stored if true is returned.  See the class
             notes for details on the type.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.EigenvectorCentralityCalculator.RunSteps1To3(Microsoft.NodeXL.Core.IVertexCollection,System.Double[],Microsoft.NodeXL.Core.SimpleGraphMatrix)">
             <summary>
             Runs steps 1 to 3 of the accelerated power method.
             </summary>
            
             <param name="oVertices">
             The graph's vertices.
             </param>
            
             <param name="adE">
             The current eigenvector.
             </param>
            
             <param name="oSimpleGraphMatrix">
             Object that determines whether two vertices are connected by an edge.
             </param>
            
             <returns>
             The new value of lambda.
             </returns>
            
             <remarks>
             The terms and steps used here are from the "accelerated power method"
             algorithm outlined in the article mentioned in the class comments.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.EigenvectorCentralityCalculator.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.EigenvectorCentralityCalculator.GraphMetricDescription">
             <summary>
             Gets a description of the graph metrics calculated by the
             implementation.
             </summary>
            
             <value>
             A description suitable for use within the sentence "Calculating
             [GraphMetricDescription]."
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.AllPathsShortestPathCalculator">
             <summary>
             Calculates the length of the shortest path between each pair of vertices in
             a graph.
             </summary>
            
             <remarks>
             The shortest paths are provided as a two-dimensional array of UInt16s.  The
             [i,j] element is the length of the shortest path between vertices i and j
             if there is such a path, or the constant <see cref="F:Microsoft.NodeXL.Algorithms.AllPathsShortestPathCalculator.NoPath"/> if there is
             no such path.  The i and j indexes assume that the graph's vertex
             collection is being enumerated via a forward enumerator.  (The vertex
             collection cannot be indexed and must be enumerated.)
            
             <para>
             The Floyd-Warshall algorithm is used to compute the shortest path lengths.
             The algorithm is outlined here:
             </para>
            
             <para>
             http://en.wikipedia.org/wiki/Floyd-Warshall_algorithm
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.AllPathsShortestPathCalculator.NoPath">
            Value used to indicate that there is no path between two vertices.
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.AllPathsShortestPathCalculator.#ctor">
             <overloads>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.AllPathsShortestPathCalculator"/> class with a default graph
             metric description.
             </overloads>
            
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.AllPathsShortestPathCalculator"/> class.
             </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.AllPathsShortestPathCalculator.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.AllPathsShortestPathCalculator"/> class with a specified graph
             metric description.
             </summary>
            
             <param name="graphMetricDescription">
             A description suitable for use within the sentence "Calculating
             [GraphMetricDescription]."
             </param>
            
             <remarks>
             This overload is provided to allow another graph metric calculator to
             use this class while having its own graph metric description used in
             progress reports.
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.AllPathsShortestPathCalculator.TryCalculateGraphMetrics(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.UInt16[0:,0:]@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread, and provides the metrics in
             a type-safe manner.
             </summary>
            
             <param name="graph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="backgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="allPairsPathLengths">
             Where the graph metrics get stored if true is returned.  See the class
             notes for details on the type.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.AllPathsShortestPathCalculator.TryCalculateGraphMetricsCore(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Object@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread.
             </summary>
            
             <param name="oGraph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="oBackgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="oGraphMetrics">
             Where the graph metrics get stored if true is returned.  See the class
             notes for the details on the type.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.AllPathsShortestPathCalculator.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.AllPathsShortestPathCalculator.m_sGraphMetricDescription">
            Graph metric description.
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.AllPathsShortestPathCalculator.GraphMetricDescription">
             <summary>
             Gets a description of the graph metrics calculated by the
             implementation.
             </summary>
            
             <value>
             A description suitable for use within the sentence "Calculating
             [GraphMetricDescription]."
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.OverallMetricCalculator">
             <summary>
             Calculates the overall metrics for the graph.
             </summary>
            
             <remarks>
             The overall metrics are provided as an <see cref="T:Microsoft.NodeXL.Algorithms.OverallMetrics"/>
             object.
            
             <para>
             The calculations for graph density skip all self-loops, which would render
             the density invalid.  The graph density is rendered invalid if the graph
             has duplicate edges, however.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.OverallMetricCalculator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.OverallMetricCalculator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.OverallMetricCalculator.TryCalculateGraphMetrics(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,Microsoft.NodeXL.Algorithms.OverallMetrics@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread, and provides the metrics in
             a type-safe manner.
             </summary>
            
             <param name="graph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="backgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="overallMetrics">
             Where the graph metrics get stored if true is returned.  See the class
             notes for details on the type.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.OverallMetricCalculator.TryCalculateGraphMetricsCore(Microsoft.NodeXL.Core.IGraph,System.ComponentModel.BackgroundWorker,System.Object@)">
             <summary>
             Attempts to calculate a set of one or more related metrics while
             optionally running on a background thread.
             </summary>
            
             <param name="oGraph">
             The graph to calculate metrics for.  The graph may contain duplicate
             edges and self-loops.
             </param>
            
             <param name="oBackgroundWorker">
             The BackgroundWorker whose thread is calling this method, or null if
             the method is being called by some other thread.
             </param>
            
             <param name="oGraphMetrics">
             Where the graph metrics get stored if true is returned.  See the class
             notes for details on the type.
             </param>
            
             <returns>
             true if the graph metrics were calculated, false if the user wants to
             cancel.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.OverallMetricCalculator.CountSelfLoops(Microsoft.NodeXL.Core.IGraph)">
             <summary>
             Counts the number of self-loops in the graph.
             </summary>
            
             <param name="oGraph">
             The graph to calculate metrics for.
             </param>
            
             <returns>
             The number of self-loops in the graph.
             </returns>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.OverallMetricCalculator.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.OverallMetricCalculator.GraphMetricDescription">
             <summary>
             Gets a description of the graph metrics calculated by the
             implementation.
             </summary>
            
             <value>
             A description suitable for use within the sentence "Calculating
             [GraphMetricDescription]."
             </value>
        </member>
        <member name="T:Microsoft.NodeXL.Algorithms.OverallMetrics">
            <summary>
            Stores the overall metrics for a graph.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.OverallMetrics.NoGraphDensity">
            <summary>
            Value of the <see cref="P:Microsoft.NodeXL.Algorithms.OverallMetrics.GraphDensity"/> property if the graph density
            can't be calculated.
            </summary>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.OverallMetrics.#ctor(Microsoft.NodeXL.Core.GraphDirectedness,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NodeXL.Algorithms.OverallMetrics"/> class.
             </summary>
            
             <param name="directedness">
             The graph's directedness.
             </param>
            
             <param name="uniqueEdges">
             The number of unique edges.
             </param>
            
             <param name="edgesWithDuplicates">
             The number of edges that have duplicates.
             </param>
            
             <param name="totalEdges">
             The total number of edges.
             </param>
            
             <param name="selfLoops">
             The number of self-loops.
             </param>
            
             <param name="vertices">
             The number of vertices.
             </param>
            
             <param name="graphDensity">
             The graph's density, or <see cref="F:Microsoft.NodeXL.Algorithms.OverallMetrics.NoGraphDensity"/> if the graph
             density can't be calculated.
             </param>
        </member>
        <member name="M:Microsoft.NodeXL.Algorithms.OverallMetrics.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.OverallMetrics.m_eDirectedness">
            The graph's directedness.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.OverallMetrics.m_iUniqueEdges">
            The number of unique edges.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.OverallMetrics.m_iEdgesWithDuplicates">
            The number of edges that have duplicates.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.OverallMetrics.m_iTotalEdges">
            The total number of edges.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.OverallMetrics.m_iSelfLoops">
            The number of self-loops.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.OverallMetrics.m_iVertices">
            The number of vertices.
        </member>
        <member name="F:Microsoft.NodeXL.Algorithms.OverallMetrics.m_dGraphDensity">
            The graph's density, or NoGraphDensity.
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.OverallMetrics.Directedness">
             <summary>
             Gets the graph's directedness.
             </summary>
            
             <value>
             The graph's directedness.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.OverallMetrics.UniqueEdges">
             <summary>
             Gets the number of unique edges.
             </summary>
            
             <value>
             The number of unique edges.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.OverallMetrics.EdgesWithDuplicates">
             <summary>
             Gets the number of edges that have duplicates.
             </summary>
            
             <value>
             The number of edges that have duplicates.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.OverallMetrics.TotalEdges">
             <summary>
             Gets the total number of edges.
             </summary>
            
             <value>
             The total number of edges.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.OverallMetrics.SelfLoops">
             <summary>
             Gets the number of self-loops.
             </summary>
            
             <value>
             The number of self-loops.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.OverallMetrics.Vertices">
             <summary>
             Gets the number of vertices.
             </summary>
            
             <value>
             The number of vertices.
             </value>
        </member>
        <member name="P:Microsoft.NodeXL.Algorithms.OverallMetrics.GraphDensity">
             <summary>
             Gets the graph's density.
             </summary>
            
             <value>
             The graph's density, or <see cref="F:Microsoft.NodeXL.Algorithms.OverallMetrics.NoGraphDensity"/> if the graph
             density can't be calculated.
             </value>
        </member>
    </members>
</doc>
