<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Smrf.NodeXL.Core</name>
    </assembly>
    <members>
        <member name="T:Smrf.AppLib.ArgumentChecker">
             <summary>
             Contains methods that check method arguments and property values.
             </summary>
            
             <remarks>
             This can be used by a class that wants to check values passed to its
             property setters and arguments passed to its methods.  The CheckXXX()
             methods in this class throw an exception if a parameter value or method
             argument is invalid.
            
             <para>
             This class is marked internal to avoid compiler error CS0433 ("The
             type ... exists in both ...") when an executable references two or more
             assemblies that use this class.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.#ctor(System.String)">
             <summary>
             Initializes a new instance of the ArgumentChecker class.
             </summary>
            
             <param name="sOwnerClassName">
             Class name of the object that created this object.  The class name gets
             prepended to all exception messages.  Sample: "MyClass".
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotNull(System.String,System.Object)">
             <summary>
             Throws an exception if a property value is null.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotEmpty(System.String,System.String)">
             <summary>
             Throws an exception if a string property value is null or has a length
             of zero.
             </summary>
            
             <param name="sPropertyName">
             Name of the string property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Double)">
             <summary>
             Throws an exception if a Double property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Decimal)">
             <summary>
             Throws an exception if a Decimal property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="decPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotNegative(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is negative.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
            
             <param name="sInvalidValue">
             Invalid value for <paramref name="sPropertyValue" />.  Can't be null.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iInvalidValue">
             Invalid value for <paramref name="iPropertyValue" />.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Int32,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="iMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Single,System.Single,System.Single)">
             <summary>
             Throws an exception if a Single property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="fPropertyValue">
             Property value to check.
             </param>
            
             <param name="fMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="fMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Double,System.Double,System.Double)">
             <summary>
             Throws an exception if a Double property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
            
             <param name="dMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="dMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyIsDefined(System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a property value is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oPropertyValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentNotNull(System.String,System.String,System.Object)">
             <summary>
             Throws an exception if a method argument is null.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentNotEmpty(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string method argument is null or has a length
             of zero.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="sArgumentValue">
             Argument value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Double)">
             <summary>
             Throws an exception if a Double method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="dArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentInRange(System.String,System.String,System.Double,System.Double,System.Double)">
             <summary>
             Throws an exception if a Double method argument is not within a
             specified range.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="dArgumentValue">
             Argument to check.
             </param>
            
             <param name="dMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="dMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentIsDefined(System.String,System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a method argument is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oArgumentValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is an inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Smrf.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is no inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Smrf.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is an inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Smrf.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is no inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Smrf.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.ArgumentChecker.m_sOwnerClassName">
            Class name of the object that created this object.
        </member>
        <member name="T:Smrf.NodeXL.Core.EdgeCollection">
             <summary>
             Represents a collection of edges.
             </summary>
            
             <remarks>
             This is a collection of objects that implement the <see cref="T:Smrf.NodeXL.Core.IEdge"/>
             interface.  You can add edges to the collection, remove them, access an
             edge, and enumerate all edges.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Core.NodeXLBase">
            <summary>
            Base class for most classes in the <see cref="N:Smrf.NodeXL.Core"/>
            namespace.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.NodeXLBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.NodeXLBase"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.NodeXLBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.NodeXLBase.Int32Format">
            <summary>
            String format used for most Int32s.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.NodeXLBase.SingleFormat">
            <summary>
            String format used for most Singles.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.NodeXLBase.DoubleFormat">
            <summary>
            String format used for most Doubles.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.Core.NodeXLBase.ClassName">
             <summary>
             Gets the full name of the derived class.
             </summary>
            
             <value>
             The full name of the derived class, suitable for use in error messages.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Core.NodeXLBase.ArgumentChecker">
             <summary>
             Gets a new initialized <see cref="P:Smrf.NodeXL.Core.NodeXLBase.ArgumentChecker"/> object.
             </summary>
            
             <value>
             A new initialized <see cref="P:Smrf.NodeXL.Core.NodeXLBase.ArgumentChecker"/> object.
             </value>
            
             <remarks>
             The returned object can be used to check the validity of property
             values and method parameters.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Core.IEdgeCollection">
             <summary>
             Represents a collection of edges.
             </summary>
            
             <remarks>
             This is a collection of objects that implement the <see cref="T:Smrf.NodeXL.Core.IEdge"/>
             interface.  You can add edges to the collection, remove them, access an
             edge, and enumerate all edges.
             </remarks>
            
             <seealso cref="T:Smrf.NodeXL.Core.EdgeCollection"/>
             <seealso cref="T:Smrf.NodeXL.Core.IEdge"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.IEdgeCollection.Add(Smrf.NodeXL.Core.IVertex,Smrf.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Creates an edge and adds it to the collection.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <param name="isDirected">
             If true, <paramref name="vertex1"/> is the edge's back vertex and
             <paramref name="vertex2"/> is the edge's front vertex.  If false, the
             edge is undirected.
             </param>
            
             <returns>
             The new edge, as an <see cref="T:Smrf.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             This method creates an edge, connects it to the specified vertices, and
             adds the edge to the collection.
            
             <para>
             An exception is thrown if <paramref name="isDirected"/> is
             incompatible with the <see cref="P:Smrf.NodeXL.Core.IGraph.Directedness"/> property on
             the graph that owns this edge collection.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IEdgeCollection.Add(Smrf.NodeXL.Core.IVertex,Smrf.NodeXL.Core.IVertex)">
             <summary>
             Creates an undirected edge and adds it to the collection.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <returns>
             The new undirected edge, as an <see cref="T:Smrf.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             This method creates an undirected edge, connects it to the specified
             vertices, and adds the edge to the collection.
            
             <para>
             An exception is thrown if the graph that owns this edge collection has
             a <see cref="P:Smrf.NodeXL.Core.IGraph.Directedness"/> value of <see cref="F:Smrf.NodeXL.Core.GraphDirectedness.Directed"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IEdgeCollection.Contains(System.Int32)">
             <summary>
             Determines whether the collection contains an edge specified by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>
             </summary>
            
             <param name="id">
             The ID to search for.
             </param>
            
             <returns>
             true if the collection contains an edge with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.
             </returns>
            
             <remarks>
             IDs are unique among all edges, so there can be only one edge with the
             specified ID.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IEdgeCollection.Contains(System.String)">
             <summary>
             Determines whether the collection contains an edge specified by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>
             </summary>
            
             <param name="name">
             The name to search for.  Can't be null or empty.
             </param>
            
             <returns>
             true if the collection contains an edge with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.
             </returns>
            
             <remarks>
             Names do not have to be unique, so there could be more than one edge
             with the same name.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IEdgeCollection.Find(System.Int32,Smrf.NodeXL.Core.IEdge@)">
             <overloads>
             Searches for a specified edge.
             </overloads>
            
             <summary>
             Searches for an edge with the specified <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>.
             </summary>
            
             <param name="id">
             The <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> of the edge to search for.
             </param>
            
             <param name="edge">
             Gets set to the specified <see cref="T:Smrf.NodeXL.Core.IEdge"/> if true is returned,
             or to null if false is returned.
             </param>
            
             <returns>
             true if an edge with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/> is found, false if not.
             </returns>
            
             <remarks>
             This method searches the collection for an edge with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.  If such an
             edge is found, it gets stored at <paramref name="edge"/> and true is
             returned.  Otherwise, <paramref name="edge"/> gets set to null and
             false is returned.
            
             <para>
             IDs are unique among all edges, so there can be only one edge with the
             specified ID.
             </para>
            
             <para>
             Use <see cref="M:Smrf.NodeXL.Core.IEdgeCollection.Contains(System.Int32)"/> if you want to determine whether
             such an edge exists in the collection but you don't need the actual
             edge.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IEdgeCollection.Find(System.String,Smrf.NodeXL.Core.IEdge@)">
             <summary>
             Searches for the first edge with the specified <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>.
             </summary>
            
             <param name="name">
             The <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> of the edge to search for.
             Can't be null or empty.
             </param>
            
             <param name="edge">
             Gets set to the specified <see cref="T:Smrf.NodeXL.Core.IEdge"/> if true is returned, or
             to null if false is returned.
             </param>
            
             <returns>
             true if an edge with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>
             <paramref name="name"/> is found, false if not.
             </returns>
            
             <remarks>
             This method searches the collection for the first edge with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.  If such
             an edge is found, it gets stored at <paramref name="edge"/> and true
             is returned.  Otherwise, <paramref name="edge"/> gets set to null and
             false is returned.
            
             <para>
             Names do not have to be unique, so there could be more than one edge
             with the same name.
             </para>
            
             <para>
             Use <see cref="M:Smrf.NodeXL.Core.IEdgeCollection.Contains(System.String)"/> if you want to determine whether
             such an edge exists in the collection but you don't need the actual
             edge.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IEdgeCollection.GetConnectingEdges(Smrf.NodeXL.Core.IVertex,Smrf.NodeXL.Core.IVertex)">
             <summary>
             Gets a collection of edges that connect two specified vertices.
             </summary>
            
             <param name="vertex1">
             First vertex.  Must belong to the parent graph.
             </param>
            
             <param name="vertex2">
             Second vertex.  Must belong to the parent graph.
             </param>
            
             <returns>
             A collection of zero or more edges that connect <paramref name="vertex1"/> to <paramref name="vertex2"/>, as a collection of
             <see cref="T:Smrf.NodeXL.Core.IEdge"/> objects.
             </returns>
            
             <remarks>
             This method returns a collection of all edges that connect <paramref name="vertex1"/> to <paramref name="vertex2"/>.  The directedness of
             the edges is not considered.
            
             <para>
             If there are no such edges, the returned collection is empty.  The
             returned value is never null.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IEdgeCollection.Remove(System.Int32)">
             <summary>
             Removes an edge specified by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> from
             the collection.
             </summary>
            
             <param name="id">
             The ID of the edge to remove.
             </param>
            
             <returns>
             true if the edge was removed, false if the edge wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for an edge with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.  If found, it
             is removed from the collection and true is returned.  false is returned
             otherwise.
            
             <para>
             The edge is unusable once it is removed from the collection.
             Attempting to access the edge's properties or methods will lead to
             unpredictable results.
             </para>
            
             <para>
             IDs are unique among all edges, so there can be only one vertex with
             the specified ID.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IEdgeCollection.Remove(System.String)">
             <summary>
             Removes an edge specified by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>
             from the collection.
             </summary>
            
             <param name="name">
             The name of the edge to remove.  Can't be null or empty.
             </param>
            
             <returns>
             true if the edge was removed, false if the edge wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for the first edge with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.  If
             found, it is removed from the collection and true is returned.  false
             is returned otherwise.
            
             <para>
             The edge is unusable once it is removed from the collection.
             Attempting to access the edge's properties or methods will lead to
             unpredictable results.
             </para>
            
             <para>
             Names do not have to be unique, so there could be more than one edge
             with the same name.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IEdgeCollection.RemoveDuplicates">
             <summary>
             Removes duplicate edges from the collection.
             </summary>
            
             <remarks>
             If the graph is directed, edges are considered duplicates if they
             connect the same vertex pair in the same order.  If the graph is
             undirected, edges are considered duplicates if they connect the same
             vertex pair.
             </remarks>
        </member>
        <member name="E:Smrf.NodeXL.Core.IEdgeCollection.EdgeAdded">
            <summary>
            Occurs when an edge is added to the collection.
            </summary>
        </member>
        <member name="E:Smrf.NodeXL.Core.IEdgeCollection.EdgeRemoved">
            <summary>
            Occurs when an edge is removed from the collection.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.#ctor(Smrf.NodeXL.Core.IGraph)">
             <summary>
             Initializes a new instance of the EdgeCollection class.
             </summary>
            
             <param name="graph">
             <see cref="T:Smrf.NodeXL.Core.IGraph"/> to which the new collection belongs.  Can't be
             null.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.Add(Smrf.NodeXL.Core.IEdge)">
             <overloads>
             Adds an edge to the collection.
             </overloads>
            
             <summary>
             Adds an existing edge to the collection.
             </summary>
            
             <param name="edge">
             The edge to add to the collection.
             </param>
            
             <remarks>
             An exception is thrown if <paramref name="edge"/> is already in this
             collection or in another edge collection.
            
             <para>
             An exception is thrown if the directedness of <paramref name="edge"/>
             is incompatible with the <see cref="P:Smrf.NodeXL.Core.IGraph.Directedness"/> property on
             the graph that owns this edge collection.
             </para>
             
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.Add(Smrf.NodeXL.Core.IVertex,Smrf.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Creates an edge and adds it to the collection.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <param name="isDirected">
             If true, <paramref name="vertex1"/> is the edge's back vertex and
             <paramref name="vertex2"/> is the edge's front vertex.  If false, the
             edge is undirected.
             </param>
            
             <returns>
             The added edge.
             </returns>
            
             <remarks>
             This method creates an edge, connects it to the specified vertices, and
             adds the edge to the collection.
            
             <para>
             An exception is thrown if <paramref name="isDirected"/> is
             incompatible with the <see cref="P:Smrf.NodeXL.Core.IGraph.Directedness"/> property on
             the graph that owns this edge collection.
             </para>
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.Add(Smrf.NodeXL.Core.IVertex,Smrf.NodeXL.Core.IVertex)">
             <summary>
             Creates an undirected edge and adds it to the collection.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must be contained in the graph
             that owns this edge collection.
             </param>
            
             <returns>
             The new undirected edge.
             </returns>
            
             <remarks>
             This method creates an undirected edge, connects it to the specified
             vertices, and adds the edge to the collection.
            
             <para>
             An exception is thrown if the graph that owns this edge collection has
             a <see cref="P:Smrf.NodeXL.Core.IGraph.Directedness"/> value of <see cref="F:Smrf.NodeXL.Core.GraphDirectedness.Directed"/>.
             </para>
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.Clear">
             <summary>
             Removes all edges from the collection.
             </summary>
            
             <remarks>
             Do not call this method if you are using NodeXLControl.  To clear the
             graph within NodeXLControl, use NodeXLControl.ClearGraph().
            
             <para>
             This method is an O(n) operation, where n is the number of vertices in
             the parent graph.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.RemoveDuplicates">
             <summary>
             Removes duplicate edges from the collection.
             </summary>
            
             <remarks>
             If the graph is directed, the edges (A,B) and (A,B) are duplicates, but
             the edges (A,B) and (B,A) are not.
            
             <para>
             If the graph is undirected, the edges (A,B) and (A,B) are duplicates,
             and so are the edges (A,B) and (B,A).
             </para>
            
             <para>
             It is not possible to control or predict which of the duplicate edges
             will be removed.
             </para>
            
             <para>
             This method is an O(n * e) operation, where n is the number of vertices
             in the parent graph and e is the number of edges.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.Contains(Smrf.NodeXL.Core.IEdge)">
             <overloads>
             Determines whether the collection contains a specified edge.
             </overloads>
            
             <summary>
             Determines whether the collection contains an edge specified by
             reference.
             </summary>
            
             <param name="edge">
             The edge to search for.
             </param>
            
             <returns>
             true if the collection contains <paramref name="edge" />.
             </returns>
            
             <remarks>
             This method is an O(n) operation, where n is the number of edges
             incident to <paramref name="edge" />'s first vertex.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.Contains(System.Int32)">
             <summary>
             Determines whether the collection contains an edge specified by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>
             </summary>
            
             <param name="id">
             The ID to search for.
             </param>
            
             <returns>
             true if the collection contains an edge with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.
             </returns>
            
             <remarks>
             IDs are unique among all edges, so there can be only one edge with the
             specified ID.
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.EdgeCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.Contains(System.String)">
             <summary>
             Determines whether the collection contains an edge specified by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>
             </summary>
            
             <param name="name">
             The name to search for.  Can't be null or empty.
             </param>
            
             <returns>
             true if the collection contains an edge with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.
             </returns>
            
             <remarks>
             Names do not have to be unique, so there could be more than one edge
             with the same name.
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.EdgeCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.CopyTo(Smrf.NodeXL.Core.IEdge[],System.Int32)">
             <summary>
             Copies the elements of the collection to an array, starting at a
             particular array index.
             </summary>
            
             <param name="array">
             The one-dimensional array that is the destination of the elements
             copied from the collection.  The array must have zero-based indexing. 
             </param>
            
             <param name="index">
             The zero-based index in <paramref name="array"/> at which copying
             begins. 
             </param>
            
             <remarks>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.EdgeCollection.Count"/>.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.Find(System.Int32,Smrf.NodeXL.Core.IEdge@)">
             <overloads>
             Searches for a specified edge.
             </overloads>
            
             <summary>
             Searches for an edge with the specified <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>.
             </summary>
            
             <param name="id">
             The <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> of the edge to search for.
             </param>
            
             <param name="edge">
             Gets set to the specified <see cref="T:Smrf.NodeXL.Core.IEdge"/> if true is returned,
             or to null if false is returned.
             </param>
            
             <returns>
             true if an edge with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/> is found, false if not.
             </returns>
            
             <remarks>
             This method searches the collection for an edge with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.  If such an
             edge is found, it gets stored at <paramref name="edge"/> and true is
             returned.  Otherwise, <paramref name="edge"/> gets set to null and
             false is returned.
            
             <para>
             IDs are unique among all edges, so there can be only one edge with the
             specified ID.
             </para>
            
             <para>
             Use <see cref="M:Smrf.NodeXL.Core.EdgeCollection.Contains(System.Int32)"/> if you want to determine whether
             such an edge exists in the collection but you don't need the actual
             edge.
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.EdgeCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.Find(System.String,Smrf.NodeXL.Core.IEdge@)">
             <summary>
             Searches for the first edge with the specified <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>.
             </summary>
            
             <param name="name">
             The <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> of the edge to search for.
             Can't be null or empty.
             </param>
            
             <param name="edge">
             Gets set to the specified <see cref="T:Smrf.NodeXL.Core.IEdge"/> if true is returned, or
             to null if false is returned.
             </param>
            
             <returns>
             true if an edge with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>
             <paramref name="name"/> is found, false if not.
             </returns>
            
             <remarks>
             This method searches the collection for the first edge with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.  If such
             an edge is found, it gets stored at <paramref name="edge"/> and true
             is returned.  Otherwise, <paramref name="edge"/> gets set to null and
             false is returned.
            
             <para>
             Names do not have to be unique, so there could be more than one edge
             with the same name.
             </para>
            
             <para>
             Use <see cref="M:Smrf.NodeXL.Core.EdgeCollection.Contains(System.String)"/> if you want to determine whether
             such an edge exists in the collection but you don't need the actual
             edge.
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.EdgeCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.GetConnectingEdges(Smrf.NodeXL.Core.IVertex,Smrf.NodeXL.Core.IVertex)">
             <summary>
             Gets a collection of edges that connect two specified vertices.
             </summary>
            
             <param name="vertex1">
             First vertex.  Must belong to the parent graph.
             </param>
            
             <param name="vertex2">
             Second vertex.  Must belong to the parent graph.
             </param>
            
             <returns>
             An array of zero or more edges that connect <paramref name="vertex1"/>
             to <paramref name="vertex2"/>, as a collection of <see cref="T:Smrf.NodeXL.Core.IEdge"/>
             objects.
             </returns>
            
             <remarks>
             This method returns a collection of all edges that connect <paramref name="vertex1"/> to <paramref name="vertex2"/>.  The directedness of
             the edges is not considered.
            
             <para>
             If there are no such edges, the returned array is empty.  The returned
             value is never null.
             </para>
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is returned in
             the array only if <paramref name="vertex1"/> and <paramref name="vertex2"/> are the same vertex.
             </para>
            
             <para>
             This method is an O(n) operation, where n is the number of edges
             incident to <paramref name="vertex1"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.GetEnumerator">
             <summary>
             Returns an enumerator that iterates through the collection. 
             </summary>
            
             <returns>
             An enumerator object that can be used to iterate through the
             collection. 
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.System#Collections#IEnumerable#GetEnumerator">
             <summary>
             Returns an enumerator that iterates through the collection. 
             </summary>
            
             <returns>
             An enumerator object that can be used to iterate through the
             collection. 
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.Remove(Smrf.NodeXL.Core.IEdge)">
             <overloads>
             Removes an edge from the collection.
             </overloads>
            
             <summary>
             Removes an edge specified by reference from the collection.
             </summary>
            
             <param name="edge">
             The edge to remove from the collection.
             </param>
            
             <returns>
             true if the edge was removed, false if the edge wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for <paramref name="edge" />.  If
             found, it is removed from the collection and true is returned.  false
             is returned otherwise.
            
             <para>
             The edge is unusable once it is removed from the collection.
             Attempting to access the edge's properties or methods will lead to
             unpredictable results.
             </para>
            
             <para>
             This method is an O(n) operation, where n is the number of edges
             incident to the edge's vertices.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.Remove(System.Int32)">
             <summary>
             Removes an edge specified by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> from
             the collection.
             </summary>
            
             <param name="id">
             The ID of the edge to remove.
             </param>
            
             <returns>
             true if the edge was removed, false if the edge wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for an edge with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.  If found, it
             is removed from the collection and true is returned.  false is returned
             otherwise.
            
             <para>
             The edge is unusable once it is removed from the collection.
             Attempting to access the edge's properties or methods will lead to
             unpredictable results.
             </para>
            
             <para>
             IDs are unique among all edges, so there can be only one vertex with
             the specified ID.
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.EdgeCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.Remove(System.String)">
             <summary>
             Removes an edge specified by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>
             from the collection.
             </summary>
            
             <param name="name">
             The name of the edge to remove.  Can't be null or empty.
             </param>
            
             <returns>
             true if the edge was removed, false if the edge wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for the first edge with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.  If
             found, it is removed from the collection and true is returned.  false
             is returned otherwise.
            
             <para>
             The edge is unusable once it is removed from the collection.
             Attempting to access the edge's properties or methods will lead to
             unpredictable results.
             </para>
            
             <para>
             Names do not have to be unique, so there could be more than one edge
             with the same name.
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.EdgeCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.ToString">
             <summary>
             Formats the value of the current instance.
             </summary>
            
             <returns>
             The formatted string.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.GetIncomingOrOutgoingEdges(Smrf.NodeXL.Core.Vertex,System.Boolean,System.Boolean)">
             <summary>
             Gets a collection of a vertex's incoming or outgoing edges.
             </summary>
            
             <param name="oVertex">
             <see cref="T:Smrf.NodeXL.Core.Vertex"/> to get edges for.
             </param>
            
             <param name="bIncludeIncoming">
             true to include the vertex's incoming edges.
             </param>
            
             <param name="bIncludeOutgoing">
             true to include the vertex's outgoing edges.
             </param>
            
             <returns>
             A collection of the vertex's zero or more incoming or outgoing edges
             (or both), as a collection of <see cref="T:Smrf.NodeXL.Core.IEdge"/> objects.
             </returns>
            
             <remarks>
             An incoming edge is either a directed edge that has the vertex at its
             front, or an undirected edge connected to the vertex.
            
             <para>
             An outgoing edge is either a directed edge that has the vertex at its
             back, or an undirected edge connected to the vertex.
             </para>
            
             <para>
             If there are no such edges, the returned collection is empty.  The
             returned value is never null.
             </para>
            
             <para>
             This method is an O(n) operation, where n is the number of edges
             incident to <paramref name="oVertex"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.GetPredecessorOrSuccessorVertices(Smrf.NodeXL.Core.Vertex,System.Boolean,System.Boolean)">
             <summary>
             Gets a collection of a vertex's predecessor or successor vertices, or
             both.
             </summary>
            
             <param name="oVertex">
             <see cref="T:Smrf.NodeXL.Core.Vertex"/> to get predecessor or successor vertices for.
             </param>
            
             <param name="bIncludePredecessor">
             true to include the vertex's predecessor vertices.
             </param>
            
             <param name="bIncludeSuccessor">
             true to include the vertex's successor vertices.
             </param>
            
             <returns>
             A collection of the vertex's zero or more predecessor or successor
             vertices, as a collection of <see cref="T:Smrf.NodeXL.Core.IVertex"/> objects.
             </returns>
            
             <remarks>
             A predecessor vertex is a vertex at the other side of an incoming edge.
             (An incoming edge is either a directed edge that has this vertex at its
             front, or an undirected edge connected to this vertex.)
            
             <para>
             A successor vertex is a vertex at the other side of an outgoing edge.
             (An outgoing edge is either a directed edge that has this vertex at its
             back, or an undirected edge connected to this vertex.)
             </para>
            
             <para>
             If there are no such vertices, the returned collection is empty.  The
             returned value is never null.
             </para>
            
             <para>
             This method is an O(n) operation, where n is the number of edges
             incident to <paramref name="oVertex"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.RemoveAllFromGroup(Smrf.NodeXL.Core.Vertex)">
             <summary>
             Removes all edges from a vertex's group of incident edges.
             </summary>
            
             <param name="oVertex">
             <see cref="T:Smrf.NodeXL.Core.Vertex"/> to remove all incident edges from.
             </param>
            
             <remarks>
             Each edge incident to the vertex is stored twice, once in the vertex's
             group of incident edges and once in the adjacent vertex's group of
             incident edges.  This method removes all such edges, including the
             duplicated ones.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.GetDegree(Smrf.NodeXL.Core.Vertex)">
             <summary>
             Gets a vertex's degree.
             </summary>
            
             <param name="oVertex">
             <see cref="T:Smrf.NodeXL.Core.Vertex"/> to get the degree for.
             </param>
            
             <returns>
             The vertex's degree.
             </returns>
            
             <remarks>
             The degree of a vertex is the number of edges that are incident to it.
             (An incident edge is an edge that is connected to this vertex.)
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one incident edge.
             </para>
            
             <para>
             This method is an O(n) operation, where n is the number of edges
             incident to <paramref name="oVertex"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.AddToGroup(Smrf.NodeXL.Core.IEdge,Smrf.NodeXL.Core.Vertex)">
             <summary>
             Adds an edge to a vertex's group of incident edges.
             </summary>
            
             <param name="oEdge">
             The edge to add to the group.
             </param>
            
             <param name="oVertex">
             The vertex to add the edge to.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.RemoveFromGroup(Smrf.NodeXL.Core.IEdge,Smrf.NodeXL.Core.Vertex)">
             <summary>
             Removes an edge from a vertex's group of incident edges.
             </summary>
            
             <param name="oEdge">
             The edge to remove from the group.
             </param>
            
             <param name="oVertex">
             The vertex whose group the edge should be removed from.
             </param>
            
             <returns>
             true if the edge was removed, false if the edge wasn't found in the
             vertex's group.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.Find(System.Boolean,System.Int32,System.String,Smrf.NodeXL.Core.IEdge@)">
             <summary>
             Searches for an edge with the specified <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> or <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>.
             </summary>
            
             <param name="bByID">
             true to search by ID, false to search by name.
             </param>
            
             <param name="iID">
             The <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> of the edge to search for if
             <paramref name="bByID"/> is true.
             </param>
            
             <param name="sName">
             The <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> of the edge to search for if
             <paramref name="bByID"/> is false.  Can't be null or empty if
             <paramref name="bByID"/> is false.
             </param>
            
             <param name="oEdge">
             Gets set to the specified <see cref="T:Smrf.NodeXL.Core.IEdge"/> if true is returned,
             or to null if false is returned.
             </param>
            
             <returns>
             true if the specified edge is found, false if not.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.OnEdgeAdded(Smrf.NodeXL.Core.IEdge)">
             <summary>
             Gets called when an edge is added to the collection.
             </summary>
            
             <param name="oEdge">
             The added edge.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.OnEdgeRemoved(Smrf.NodeXL.Core.IEdge,System.Boolean)">
             <summary>
             Gets called when an edge is removed from the collection.
             </summary>
            
             <param name="oEdge">
             The removed edge.
             </param>
            
             <param name="bFireEdgeRemoved">
             true to fire the <see cref="E:Smrf.NodeXL.Core.EdgeCollection.EdgeRemoved"/> event.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.EdgeToVertices(Smrf.NodeXL.Core.IEdge,System.String,System.String,Smrf.NodeXL.Core.Vertex@,Smrf.NodeXL.Core.Vertex@)">
             <summary>
             Obtains an edge's two <see cref="T:Smrf.NodeXL.Core.Vertex"/> objects.
             </summary>
            
             <param name="oEdge">
             The edge connecting the two <see cref="T:Smrf.NodeXL.Core.Vertex"/> objects.
             </param>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the edge argument.
             </param>
            
             <param name="oVertex1">
             Where the edge's first <see cref="T:Smrf.NodeXL.Core.Vertex"/> gets stored.
             </param>
            
             <param name="oVertex2">
             Where the edge's second <see cref="T:Smrf.NodeXL.Core.Vertex"/> gets stored.
             </param>
            
             <remarks>
             This method obtains an edge's two <see cref="T:Smrf.NodeXL.Core.Vertex"/> objects and
             stores them at <paramref name="oVertex1"/> and <paramref name="oVertex2"/>.  An exception is thrown if the edge is null or the
             edge's vertices are null or of the incorrect type.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.IVertexToVertex(Smrf.NodeXL.Core.IVertex,System.String)">
             <summary>
             Casts an <see cref="T:Smrf.NodeXL.Core.IVertex"/> to a <see cref="T:Smrf.NodeXL.Core.Vertex"/> object.
             </summary>
            
             <param name="oVertex">
             The <see cref="T:Smrf.NodeXL.Core.IVertex"/> to cast to a <see cref="T:Smrf.NodeXL.Core.Vertex"/> object.
             </param>
            
             <param name="sMethodOrPropertyName">
             Name of the method or property calling this method.
             </param>
            
             <returns>
             The <see cref="T:Smrf.NodeXL.Core.Vertex"/> object.
             </returns>
            
             <remarks>
             An exception is thrown if <paramref name="oVertex"/> is null or not of
             type <see cref="T:Smrf.NodeXL.Core.Vertex"/>.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.CheckDirectednessBeforeAddingEdge(System.Boolean,System.String)">
             <summary>
             Checks whether the directedness of an edge is compatible with the graph
             that owns this edge collection.
             </summary>
            
             <param name="bEdgeIsDirected">
             true if the edge is directed, false if undirected.
             </param>
            
             <param name="sArgumentName">
             Name of the argument that determines the directedness of the edge.
             </param>
            
             <remarks>
             This is meant to be called from the <see cref="M:Smrf.NodeXL.Core.EdgeCollection.Add(Smrf.NodeXL.Core.IEdge)"/> methods.
             An exception is thrown if <paramref name="bEdgeIsDirected"/> is
             incompatible with the <see cref="P:Smrf.NodeXL.Core.IGraph.Directedness"/> property on
             the graph that owns this edge collection.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.CheckVertex(Smrf.NodeXL.Core.IVertex,System.String,System.String)">
             <summary>
             Checks whether a vertex is contained in the graph that owns this edge
             collection.
             </summary>
            
             <param name="oVertex">
             Vertex to check.
             </param>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to use in error messages.
             </param>
            
             <remarks>
             An exception is thrown if <paramref name="oVertex" /> is null or is not
             contained in the graph that owns this edge collection.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeCollection.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.EdgeCollection.m_oParentGraph">
            Graph that owns this collection.
        </member>
        <member name="F:Smrf.NodeXL.Core.EdgeCollection.m_oLinkedList">
            LinkedList of IEdge interfaces.
        </member>
        <member name="F:Smrf.NodeXL.Core.EdgeCollection.m_iEdges">
            Number of unique edges in m_oLinkedList.
        </member>
        <member name="P:Smrf.NodeXL.Core.EdgeCollection.Count">
             <summary>
             Gets the number of elements contained in the collection.
             </summary>
            
             <value>
             The number of elements contained in the collection.
             </value>
            
             <remarks>
             This method is an O(1) operation.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.EdgeCollection.IsReadOnly">
             <summary>
             Gets a value indicating whether the collection is read-only.
             </summary>
            
             <value>
             true if the collection is read-only.
             </value>
            
             <remarks>
             This method is an O(1) operation.
             </remarks>
        </member>
        <member name="E:Smrf.NodeXL.Core.EdgeCollection.EdgeAdded">
            <summary>
            Occurs when an edge is added to the collection.
            </summary>
        </member>
        <member name="E:Smrf.NodeXL.Core.EdgeCollection.EdgeRemoved">
            <summary>
            Occurs when an edge is removed from the collection.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Core.MetadataProvider">
             <summary>
             Provides metadata for an instance of a class that implements <see cref="T:Smrf.NodeXL.Core.IMetadataProvider"/>.
             </summary>
            
             <remarks>
             This can be used by a client class that must implement the <see cref="T:Smrf.NodeXL.Core.IMetadataProvider"/> interface.  It stores the Tag and all arbitrary
             key/value pairs for one instance of the client class.
            
             <para>
             <b>Important Note:</b>
             </para>
            
             <para>
             The key/value pairs are stored in a LinkedList.  To reduce memory usage,
             this class derives from LinkedList instead of storing a private reference
             to a LinkedList.  However, none of the public properties or methods of
             LinkedList should be called by the client.  <b>The only properties and
             methods that should be called are those that are defined in this derived
             class.</b>
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.MetadataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.MetadataProvider"/>
            class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.MetadataProvider.ContainsKey(System.String)">
             <summary>
             Determines whether a metadata value with a specified key exists.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty.
             </param>
            
             <returns>
             true if there is a metadata value with the key <paramref name="key"/>,
             false if not.
             </returns>
            
             <remarks>
             If true is returned, the metadata value can be retrieved via <see cref="M:Smrf.NodeXL.Core.MetadataProvider.TryGetValue(System.String,System.Object@)"/>.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.MetadataProvider.RemoveKey(System.String)">
             <summary>
             Removes a specified metadata key if it exists.
             </summary>
            
             <param name="key">
             The key to remove.  Can't be null or empty.
             </param>
            
             <returns>
             true if the metadata key <paramref name="key" /> was removed, false if
             there is no such key.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.MetadataProvider.SetValue(System.String,System.Object)">
             <summary>
             Sets the metadata value associated with a specified key. 
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty.  If the key already exists,
             its value gets overwritten.
             </param>
            
             <param name="value">
             The value to set.  Can be null.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.MetadataProvider.TryGetValue(System.String,System.Object@)">
             <summary>
             Attempts to get the metadata value associated with a specified key. 
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty.
             </param>
            
             <param name="value">
             Where the metadata value associated with <paramref name="key"/> gets
             stored if true is returned, as an <see cref="T:System.Object"/>.
             </param>
            
             <returns>
             true if the metadata value associated with <paramref name="key"/>
             exists, or false if not.
             </returns>
            
             <remarks>
             Values can be null.  If <paramref name="key"/> exists and its value
             is null, null is stored at <paramref name="value"/> and true is
             returned.  If <paramref name="key"/> does not exist, false is
             returned.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.MetadataProvider.CopyTo(Smrf.NodeXL.Core.IMetadataProvider,System.Boolean,System.Boolean)">
             <summary>
             Copies the instance's <see cref="P:Smrf.NodeXL.Core.MetadataProvider.Tag"/> and arbitrary key/value pairs
             to another object that implements <see cref="T:Smrf.NodeXL.Core.IMetadataProvider"/>.
             </summary>
            
             <param name="otherMetadataProvider">
             The object to copy to.
             </param>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Smrf.NodeXL.Core.MetadataProvider.SetValue(System.String,System.Object)"/>
             are copied to <paramref name="otherMetadataProvider"/>.  (This is a
             shallow copy.  The objects pointed to by the original values are NOT
             cloned.) If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property on <paramref name="otherMetadataProvider"/> is set to the same value as in this
             object.  (This is a shallow copy.  The object pointed to by this
             object's <see cref="P:Smrf.NodeXL.Core.MetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property on <paramref name="otherMetadataProvider"/> is left at its default value of null.
             </param>
            
             <remarks>
             This method can be used to assist in cloning an instance.  It copies
             the instances's <see cref="P:Smrf.NodeXL.Core.MetadataProvider.Tag"/> and arbitrary key/value pairs that
             were set with <see cref="M:Smrf.NodeXL.Core.MetadataProvider.SetValue(System.String,System.Object)"/>.  (This is a shallow copy.  The
             objects pointed to by the original values are NOT cloned.)
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.MetadataProvider.ClearMetadata">
            <summary>
            Removes all key/value pairs and sets the <see cref="P:Smrf.NodeXL.Core.MetadataProvider.Tag"/> to null.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.MetadataProvider.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.MetadataProvider.m_oTag">
            Object Tag, or null.
        </member>
        <member name="P:Smrf.NodeXL.Core.MetadataProvider.Tag">
             <summary>
             Gets or sets a single metadata object.
             </summary>
            
             <value>
             A single metadata object, as an <see cref="T:System.Object"/>.  Can be null.
             The default value is null.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Core.VertexCollection">
             <summary>
             Represents a collection of vertices.
             </summary>
            
             <remarks>
             This is a collection of objects that implement the <see cref="T:Smrf.NodeXL.Core.IVertex"/>
             interface.  You can add vertices to the collection, remove them, access
             a vertex, and enumerate all vertices.
             </remarks>
            
        </member>
        <member name="T:Smrf.NodeXL.Core.IVertexCollection">
             <summary>
             Represents a collection of vertices.
             </summary>
            
             <remarks>
             This is a collection of objects that implement the <see cref="T:Smrf.NodeXL.Core.IVertex"/>
             interface.  You can add vertices to the collection, remove them, access
             a vertex, and enumerate all vertices.
             </remarks>
            
             <seealso cref="T:Smrf.NodeXL.Core.VertexCollection"/>
             <seealso cref="T:Smrf.NodeXL.Core.IVertex"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.IVertexCollection.Add">
             <summary>
             Creates a vertex and adds it to the collection.
             </summary>
            
             <returns>
             The added vertex.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.IVertexCollection.Contains(System.Int32)">
             <summary>
             Determines whether the collection contains a vertex specified by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>
             </summary>
            
             <param name="id">
             The ID to search for.
             </param>
            
             <returns>
             true if the collection contains a vertex with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.
             </returns>
            
             <remarks>
             IDs are unique among all vertices, so there can be only one vertex with
             the specified ID.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IVertexCollection.Contains(System.String)">
             <summary>
             Determines whether the collection contains a vertex specified by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>
             </summary>
            
             <param name="name">
             The name to search for.  Can't be null or empty.
             </param>
            
             <returns>
             true if the collection contains a vertex with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.
             </returns>
            
             <remarks>
             Names do not have to be unique, so there could be more than one vertex
             with the same name.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IVertexCollection.Find(System.Int32,Smrf.NodeXL.Core.IVertex@)">
             <overloads>
             Searches for a specified vertex.
             </overloads>
            
             <summary>
             Searches for the vertex with the specified <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>.
             </summary>
            
             <param name="id">
             <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> of the vertex to search for.
             </param>
            
             <param name="vertex">
             Gets set to the specified <see cref="T:Smrf.NodeXL.Core.IVertex"/> if true is returned,
             or to null if false is returned.
             </param>
            
             <returns>
             true if a vertex with an <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> of
             <paramref name="id"/> is found, false if not.
             </returns>
            
             <remarks>
             This method searches the collection for the vertex with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.  If such a
             vertex is found, it gets stored at <paramref name="vertex"/> and true
             is returned.  Otherwise, <paramref name="vertex"/> gets set to null
             and false is returned.
            
             <para>
             IDs are unique among all vertices, so there can be only one vertex
             with the specified ID.
             </para>
            
             <para>
             Use <see cref="M:Smrf.NodeXL.Core.IVertexCollection.Contains(System.Int32)"/> if you want to determine whether
             such a vertex exists in the collection but you don't need the actual
             vertex.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IVertexCollection.Find(System.String,Smrf.NodeXL.Core.IVertex@)">
             <summary>
             Searches for the first vertex with the specified <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>.
             </summary>
            
             <param name="name">
             The <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> of the vertex to search for.
             Can't be null or empty.
             </param>
            
             <param name="vertex">
             Gets set to the specified <see cref="T:Smrf.NodeXL.Core.IVertex"/> if true is returned,
             or to null if false is returned.
             </param>
            
             <returns>
             true if a vertex with a <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> of
             <paramref name="name"/> is found, false if not.
             </returns>
            
             <remarks>
             This method searches the collection for the first vertex with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.  If such
             a vertex is found, it gets stored at <paramref name="vertex"/> and
             true is returned.  Otherwise, <paramref name="vertex"/> gets set to
             null and false is returned.
            
             <para>
             Names do not have to be unique, so there could be more than one vertex
             with the same name.
             </para>
            
             <para>
             Use <see cref="M:Smrf.NodeXL.Core.IVertexCollection.Contains(System.String)"/> if you want to determine whether
             such a vertex exists in the collection but you don't need the actual
             vertex.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IVertexCollection.Remove(System.Int32)">
             <summary>
             Removes a vertex specified by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> from
             the collection.
             </summary>
            
             <param name="id">
             The ID of the vertex to remove.
             </param>
            
             <returns>
             true if the vertex was removed, false if the vertex wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for the vertex with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.  If found, it
             is removed from the collection, any edges connected to it are removed
             from the graph that owns this vertex collection, and true is returned.
             false is returned otherwise.
            
             <para>
             IDs are unique among all vertices, so there can be only one vertex
             with the specified ID.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IVertexCollection.Remove(System.String)">
             <summary>
             Removes a vertex specified by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>
             from the collection.
             </summary>
            
             <param name="name">
             Name of the vertex to remove.  Can't be null or empty.
             </param>
            
             <returns>
             true if the vertex was removed, false if the vertex wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for the first vertex with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.  If
             found, it is removed from the collection, any edges connected to it are
             removed from the graph that owns this vertex collection, and true is
             returned.  false is returned otherwise.
            
             <para>
             Names do not have to be unique, so there could be more than one vertex
             with the same name.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IVertexCollection.GetReverseEnumerable">
             <summary>
             Returns an IEnumerable that can be used to iterate backwards through
             the collection. 
             </summary>
            
             <returns>
             An IEnumerable that can be used to iterate backwards through the
             collection. 
             </returns>
        </member>
        <member name="E:Smrf.NodeXL.Core.IVertexCollection.VertexAdded">
            <summary>
            Occurs when a vertex is added to the collection.
            </summary>
        </member>
        <member name="E:Smrf.NodeXL.Core.IVertexCollection.VertexRemoved">
            <summary>
            Occurs when a vertex is removed from the collection.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.#ctor(Smrf.NodeXL.Core.IGraph)">
             <summary>
             Initializes a new instance of the VertexCollection class.
             </summary>
            
             <param name="parentGraph">
             The <see cref="T:Smrf.NodeXL.Core.IGraph"/> that owns this collection.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.Add(Smrf.NodeXL.Core.IVertex)">
             <overloads>
             Adds a vertex to the collection.
             </overloads>
            
             <summary>
             Adds an existing vertex to the collection.
             </summary>
            
             <param name="vertex">
             The vertex to add to the collection.
             </param>
            
             <remarks>
             An exception is thrown if <paramref name="vertex" /> has already been
             added to a graph.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.Add">
             <summary>
             Creates a vertex and adds it to the collection.
             </summary>
            
             <returns>
             The added vertex.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.Clear">
             <summary>
             Removes all vertices from the collection.
             </summary>
            
             <remarks>
             This method removes all vertices from the collection and all edges from
             the graph that owns the collection.
            
             <para>
             Do not call this method if you are using NodeXLControl.  To clear the
             graph within NodeXLControl, use NodeXLControl.ClearGraph().
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.VertexCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.Contains(Smrf.NodeXL.Core.IVertex)">
             <overloads>
             Determines whether the collection contains a specified vertex.
             </overloads>
            
             <summary>
             Determines whether the collection contains a vertex specified by
             reference.
             </summary>
            
             <param name="vertex">
             The vertex to search for.
             </param>
            
             <returns>
             true if the collection contains <paramref name="vertex"/>.
             </returns>
            
             <remarks>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.VertexCollection.Count"/>.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.Contains(System.Int32)">
             <summary>
             Determines whether the collection contains a vertex specified by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>
             </summary>
            
             <param name="id">
             The ID to search for.
             </param>
            
             <returns>
             true if the collection contains a vertex with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.
             </returns>
            
             <remarks>
             IDs are unique among all vertices, so there can be only one vertex with
             the specified ID.
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.VertexCollection.Count"/>.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.VertexCollection.Find(System.Int32,Smrf.NodeXL.Core.IVertex@)"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.Contains(System.String)">
             <summary>
             Determines whether the collection contains a vertex specified by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>
             </summary>
            
             <param name="name">
             The name to search for.  Can't be null or empty.
             </param>
            
             <returns>
             true if the collection contains a vertex with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.
             </returns>
            
             <remarks>
             Names do not have to be unique, so there could be more than one vertex
             with the same name.
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.VertexCollection.Count"/>.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.VertexCollection.Find(System.String,Smrf.NodeXL.Core.IVertex@)"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.CopyTo(Smrf.NodeXL.Core.IVertex[],System.Int32)">
             <summary>
             Copies the elements of the collection to an array, starting at a
             particular array index.
             </summary>
            
             <param name="array">
             The one-dimensional array that is the destination of the elements
             copied from the collection.  The array must have zero-based indexing. 
             </param>
            
             <param name="index">
             The zero-based index in <paramref name="array"/> at which copying
             begins. 
             </param>
            
             <remarks>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.VertexCollection.Count"/>.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.Find(System.Int32,Smrf.NodeXL.Core.IVertex@)">
             <overloads>
             Searches for a specified vertex.
             </overloads>
            
             <summary>
             Searches for the vertex with the specified <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>.
             </summary>
            
             <param name="id">
             <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> of the vertex to search for.
             </param>
            
             <param name="vertex">
             Gets set to the specified <see cref="T:Smrf.NodeXL.Core.IVertex"/> if true is returned,
             or to null if false is returned.
             </param>
            
             <returns>
             true if a vertex with an <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> of
             <paramref name="id"/> is found, false if not.
             </returns>
            
             <remarks>
             This method searches the collection for the vertex with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.  If such a
             vertex is found, it gets stored at <paramref name="vertex"/> and true
             is returned.  Otherwise, <paramref name="vertex"/> gets set to null
             and false is returned.
            
             <para>
             IDs are unique among all vertices, so there can be only one vertex
             with the specified ID.
             </para>
            
             <para>
             Use <see cref="M:Smrf.NodeXL.Core.VertexCollection.Contains(System.Int32)"/> if you want to determine whether
             such a vertex exists in the collection but you don't need the actual
             vertex.
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.VertexCollection.Count"/>.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.VertexCollection.Contains(System.Int32)"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.Find(System.String,Smrf.NodeXL.Core.IVertex@)">
             <summary>
             Searches for the first vertex with the specified <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>.
             </summary>
            
             <param name="name">
             The <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> of the vertex to search for.
             Can't be null or empty.
             </param>
            
             <param name="vertex">
             Gets set to the specified <see cref="T:Smrf.NodeXL.Core.IVertex"/> if true is returned,
             or to null if false is returned.
             </param>
            
             <returns>
             true if a vertex with a <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> of
             <paramref name="name"/> is found, false if not.
             </returns>
            
             <remarks>
             This method searches the collection for the first vertex with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.  If such
             a vertex is found, it gets stored at <paramref name="vertex"/> and
             true is returned.  Otherwise, <paramref name="vertex"/> gets set to
             null and false is returned.
            
             <para>
             Names do not have to be unique, so there could be more than one vertex
             with the same name.
             </para>
            
             <para>
             Use <see cref="M:Smrf.NodeXL.Core.VertexCollection.Contains(System.String)"/> if you want to determine whether
             such a vertex exists in the collection but you don't need the actual
             vertex.
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.VertexCollection.Count"/>.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.VertexCollection.Contains(System.String)"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.GetEnumerator">
             <summary>
             Returns an enumerator that iterates through the collection. 
             </summary>
            
             <returns>
             An enumerator object that can be used to iterate through the
             collection. 
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.System#Collections#IEnumerable#GetEnumerator">
             <summary>
             Returns an enumerator that iterates through the collection. 
             </summary>
            
             <returns>
             An enumerator object that can be used to iterate through the
             collection. 
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.GetReverseEnumerable">
             <summary>
             Returns an IEnumerable that can be used to iterate backwards through
             the collection. 
             </summary>
            
             <returns>
             An IEnumerable that can be used to iterate backwards through the
             collection. 
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.Remove(Smrf.NodeXL.Core.IVertex)">
             <overloads>
             Removes a vertex from the collection.
             </overloads>
            
             <summary>
             Removes a vertex specified by reference from the collection.
             </summary>
            
             <param name="vertex">
             The vertex to remove from the collection.
             </param>
            
             <returns>
             true if the vertex was removed, false if the vertex wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for <paramref name="vertex"/>.  If
             found, it is removed from the collection, any edges connected to it are
             removed from the graph that owns this vertex collection, and true is
             returned.  false is returned otherwise.
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.VertexCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.Remove(System.Int32)">
             <summary>
             Removes a vertex specified by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> from
             the collection.
             </summary>
            
             <param name="id">
             The ID of the vertex to remove.
             </param>
            
             <returns>
             true if the vertex was removed, false if the vertex wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for the vertex with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> <paramref name="id"/>.  If found, it
             is removed from the collection, any edges connected to it are removed
             from the graph that owns this vertex collection, and true is returned.
             false is returned otherwise.
            
             <para>
             IDs are unique among all vertices, so there can be only one vertex
             with the specified ID.
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.VertexCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.Remove(System.String)">
             <summary>
             Removes a vertex specified by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>
             from the collection.
             </summary>
            
             <param name="name">
             Name of the vertex to remove.  Can't be null or empty.
             </param>
            
             <returns>
             true if the vertex was removed, false if the vertex wasn't found in the
             collection.
             </returns>
            
             <remarks>
             This method searches the collection for the first vertex with the <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> <paramref name="name"/>.  If
             found, it is removed from the collection, any edges connected to it are
             removed from the graph that owns this vertex collection, and true is
             returned.  false is returned otherwise.
            
             <para>
             Names do not have to be unique, so there could be more than one vertex
             with the same name.
             </para>
            
             <para>
             This method is an O(n) operation, where n is <see cref="P:Smrf.NodeXL.Core.VertexCollection.Count"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.ToString">
             <summary>
             Formats the value of the current instance.
             </summary>
            
             <returns>
             The formatted string.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.Find(System.Boolean,System.Int32,System.String,System.Collections.Generic.LinkedListNode{Smrf.NodeXL.Core.IVertex}@)">
             <summary>
             Searches for a vertex with the specified <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> or <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>.
             </summary>
            
             <param name="bByID">
             true to search by ID, false to search by name.
             </param>
            
             <param name="iID">
             The <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> of the vertex to search for if
             <paramref name="bByID"/> is true.
             </param>
            
             <param name="sName">
             The <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> of the vertex to search for
             if <paramref name="bByID"/> is false.  Can't be null or empty if
             <paramref name="bByID"/> is false.
             </param>
            
             <param name="oLinkedListNode">
             Gets set to the specified <see cref="T:System.Collections.Generic.LinkedListNode`1"/> if
             true is returned, or to null if false is returned.
             </param>
            
             <returns>
             true if the specified vertex is found, false if not.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.Remove(System.Collections.Generic.LinkedListNode{Smrf.NodeXL.Core.IVertex})">
             <summary>
             Removes a <see cref="T:System.Collections.Generic.LinkedListNode`1"/> from the linked list.
             </summary>
            
             <param name="oLinkedListNode">
             The node to remove from the linked list.
             </param>
            
             <remarks>
             This method removes <paramref name="oLinkedListNode"/> from the linked
             list and removes any edges connected to it.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.VertexCollection.m_oParentGraph">
            Graph that owns this collection.
        </member>
        <member name="F:Smrf.NodeXL.Core.VertexCollection.m_oLinkedList">
            The linked list that stores the collection.
        </member>
        <member name="P:Smrf.NodeXL.Core.VertexCollection.Count">
             <summary>
             Gets the number of elements contained in the collection.
             </summary>
            
             <value>
             The number of elements contained in the collection.
             </value>
            
             <remarks>
             Retrieving the value of this property is an O(1) operation.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.VertexCollection.IsReadOnly">
             <summary>
             Gets a value indicating whether the collection is read-only.
             </summary>
            
             <value>
             true if the collection is read-only.
             </value>
            
             <remarks>
             This method is an O(1) operation.
             </remarks>
        </member>
        <member name="E:Smrf.NodeXL.Core.VertexCollection.VertexAdded">
            <summary>
            Occurs when a vertex is added to the collection.
            </summary>
        </member>
        <member name="E:Smrf.NodeXL.Core.VertexCollection.VertexRemoved">
            <summary>
            Occurs when a vertex is removed from the collection.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Core.VertexCollection.ReverseEnumerator">
             <summary>
             Supports iterating backwards over a <see cref="T:Smrf.NodeXL.Core.VertexCollection"/>.
             </summary>
            
             <remarks>
             This class is nested within the <see cref="T:Smrf.NodeXL.Core.VertexCollection"/> class, so
             its type is VertexCollection.ReverseEnumerator.  An instance of this class
             gets returned by <see cref="M:Smrf.NodeXL.Core.VertexCollection.GetReverseEnumerable"/>.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.ReverseEnumerator.#ctor(Smrf.NodeXL.Core.VertexCollection)">
             <summary>
             Initializes a new instance of the ReverseEnumerator class.
             </summary>
            
             <param name="vertexCollection">
             Collection being enumerated.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.ReverseEnumerator.MoveNext">
             <summary>
             Moves to the next object in the enumeration.
             </summary>
            
             <returns>
             true if the enumerator was successfully advanced to the next element;
             false if the enumerator has passed the end of the collection. 
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.ReverseEnumerator.Reset">
            <summary>
            Resets the current position so it points to the beginning of the
            enumeration.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.ReverseEnumerator.GetEnumerator">
             <summary>
             Returns an enumerator that iterates through the collection. 
             </summary>
            
             <returns>
             An enumerator that iterates through the collection. 
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.ReverseEnumerator.System#Collections#IEnumerable#GetEnumerator">
             <summary>
             Returns an enumerator that iterates through the collection. 
             </summary>
            
             <returns>
             An enumerator that iterates through the collection. 
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.ReverseEnumerator.GetCurrent">
             <summary>
             Gets the object at the current position.
             </summary>
            
             <returns>
             The <see cref="T:Smrf.NodeXL.Core.IVertex"/> object at the enumerator's current position.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.ReverseEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing,
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexCollection.ReverseEnumerator.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.VertexCollection.ReverseEnumerator.m_oVertexCollection">
            Collection being enumerated.
        </member>
        <member name="F:Smrf.NodeXL.Core.VertexCollection.ReverseEnumerator.m_oCurrentNode">
            LinkedList node that contains the IVertex to return from the next call
            to Current(), or null if MoveNext() hasn't been called yet or the start
            of the LinkedList has been reached.
        </member>
        <member name="P:Smrf.NodeXL.Core.VertexCollection.ReverseEnumerator.System#Collections#IEnumerator#Current">
             <summary>
             Gets the object at the current position.
             </summary>
            
             <value>
             The <see cref="T:Smrf.NodeXL.Core.IVertex"/> object at the enumerator's current position.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Core.VertexCollection.ReverseEnumerator.Current">
             <summary>
             Gets the object at the current position.
             </summary>
            
             <value>
             The <see cref="T:Smrf.NodeXL.Core.IVertex"/> object at the enumerator's current position.
             </value>
            
        </member>
        <member name="T:Smrf.NodeXL.Core.EdgeEventArgs">
            <summary>
            Provides event information for events involving an edge.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeEventArgs.#ctor(Smrf.NodeXL.Core.IEdge)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.EdgeEventArgs"/> class.
             </summary>
            
             <param name="edge">
             Edge associated with the event.  Can't be null.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeEventArgs.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.EdgeEventArgs.m_oEdge">
            Edge associated with the event.
        </member>
        <member name="P:Smrf.NodeXL.Core.EdgeEventArgs.Edge">
             <summary>
             Gets the edge associated with the event.
             </summary>
            
             <value>
             The edge associated with the event, as an <see cref="T:Smrf.NodeXL.Core.IEdge"/>.  This
             is never null.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Core.EdgeEventArgs.ArgumentChecker">
             <summary>
             Gets a new initialized ArgumentChecker object.
             </summary>
            
             <value>
             A new initialized ArgumentChecker object.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Core.EdgeEventHandler">
             <summary>
             Represents a method that will handle an event involving an edge.
             </summary>
            
             <param name="sender">
             The source of the event.
             </param>
            
             <param name="edgeEventArgs">
             An <see cref="T:Smrf.NodeXL.Core.EdgeEventArgs"/> object that contains the event data.
             </param>
        </member>
        <member name="T:Smrf.NodeXL.Core.VertexEventArgs">
            <summary>
            Provides event information for events involving a vertex.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexEventArgs.#ctor(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.VertexEventArgs"/> class.
             </summary>
            
             <param name="vertex">
             Vertex associated with the event.  Can't be null.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexEventArgs.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.VertexEventArgs.m_oVertex">
            Vertex associated with the event.
        </member>
        <member name="P:Smrf.NodeXL.Core.VertexEventArgs.Vertex">
             <summary>
             Gets the vertex associated with the event.
             </summary>
            
             <value>
             The vertex associated with the event, as an <see cref="T:Smrf.NodeXL.Core.IVertex"/>.
             This is never null.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Core.VertexEventArgs.ArgumentChecker">
             <summary>
             Gets a new initialized ArgumentChecker object.
             </summary>
            
             <value>
             A new initialized ArgumentChecker object.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Core.VertexEventHandler">
             <summary>
             Represents a method that will handle an event involving a vertex.
             </summary>
            
             <param name="sender">
             The source of the event.
             </param>
            
             <param name="vertexEventArgs">
             An <see cref="T:Smrf.NodeXL.Core.VertexEventArgs"/> object that contains the event data.
             </param>
        </member>
        <member name="T:Smrf.NodeXL.Core.Edge">
             <summary>
             Represents an edge.
             </summary>
            
             <remarks>
             An edge is a connection between two vertices in the same graph.  An edge
             can be directed or undirected.  A directed edge has a front and a back.
            
             <para>
             An edge always connects two vertices.  Although an edge can be created
             before it is added to a graph, it can't be created without specifying the
             vertices it connects.  An edge can be added only to the graph that contains
             the edge's vertices.
             </para>
            
             <para>
             An <see cref="T:Smrf.NodeXL.Core.Edge"/> can be created via its constructor and then added to
             a graph via Graph.Edges.<see cref="M:Smrf.NodeXL.Core.EdgeCollection.Add(Smrf.NodeXL.Core.IEdge)"/>, or
             created and added to a graph at the same time via Graph.Edges.<see cref="M:Smrf.NodeXL.Core.EdgeCollection.Add(Smrf.NodeXL.Core.IVertex,Smrf.NodeXL.Core.IVertex,System.Boolean)"/>.
             </para>
            
             <para>
             An edge is immutable, meaning that its vertices can't be removed.  An edge
             can be removed from a graph and disposed of, but once the edge is removed,
             the edge is unusable.  Attempting to access the edge's properties or
             methods will lead to unpredictable results.
             </para>
            
             </remarks>
            
             <example>
             The following code creates two Vertex objects, adds them to an existing
             undirected graph, and connects them with an Edge object.
            
             <code>
             // Create the Vertex objects.
            
             IVertex oVertex1 = new Vertex();
             IVertex oVertex2 = new Vertex();
            
             // Add the Vertex objects to the graph.
            
             IVertexCollection oVertices = oUndirectedGraph.Vertices;
             oVertices.Add(oVertex1);
             oVertices.Add(oVertex2);
            
             // Connect the Vertex objects with an Edge object.
            
             IEdge oEdge = new Edge(oVertex1, oVertex2);
            
             // Add the Edge object to the graph.
            
             oUndirectedGraph.Edges.Add(oEdge);
             </code>
            
             </example>
            
             <seealso cref="T:Smrf.NodeXL.Core.IEdge"/>
             <seealso cref="T:Smrf.NodeXL.Core.IEdgeCollection"/>
        </member>
        <member name="T:Smrf.NodeXL.Core.GraphVertexEdgeBase">
             <summary>
             Base class for the <see cref="T:Smrf.NodeXL.Core.Graph"/>, <see cref="T:Smrf.NodeXL.Core.Vertex"/>, and <see cref="T:Smrf.NodeXL.Core.Edge"/> classes.
             </summary>
            
             <remarks>
             This base class implements the <see cref="T:Smrf.NodeXL.Core.IIdentityProvider"/> and <see cref="T:Smrf.NodeXL.Core.IMetadataProvider"/> interfaces.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Core.IIdentityProvider">
             <summary>
             Provides object identity.
             </summary>
            
             <remarks>
             Classes that provide information for identifying an instance should
             implement this interface.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.IIdentityProvider.Name">
             <summary>
             Gets the object's name.
             </summary>
            
             <value>
             The object's name, as a String.  Can be null.  The default value is
             null.
             </value>
            
             <remarks>
             The name is optional and is set by the application.
            
             <para>
             Names are case sensitive.  The names "Mary" and "mary" are different,
             for example.
             </para>
            
             <para>
             The core NodeXL system does not enforce uniqueness of names.  It is
             possible to have two items with the same name in the same collection.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.IIdentityProvider.ID">
             <summary>
             Gets the object's ID.
             </summary>
            
             <value>
             The object's ID, as an Int32.
             </value>
            
             <remarks>
             The ID is set when the object is created.  It must be unique among all
             objects of the same category for the duration of the process in which
             NodeXL is running.  ("Category" means graph, vertex, or edge.)  No two
             vertices can have the same ID, for example, although a vertex and edge
             can have the same ID.
            
             <para>
             If an object is cloned, the copy must have an ID different from that of
             the original.
             </para>
            
             <para>
             If the object is saved to persistent storage and then loaded from that
             storage, the loaded object must have an ID different from that of the
             original.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/>
        </member>
        <member name="T:Smrf.NodeXL.Core.IMetadataProvider">
             <summary>
             Provides metadata.
             </summary>
            
             <remarks>
             Classes that provide metadata for storing application-defined information
             should implement this interface.
            
             <para>
             Metadata can be stored as a single <see cref="T:System.Object"/> via the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property, or as key/value pairs via the <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> method, or both.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IMetadataProvider.ContainsKey(System.String)">
             <summary>
             Determines whether a metadata value with a specified key exists.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <returns>
             true if there is a metadata value with the key <paramref name="key"/>,
             false if not.
             </returns>
            
             <remarks>
             If true is returned, the metadata value can be retrieved with <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/> or one of its variants.
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.IMetadataProvider.RemoveKey(System.String)">
             <summary>
             Removes a specified metadata key if it exists.
             </summary>
            
             <param name="key">
             The key to remove.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <returns>
             true if the metadata key <paramref name="key" /> was removed, false if
             there is no such key.
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)">
             <summary>
             Sets the metadata value associated with a specified key. 
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).  If the key already exists, its value gets overwritten.
             </param>
            
             <param name="value">
             The value to set.  Can be null.
             </param>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.ContainsKey(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/>
             <seealso cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.IMetadataProvider.GetRequiredValue(System.String,System.Type)">
             <summary>
             Gets the metadata value associated with a specified key and checks
             the value type.  The value must exist.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="valueType">
             Expected type of the requested value.  Sample: typeof(String).
             </param>
            
             <returns>
             The metadata value associated with <paramref name="key"/>, as an <see cref="T:System.Object"/>.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is returned.  If <paramref name="key"/> does not exist,
             an exception is thrown.
             </para>
            
             <para>
             <paramref name="valueType"/> is used for error checking.  If the type
             of the requested value is not <paramref name="valueType"/>, an
             exception is thrown.  Note that the type of the returned value is <see cref="T:System.Object"/>, and that you must cast the returned object to the
             specified type.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.ContainsKey(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/>
             <seealso cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Type,System.Object@)">
             <overloads>
             Attempts to get the metadata value associated with a specified key. 
             </overloads>
            
             <summary>
             Attempts to get the metadata value associated with a specified key and
             checks the value type.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="valueType">
             Expected type of the requested value.  Sample: typeof(String).
             </param>
            
             <param name="value">
             Where the metadata value associated with <paramref name="key"/> gets
             stored if true is returned, as an <see cref="T:System.Object"/>.
             </param>
            
             <returns>
             true if the metadata value associated with <paramref name="key"/>
             exists, or false if not.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is stored at <paramref name="value"/> and true is returned.
             If <paramref name="key"/> does not exist, false is returned.
             </para>
            
             <para>
             <paramref name="valueType"/> is used for error checking.  If the type
             of the requested value is not <paramref name="valueType"/>, an
             exception is thrown.  Note that the type of the value stored at
             <paramref name="value"/> is <see cref="T:System.Object"/>, and that you must
             cast the object to the specified type.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.ContainsKey(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/>
             <seealso cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Object@)">
             <summary>
             Attempts to get the metadata value associated with a specified key.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="value">
             Where the metadata value associated with <paramref name="key"/> gets
             stored if true is returned, as an <see cref="T:System.Object"/>.
             </param>
            
             <returns>
             true if the metadata value associated with <paramref name="key"/>
             exists, or false if not.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is stored at <paramref name="value"/> and true is returned.
             If <paramref name="key"/> does not exist, false is returned.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.ContainsKey(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.IMetadataProvider.TryGetNonEmptyStringValue(System.String,System.String@)">
             <summary>
             Attempts to get the non-empty string metadata value associated with a
             specified key.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="value">
             Where the metadata value associated with <paramref name="key"/> gets
             stored if true is returned, as a non-empty <see cref="T:System.String"/>.
             </param>
            
             <returns>
             true if the metadata value associated with <paramref name="key"/>
             exists and is a non-empty string, or false if not.
             </returns>
            
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.ContainsKey(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.IMetadataProvider.GetValue(System.String,System.Type)">
             <overloads>
             Gets the metadata value associated with a specified key. 
             </overloads>
            
             <summary>
             Gets the metadata value associated with a specified key and checks
             the value type.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="valueType">
             Expected type of the requested value.  Sample: typeof(String).
             </param>
            
             <returns>
             The metadata value associated with <paramref name="key"/>, as an <see cref="T:System.Object"/>, or null if the key doesn't exist.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is returned.  If <paramref name="key"/> does not exist,
             null is returned.  If you need to distinguish between these two cases,
             use <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Type,System.Object@)"/> instead.
             </para>
            
             <para>
             <paramref name="valueType"/> is used for error checking.  If the type
             of the requested value is not <paramref name="valueType"/>, an
             exception is thrown.  Note that the type of the returned value is <see cref="T:System.Object"/>, and that you must cast the returned object to the
             specified type.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.ContainsKey(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.IMetadataProvider.GetValue(System.String)">
             <summary>
             Gets the metadata value associated with a specified key. 
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <returns>
             The metadata value associated with <paramref name="key"/>, as an <see cref="T:System.Object"/>, or null if the key doesn't exist.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is returned.  If <paramref name="key"/> does not exist,
             null is returned.  If you need to distinguish between these two cases,
             use <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Object@)"/> instead.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.ContainsKey(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.IMetadataProvider.Tag">
             <summary>
             Gets or sets a single metadata object.
             </summary>
            
             <value>
             A single metadata object, as an <see cref="T:System.Object"/>.  Can be null.
             The default value is null.
             </value>
            
             <remarks>
             If you want to store multiple metadata objects as key/value pairs, use
             <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> instead.
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.GraphVertexEdgeBase"/>
             class.
             </summary>
            
             <param name="id">
             The object's ID.  Must be unique among all objects of the same type.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)">
             <summary>
             Determines whether a metadata value with a specified key exists.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <returns>
             true if there is a metadata value with the key <paramref name="key"/>,
             false if not.
             </returns>
            
             <remarks>
             If true is returned, the metadata value can be retrieved with <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/> or one of its variants.
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.RemoveKey(System.String)">
             <summary>
             Removes a specified metadata key if it exists.
             </summary>
            
             <param name="key">
             The key to remove.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <returns>
             true if the metadata key <paramref name="key" /> was removed, false if
             there is no such key.
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)">
             <summary>
             Sets the metadata value associated with a specified key. 
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).  If the key already exists, its value gets overwritten.
             </param>
            
             <param name="value">
             The value to set.  Can be null.
             </param>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/>
             <seealso cref="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.Tag"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetRequiredValue(System.String,System.Type)">
             <summary>
             Gets the metadata value associated with a specified key and checks
             the value type.  The value must exist.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="valueType">
             Expected type of the requested value.  Sample: typeof(String).
             </param>
            
             <returns>
             The metadata value associated with <paramref name="key"/>, as an <see cref="T:System.Object"/>.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is returned.  If <paramref name="key"/> does not exist,
             an exception is thrown.
             </para>
            
             <para>
             <paramref name="valueType"/> is used for error checking.  If the type
             of the requested value is not <paramref name="valueType"/>, an
             exception is thrown.  Note that the type of the returned value is <see cref="T:System.Object"/>, and that you must cast the returned object to the
             specified type.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/>
             <seealso cref="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.Tag"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Type,System.Object@)">
             <overloads>
             Attempts to get the metadata value associated with a specified key. 
             </overloads>
            
             <summary>
             Attempts to get the metadata value associated with a specified key and
             checks the value type.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="valueType">
             Expected type of the requested value.  Sample: typeof(String).
             </param>
            
             <param name="value">
             Where the metadata value associated with <paramref name="key"/> gets
             stored if true is returned, as an <see cref="T:System.Object"/>.
             </param>
            
             <returns>
             true if the metadata value associated with <paramref name="key"/>
             exists, or false if not.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is stored at <paramref name="value"/> and true is returned.
             If <paramref name="key"/> does not exist, false is returned.
             </para>
            
             <para>
             <paramref name="valueType"/> is used for error checking.  If the type
             of the requested value is not <paramref name="valueType"/>, an
             exception is thrown.  Note that the type of the value stored at
             <paramref name="value"/> is <see cref="T:System.Object"/>, and that you must
             cast the object to the specified type.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/>
             <seealso cref="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.Tag"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Object@)">
             <summary>
             Attempts to get the metadata value associated with a specified key.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="value">
             Where the metadata value associated with <paramref name="key"/> gets
             stored if true is returned, as an <see cref="T:System.Object"/>.
             </param>
            
             <returns>
             true if the metadata value associated with <paramref name="key"/>
             exists, or false if not.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is stored at <paramref name="value"/> and true is returned.
             If <paramref name="key"/> does not exist, false is returned.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.Tag"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.TryGetNonEmptyStringValue(System.String,System.String@)">
             <summary>
             Attempts to get the non-empty string metadata value associated with a
             specified key.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="value">
             Where the metadata value associated with <paramref name="key"/> gets
             stored if true is returned, as a non-empty <see cref="T:System.String"/>.
             </param>
            
             <returns>
             true if the metadata value associated with <paramref name="key"/>
             exists and is a non-empty string, or false if not.
             </returns>
            
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.Tag"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String,System.Type)">
             <overloads>
             Gets the metadata value associated with a specified key. 
             </overloads>
            
             <summary>
             Gets the metadata value associated with a specified key and checks
             the value type.
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <param name="valueType">
             Expected type of the requested value.  Sample: typeof(String).
             </param>
            
             <returns>
             The metadata value associated with <paramref name="key"/>, as an <see cref="T:System.Object"/>, or null if the key doesn't exist.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is returned.  If <paramref name="key"/> does not exist,
             null is returned.  If you need to distinguish between these two cases,
             use <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Type,System.Object@)"/> instead.
             </para>
            
             <para>
             <paramref name="valueType"/> is used for error checking.  If the type
             of the requested value is not <paramref name="valueType"/>, an
             exception is thrown.  Note that the type of the returned value is <see cref="T:System.Object"/>, and that you must cast the returned object to the
             specified type.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.Tag"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)">
             <summary>
             Gets the metadata value associated with a specified key. 
             </summary>
            
             <param name="key">
             The value's key.  Can't be null or empty, and can't start with a
             tilde (~).
             </param>
            
             <returns>
             The metadata value associated with <paramref name="key"/>, as an <see cref="T:System.Object"/>, or null if the key doesn't exist.
             </returns>
            
             <remarks>
             The application can store arbitrary metadata by adding key/value pairs
             via <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>.  The values can be
             retrieved with <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/> or one of its variants.
             The keys are of type <see cref="T:System.String"/> and the values are of type
             <see cref="T:System.Object"/>.
            
             <para>
             Values can be null.  If <paramref name="key"/> exists and its value is
             null, null is returned.  If <paramref name="key"/> does not exist,
             null is returned.  If you need to distinguish between these two cases,
             use <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Object@)"/> instead.
             </para>
            
             <para>
             If you want to store just a single metadata object, use the <see cref="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.Tag"/> property instead.
             </para>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.TryGetValue(System.String,System.Object@)"/>
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetRequiredValue(System.String,System.Type)"/>
             <seealso cref="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.Tag"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.ToString">
             <summary>
             Formats the value of the current instance.
             </summary>
            
             <returns>
             The formatted string.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String,System.String,System.Boolean,System.Type,System.Object@)">
             <summary>
             Gets the metadata value associated with a specified key and checks
             the value type.  Distinguishes between a null value and a non-existent
             value.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sKey">
             The value's key.  Can't be null or empty.
             </param>
            
             <param name="bCheckValueType">
             true to check the type of the requested value.
             </param>
            
             <param name="oValueType">
             Expected type of the requested value.  Used only if <paramref name="bCheckValueType"/> is true.
             </param>
            
             <param name="oValue">
             Where the metadata value associated with <paramref name="sKey"/> gets
             stored if true is returned, as an <see cref="T:System.Object"/>.
             </param>
            
             <para>
             Keys that start with a tilde (~) are reserved by the NodeXL system for
             internal use.
             </para>
            
             <returns>
             true if the metadata value associated with <paramref name="sKey"/>
             exists, or false if not.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.CopyTo(System.Object,System.Boolean,System.Boolean)">
             <summary>
             Copies this base class's protected data to another object.
             </summary>
            
             <param name="oOtherObject">
             The object to copy to.  Must implement <see cref="T:Smrf.NodeXL.Core.IIdentityProvider"/>
             and <see cref="T:Smrf.NodeXL.Core.IMetadataProvider"/>.
             </param>
            
             <param name="bCopyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to <paramref name="oOtherObject"/>.  (This is a shallow copy.  The objects pointed
             to by the original values are NOT cloned.)  If false, the key/value
             pairs are not copied.
             </param>
            
             <param name="bCopyTag">
             If true, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property on <paramref name="oOtherObject"/> is set to the same value as in this object.
             (This is a shallow copy.  The object pointed to by this object's <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property on <paramref name="oOtherObject"/> is left at its default value of null.
             </param>
            
             <remarks>
             This method can be used to assist in cloning a derived object.  It
             copies the object's <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> and
             optionally the object's key/value pairs and <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/>.  The object's <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/> is not copied.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.CheckClientKey(System.String,System.String)">
             <summary>
             Throws an exception if a key passed to <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>, <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>, or <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/>
             is invalid.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sKey">
             The key passed to <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.ContainsKey(System.String)"/>, <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>, or <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.GetValue(System.String)"/>.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.GraphVertexEdgeBase.m_sName">
            Object name.  Can be null or empty.
        </member>
        <member name="F:Smrf.NodeXL.Core.GraphVertexEdgeBase.m_iID">
            Object ID.
        </member>
        <member name="F:Smrf.NodeXL.Core.GraphVertexEdgeBase.m_oMetadataProvider">
            Object that stores the Tag and key/value pairs, or null if no key/value
            pairs or the Tag have been set yet.  This is created "lazily" to reduce
            memory usage when metadata isn't used.
        </member>
        <member name="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.Name">
             <summary>
             Gets the object's name.
             </summary>
            
             <value>
             The object's name, as a String.  Can be null.  The default value is
             null.
             </value>
            
             <remarks>
             The name is optional and is set by the application.
            
             <para>
             Names are case sensitive.  The names "Mary" and "mary" are different,
             for example.
             </para>
            
             <para>
             The core NodeXL system does not enforce uniqueness of names.  It is
             possible to have two items with the same name in the same collection.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.ID"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.ID">
             <summary>
             Gets the object's ID.
             </summary>
            
             <value>
             The object's ID, as an Int32.
             </value>
            
             <remarks>
             The ID is set when the object is created.  It must be unique among all
             objects of the same type for the duration of the process in which NodeXL
             is running.
            
             <para>
             If an object is cloned, the copy must have an ID different from that of
             the original.
             </para>
            
             <para>
             If the object is saved to persistent storage and then loaded from that
             storage, the loaded object must have an ID different from that of the
             original.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.Name"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.GraphVertexEdgeBase.Tag">
             <summary>
             Gets or sets a single metadata object.
             </summary>
            
             <value>
             A single metadata object, as an <see cref="T:System.Object"/>.  Can be null.
             The default value is null.
             </value>
            
             <remarks>
             If you want to store multiple metadata objects as key/value pairs, use
             <see cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/> instead.
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/>
        </member>
        <member name="T:Smrf.NodeXL.Core.IEdge">
             <summary>
             Represents an edge.
             </summary>
            
             <remarks>
             An edge is a connection between two vertices in the same graph.  An edge
             can be directed or undirected.  A directed edge has a front and a back.
            
             <para>
             An edge always connects two vertices.  Although an edge can be created
             before it is added to a graph, it can't be created without specifying the
             vertices it connects.  An edge can be added only to the graph that contains
             the edge's vertices.
             </para>
            
             <para>
             An edge can be created via the edge constructor and then added to a graph
             via IGraph.Edges.<see cref="M:Smrf.NodeXL.Core.EdgeCollection.Add(Smrf.NodeXL.Core.IEdge)"/>, or created and
             added to a graph at the same time via IGraph.Edges.<see cref="M:Smrf.NodeXL.Core.IEdgeCollection.Add(Smrf.NodeXL.Core.IVertex,Smrf.NodeXL.Core.IVertex,System.Boolean)"/>.
             </para>
            
             <para>
             An edge is immutable, meaning that its vertices can't be removed.  An edge
             can be removed from a graph and disposed of, however.
             </para>
            
             </remarks>
            
             <seealso cref="T:Smrf.NodeXL.Core.Edge"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.IEdge.Clone(System.Boolean,System.Boolean)">
             <overloads>
             Creates a copy of the edge.
             </overloads>
            
             <summary>
             Creates a copy of the edge.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new edge.  (This
             is a shallow copy.  The objects pointed to by the original values are
             NOT cloned.)  If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property on the new
             edge is set to the same value as in the original edge.  (This is a
             shallow copy.  The object pointed to by the original <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property on the new edge is set to
             null.
             </param>
            
             <returns>
             The copy of the edge, as an <see cref="T:Smrf.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             The new edge is connected to the same vertices as the original edge.
             Its <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> is set to the same value as
             the original's, but it is assigned a new <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>.
            
             <para>
             The new edge can be added only to the same graph.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IEdge.Clone(System.Boolean,System.Boolean,Smrf.NodeXL.Core.IVertex,Smrf.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Creates a copy of the edge using specified vertices.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new edge.  (This
             is a shallow copy.  The objects pointed to by the original values are
             NOT cloned.)  If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property on the new
             edge is set to the same value as in the original edge.  (This is a
             shallow copy.  The object pointed to by the original <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property on the new edge is set to
             null.
             </param>
            
             <param name="vertex1">
             The new edge's first vertex.  The vertex must be contained in the graph
             to which the new edge will be added.
             </param>
            
             <param name="vertex2">
             The new edge's second vertex.  The vertex must be contained in the
             graph to which the new edge will be added.
             </param>
            
             <param name="isDirected">
             If true, <paramref name="vertex1"/> is the new edge's back vertex and
             <paramref name="vertex2"/> is the new edge's front vertex.  If false,
             the new edge is undirected.
             </param>
            
             <returns>
             The copy of the edge, as an <see cref="T:Smrf.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             A new edge is created and then connected to <paramref name="vertex1"/> and <paramref name="vertex2"/>, which can be in the
             same graph as the original edge or in a different graph.  Its <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> is set to the same value as the
             original's, but it is assigned a new <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>.
            
             <para>
             The new edge can be added only to the graph that owns <paramref name="vertex1"/> and <paramref name="vertex2"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IEdge.IsParallelTo(Smrf.NodeXL.Core.IEdge)">
             <summary>
             Gets a value indicating whether the edge is parallel to a specified
             edge.
             </summary>
            
             <param name="otherEdge">
             Edge to test.
             </param>
            
             <returns>
             true if the edge is parallel to <paramref name="otherEdge"/>, false if
             not.
             </returns>
            
             <remarks>
             If the edges do not connect the same vertices, they are not parallel or
             anti-parallel.  If they do connect the same vertices, they are parallel
             or anti-parallel, depending on the directedness of the graph and the
             edges.  This is shown in the following table.
            
             <list type="table">
            
             <listheader>
             <term>Graph Directedness</term>
             <term>Edge 1</term>
             <term>Edge 2</term>
             <term>Edge 1 Parallel to Edge 2?</term>
             <term>Edge 1 Anti-Parallel to Edge 2?</term>
             </listheader>
            
             <item>
             <term>Directed</term>
             <term>(A-&gt;B)</term>
             <term>(A-&gt;B)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             <item>
             <term>Directed</term>
             <term>(A-&gt;B)</term>
             <term>(B-&gt;A)</term>
             <term>No</term>
             <term>Yes</term>
             </item>
            
             <item>
             <term>Undirected</term>
             <term>(A,B)</term>
             <term>(A,B)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(A,B)</term>
             <term>(A,B)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(A,B)</term>
             <term>(A-&gt;B)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(A,B)</term>
             <term>(B-&gt;A)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(A-&gt;B)</term>
             <term>(A,B)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(A-&gt;B)</term>
             <term>(A-&gt;B)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(A-&gt;B)</term>
             <term>(B-&gt;A)</term>
             <term>No</term>
             <term>Yes</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(B-&gt;A)</term>
             <term>(A,B)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(B-&gt;A)</term>
             <term>(A-&gt;B)</term>
             <term>No</term>
             <term>Yes</term>
             </item>
            
             <item>
             <term>Mixed</term>
             <term>(B-&gt;A)</term>
             <term>(B-&gt;A)</term>
             <term>Yes</term>
             <term>No</term>
             </item>
            
             </list>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.IEdge.IsAntiparallelTo(Smrf.NodeXL.Core.IEdge)"/>
            
             TODO: "A simple graph is one that contains no loops or parallel edges,
             where more than one edge connects two given vertices,"
        </member>
        <member name="M:Smrf.NodeXL.Core.IEdge.IsAntiparallelTo(Smrf.NodeXL.Core.IEdge)">
             <summary>
             Gets a value indicating whether the edge is antiparallel to a specified
             edge.
             </summary>
            
             <param name="otherEdge">
             Edge to test.
             </param>
            
             <returns>
             true if the edge is antiparallel to <paramref name="otherEdge"/>,
             false if not.
             </returns>
            
             <remarks>
             See <see cref="M:Smrf.NodeXL.Core.IEdge.IsParallelTo(Smrf.NodeXL.Core.IEdge)"/> for details on the returned value.
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.IEdge.IsParallelTo(Smrf.NodeXL.Core.IEdge)"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.IEdge.GetAdjacentVertex(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Given one of the edge's vertices, returns the other vertex.
             </summary>
            
             <param name="vertex">
             One of the edge's vertices.
             </param>
            
             <returns>
             The edge's other vertex.
             </returns>
            
             <remarks>
             An ArgumentException is thrown if <paramref name="vertex" /> is not one
             of the edge's vertices.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.IEdge.ParentGraph">
             <summary>
             Gets the graph that owns the edge.
             </summary>
            
             <value>
             The graph that owns the edge, as an <see cref="T:Smrf.NodeXL.Core.IGraph"/>.
             </value>
            
             <remarks>
             This property is never null.  If the edge hasn't yet been added to a
             graph, the parent graph is obtained from the edge's vertices.  Because
             an edge can only be added to the graph that contains the edge's
             vertices, the vertices' parent graph is always the same as the edge's
             parent graph.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.IEdge.IsDirected">
             <summary>
             Gets a value indicating whether the edge is directed.
             </summary>
            
             <value>
             true if the edge is directed, false if not.
             </value>
            
             <remarks>
             A directed edge has a front and a back.
            
             <para>
             This property is set when the edge is created by the edge constructor.
             </para>
            
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.IEdge.Vertices">
             <summary>
             Gets the vertices to which the edge is connected.
             </summary>
            
             <value>
             An array of two vertices.
             </value>
            
             <remarks>
             The order of the returned vertices is the same order that was specified
             when the edge was created by the edge constructor.
            
             <para>
             The vertices are also available via the <see cref="P:Smrf.NodeXL.Core.IEdge.Vertex1"/> and <see cref="P:Smrf.NodeXL.Core.IEdge.Vertex2"/> properties.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.IEdge.IsDirected"/>
             <seealso cref="P:Smrf.NodeXL.Core.IEdge.Vertex1"/>
             <seealso cref="P:Smrf.NodeXL.Core.IEdge.Vertex2"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.IEdge.Vertex1">
             <summary>
             Gets the first vertex to which the edge is connected.
             </summary>
            
             <value>
             The edge's first vertex, as an <see cref="T:Smrf.NodeXL.Core.IVertex"/>.
             </value>
            
             <remarks>
             The first vertex is also available as the first vertex in the array
             returned by <see cref="P:Smrf.NodeXL.Core.IEdge.Vertices"/>.
            
             <para>
             The edge's vertices are set when the edge is created.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.IEdge.IsDirected"/>
             <seealso cref="P:Smrf.NodeXL.Core.IEdge.Vertices"/>
             <seealso cref="P:Smrf.NodeXL.Core.IEdge.Vertex2"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.IEdge.Vertex2">
             <summary>
             Gets the second vertex to which the edge is connected.
             </summary>
            
             <value>
             The edge's second vertex, as an <see cref="T:Smrf.NodeXL.Core.IVertex"/>.
             </value>
            
             <remarks>
             The second vertex is also available as the second vertex in the array
             returned by <see cref="P:Smrf.NodeXL.Core.IEdge.Vertices"/>.
            
             <para>
             The edge's vertices are set when the edge is created.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.IEdge.IsDirected"/>
             <seealso cref="P:Smrf.NodeXL.Core.IEdge.Vertices"/>
             <seealso cref="P:Smrf.NodeXL.Core.IEdge.Vertex1"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.IEdge.IsSelfLoop">
             <summary>
             Gets a value indicating whether the edge connects a vertex to itself.
             </summary>
            
             <value>
             true if the edge connects a vertex to itself, false if not.
             </value>
        </member>
        <member name="M:Smrf.NodeXL.Core.Edge.#cctor">
            <overloads>
            Static constructor for the <see cref="T:Smrf.NodeXL.Core.Edge"/> class.
            </overloads>
        </member>
        <member name="M:Smrf.NodeXL.Core.Edge.#ctor(Smrf.NodeXL.Core.IVertex,Smrf.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Initializes a new instance of the Edge class.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.  The vertex must have already been added to
             the graph to which the new edge will be added.
             </param>
            
             <param name="isDirected">
             If true, <paramref name="vertex1" /> is the edge's back vertex and
             <paramref name="vertex2" /> is the edge's front vertex.  If false, the
             edge is undirected.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.Edge.Clone(System.Boolean,System.Boolean)">
             <overloads>
             Creates a copy of the edge.
             </overloads>
            
             <summary>
             Creates a copy of the edge.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new edge.  (This
             is a shallow copy.  The objects pointed to by the original values are
             NOT cloned.)  If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property on the new
             edge is set to the same value as in the original edge.  (This is a
             shallow copy.  The object pointed to by the original <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property on the new edge is set to
             null.
             </param>
            
             <returns>
             The copy of the edge, as an <see cref="T:Smrf.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             The new edge is connected to the same vertices as the original edge.
             Its <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> is set to the same value as
             the original's, but it is assigned a new <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>.
            
             <para>
             The new edge can be added only to the same graph.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Edge.Clone(System.Boolean,System.Boolean,Smrf.NodeXL.Core.IVertex,Smrf.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Creates a copy of the edge using specified vertices.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new edge.  (This
             is a shallow copy.  The objects pointed to by the original values are
             NOT cloned.)  If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property on the new
             edge is set to the same value as in the original edge.  (This is a
             shallow copy.  The object pointed to by the original <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property on the new edge is set to
             null.
             </param>
            
             <param name="vertex1">
             The new edge's first vertex.  The vertex must be contained in the graph
             to which the new edge will be added.
             </param>
            
             <param name="vertex2">
             The new edge's second vertex.  The vertex must be contained in the
             graph to which the new edge will be added.
             </param>
            
             <param name="isDirected">
             If true, <paramref name="vertex1"/> is the new edge's back vertex and
             <paramref name="vertex2"/> is the new edge's front vertex.  If false,
             the new edge is undirected.
             </param>
            
             <returns>
             The copy of the edge, as an <see cref="T:Smrf.NodeXL.Core.IEdge"/>.
             </returns>
            
             <remarks>
             A new edge is created and then connected to <paramref name="vertex1"/> and <paramref name="vertex2"/>, which can be in the
             same graph as the original edge or in a different graph.  Its <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> is set to the same value as the
             original's, but it is assigned a new <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>.
            
             <para>
             The new edge can be added only to the graph that owns <paramref name="vertex1"/> and <paramref name="vertex2"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Edge.IsParallelTo(Smrf.NodeXL.Core.IEdge)">
             <summary>
             Gets a value indicating whether the edge is parallel to a specified
             edge.
             </summary>
            
             <param name="otherEdge">
             Edge to test.
             </param>
            
             <returns>
             true if the edge is parallel to <paramref name="otherEdge"/>, false if
             not.
             </returns>
            
             <remarks>
             See IEdge.<see cref="M:Smrf.NodeXL.Core.IEdge.IsParallelTo(Smrf.NodeXL.Core.IEdge)"/> for details on the returned
             value.
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Core.Edge.IsAntiparallelTo(Smrf.NodeXL.Core.IEdge)"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.Edge.IsAntiparallelTo(Smrf.NodeXL.Core.IEdge)">
             <summary>
             Gets a value indicating whether the edge is antiparallel to a specified
             edge.
             </summary>
            
             <param name="otherEdge">
             Edge to test.
             </param>
            
             <returns>
             true if the edge is antiparallel to <paramref name="otherEdge"/>,
             false if not.
             </returns>
            
             <remarks>
             See IEdge.<see cref="M:Smrf.NodeXL.Core.IEdge.IsParallelTo(Smrf.NodeXL.Core.IEdge)"/> for details on the returned
             value.
             </remarks>
             
             <seealso cref="M:Smrf.NodeXL.Core.Edge.IsParallelTo(Smrf.NodeXL.Core.IEdge)"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.Edge.GetAdjacentVertex(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Given one of the edge's vertices, returns the other vertex.
             </summary>
            
             <param name="vertex">
             One of the edge's vertices.
             </param>
            
             <returns>
             The edge's other vertex.
             </returns>
            
             <remarks>
             An ArgumentException is thrown if <paramref name="vertex" /> is not one
             of the edge's vertices.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Edge.CheckVertexArgument(Smrf.NodeXL.Core.IVertex,System.String)">
             <summary>
             Checks one of the <see cref="T:Smrf.NodeXL.Core.IVertex"/> arguments passed to the
             constructor.
             </summary>
            
             <param name="oVertex">
             The vertex to check.
             </param>
            
             <param name="sArgumentName">
             Name of the vertex argument.
             </param>
            
             <remarks>
             An exception is thrown if <paramref name="oVertex"/> is invalid.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Edge.IEdgeToEdge(Smrf.NodeXL.Core.IEdge,System.String,System.String)">
             <summary>
             Casts an <see cref="T:Smrf.NodeXL.Core.IEdge"/> to an <see cref="T:Smrf.NodeXL.Core.Edge"/> object.
             </summary>
            
             <param name="oEdge">
             The <see cref="T:Smrf.NodeXL.Core.IEdge"/> to cast to an <see cref="T:Smrf.NodeXL.Core.Edge"/> object.
             </param>
            
             <param name="sClassName">
             Name of the class calling this method.
             </param>
            
             <param name="sMethodOrPropertyName">
             Name of the method or property calling this method.
             </param>
            
             <returns>
             The <see cref="T:Smrf.NodeXL.Core.Edge"/> object.
             </returns>
            
             <remarks>
             An exception is thrown if <paramref name="oEdge"/> is null or not of
             type <see cref="T:Smrf.NodeXL.Core.Edge"/>.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Edge.EdgeToVertices(Smrf.NodeXL.Core.IEdge,System.String,System.String,Smrf.NodeXL.Core.Vertex@,Smrf.NodeXL.Core.Vertex@)">
             <summary>
             Obtains an edge's two <see cref="T:Smrf.NodeXL.Core.Vertex"/> objects.
             </summary>
            
             <param name="oEdge">
             The edge to obtain the <see cref="T:Smrf.NodeXL.Core.Vertex"/> objects from.
             </param>
            
             <param name="sClassName">
             Name of the class calling this method.
             </param>
            
             <param name="sMethodOrPropertyName">
             Name of the method or property calling this method.
             </param>
            
             <param name="oVertex1">
             Where the edge's first <see cref="T:Smrf.NodeXL.Core.Vertex"/> gets stored.
             </param>
            
             <param name="oVertex2">
             Where the edge's second <see cref="T:Smrf.NodeXL.Core.Vertex"/> gets stored.
             </param>
            
             <remarks>
             This method convertes <paramref name="oEdge"/> to an <see cref="T:Smrf.NodeXL.Core.Edge"/> object, obtains the Edge's two <see cref="T:Smrf.NodeXL.Core.Vertex"/>
             objects, and stores them at <paramref name="oVertex1"/> and <paramref name="oVertex2"/>.  An exception is thrown if <paramref name="oEdge"/> is null or not of type <see cref="T:Smrf.NodeXL.Core.Edge"/>, or if the
             edge's vertices are null or not of type <see cref="T:Smrf.NodeXL.Core.Vertex"/>.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Edge.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.Edge.m_oIDGenerator">
            Generates unique IDs.
        </member>
        <member name="F:Smrf.NodeXL.Core.Edge.m_oVertex1">
            First vertex.  If m_bIsDirected is true, this is the edge's back
            vertex.  Can't be null.
        </member>
        <member name="F:Smrf.NodeXL.Core.Edge.m_oVertex2">
            Second vertex.  If m_bIsDirected is true, this is the edge's front
            vertex.  Can't be null.
        </member>
        <member name="F:Smrf.NodeXL.Core.Edge.m_bIsDirected">
            If true, m_oVertex2 is the edge's back vertex and m_oVertex2 is the
            edge's front vertex.  If false, the edge is undirected.
        </member>
        <member name="P:Smrf.NodeXL.Core.Edge.ParentGraph">
             <summary>
             Gets the graph that owns the edge.
             </summary>
            
             <value>
             The graph that owns the edge, as an <see cref="T:Smrf.NodeXL.Core.IGraph"/>.
             </value>
            
             <remarks>
             This property is never null.  If the edge hasn't yet been added to a
             graph, the parent graph is obtained from the edge's vertices.  Because
             an edge can only be added to the graph that contains the edge's
             vertices, the vertices' parent graph is always the same as the edge's
             parent graph.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.Edge.IsDirected">
             <summary>
             Gets a value indicating whether the edge is directed.
             </summary>
            
             <value>
             true if the edge is directed, false if not.
             </value>
            
             <remarks>
             A directed edge has a front and a back.
            
             <para>
             This property is set when the edge is created.
             </para>
            
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.Edge.Vertices">
             <summary>
             Gets the vertices to which the edge is connected.
             </summary>
            
             <value>
             An array of two vertices.
             </value>
            
             <remarks>
             The order of the returned vertices is the same order that was specified
             when the edge was created.
            
             <para>
             The vertices are also available via the <see cref="P:Smrf.NodeXL.Core.Edge.Vertex1"/> and <see cref="P:Smrf.NodeXL.Core.Edge.Vertex2"/> properties.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.Edge.IsDirected"/>
             <seealso cref="P:Smrf.NodeXL.Core.Edge.Vertex1"/>
             <seealso cref="P:Smrf.NodeXL.Core.Edge.Vertex2"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.Edge.Vertex1">
             <summary>
             Gets the first vertex to which the edge is connected.
             </summary>
            
             <value>
             The edge's first vertex, as an <see cref="T:Smrf.NodeXL.Core.IVertex"/>.
             </value>
            
             <remarks>
             The first vertex is also available as the first vertex in the array
             returned by <see cref="P:Smrf.NodeXL.Core.Edge.Vertices"/>.
            
             <para>
             The edge's vertices are set when the edge is created.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.Edge.IsDirected"/>
             <seealso cref="P:Smrf.NodeXL.Core.Edge.Vertices"/>
             <seealso cref="P:Smrf.NodeXL.Core.Edge.Vertex2"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.Edge.Vertex2">
             <summary>
             Gets the second vertex to which the edge is connected.
             </summary>
            
             <value>
             The edge's second vertex, as an <see cref="T:Smrf.NodeXL.Core.IVertex"/>.
             </value>
            
             <remarks>
             The second vertex is also available as the second vertex in the array
             returned by <see cref="P:Smrf.NodeXL.Core.Edge.Vertices"/>.
            
             <para>
             The edge's vertices are set when the edge is created.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.Edge.IsDirected"/>
             <seealso cref="P:Smrf.NodeXL.Core.Edge.Vertices"/>
             <seealso cref="P:Smrf.NodeXL.Core.Edge.Vertex1"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.Edge.IsSelfLoop">
             <summary>
             Gets a value indicating whether the edge connects a vertex to itself.
             </summary>
            
             <value>
             true if the edge connects a vertex to itself, false if not.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Core.Graph">
             <summary>
             Represents a graph.
             </summary>
            
             <remarks>
             A graph has a collection of <see cref="P:Smrf.NodeXL.Core.Graph.Vertices"/> and a collection of
             <see cref="P:Smrf.NodeXL.Core.Graph.Edges"/> that connect the <see cref="P:Smrf.NodeXL.Core.Graph.Vertices"/>.  The <see cref="P:Smrf.NodeXL.Core.Graph.Directedness"/> property specifies the type of edges that can be
             added to the graph.
             </remarks>
            
             <example>
             The following code creates a graph and populates it with vertices and
             edges.
            
             <code>
            
             // Create a graph with mixed directedness.
             
             IGraph oGraph = new Graph();
             
             // Add vertices to the graph.  Save the vertices in a local array for
             // later use.
             
             const Int32 Vertices = 10;
             
             IVertexCollection oVertices = oGraph.Vertices;
             
             IVertex[] aoVertices = new IVertex[Vertices];
             
             for (Int32 i = 0; i &lt; Vertices; i++)
             {
                 aoVertices[i] = oVertices.Add();
             }
             
             // Add a set of edges that connect the first vertex to each of the
             // other vertices.
             
             Int32 iEdges = Vertices - 1;
             
             IEdge[] aoEdges = new IEdge[iEdges];
             
             IEdgeCollection oEdges = oGraph.Edges;
             
             for (Int32 i = 0; i &lt; iEdges; i++)
             {
                 aoEdges[i] = oEdges.Add( aoVertices[0], aoVertices[i + 1] );
             }
             
             </code>
            
             </example>
            
             <seealso cref="T:Smrf.NodeXL.Core.IGraph"/>
        </member>
        <member name="T:Smrf.NodeXL.Core.IGraph">
             <summary>
             Represents a graph.
             </summary>
            
             <remarks>
             A graph has a collection of <see cref="P:Smrf.NodeXL.Core.IGraph.Vertices"/> and a collection of
             <see cref="P:Smrf.NodeXL.Core.IGraph.Edges"/> that connect the <see cref="P:Smrf.NodeXL.Core.IGraph.Vertices"/>.  The <see cref="P:Smrf.NodeXL.Core.IGraph.Directedness"/> property specifies the type of edges that can be
             added to the graph.
             </remarks>
            
             <seealso cref="T:Smrf.NodeXL.Core.Graph"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.IGraph.Clone(System.Boolean,System.Boolean)">
             <summary>
             Creates a copy of the graph.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new graph,
             vertices, and edges.  (This is a shallow copy.  The objects pointed to
             by the original values are NOT cloned.)  If false, the key/value pairs
             are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> properties on the new
             graph, vertices, and edges are set to the same value as in the original
             objects.  (This is a shallow copy.  The objects pointed to by the
             original <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> properties are NOT
             cloned.)  If false, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/>
             properties on the new graph, vertices, and edges are set to null.
             </param>
            
             <returns>
             The copy of the graph, as an <see cref="T:Smrf.NodeXL.Core.IGraph"/>.
             </returns>
            
             <remarks>
             The new graph, vertices, and edges have the same <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> values as the originals, but they are
             assigned new <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>s.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.IGraph.Vertices">
             <summary>
             Gets the graph's collection of vertices.
             </summary>
            
             <value>
             A collection of vertices, as an <see cref="T:Smrf.NodeXL.Core.IVertexCollection"/>.  The
             collection contains zero or more objects that implement <see cref="T:Smrf.NodeXL.Core.IVertex"/>.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Core.IGraph.Edges">
             <summary>
             Gets the graph's collection of edges.
             </summary>
            
             <value>
             A collection of edges, as an <see cref="T:Smrf.NodeXL.Core.IEdgeCollection"/>.  The
             collection contains zero or more objects that implement <see cref="T:Smrf.NodeXL.Core.IEdge"/> and that connect vertices in this graph.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Core.IGraph.Directedness">
             <summary>
             Gets a value that indicates the type of edges that can be added to the
             graph.
             </summary>
            
             <value>
             A <see cref="T:Smrf.NodeXL.Core.GraphDirectedness"/> value.
             </value>
            
             <remarks>
             The directedness of a graph is specified when the graph is created and
             cannot be changed.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Graph.#cctor">
            <overloads>
            Static constructor for the Graph class.
            </overloads>
        </member>
        <member name="M:Smrf.NodeXL.Core.Graph.#ctor">
             <overloads>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.Graph"/> class.
             </overloads>
            
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.Graph"/> class with a
             mixed directedness.
             </summary>
            
             <remarks>
             The <see cref="P:Smrf.NodeXL.Core.Graph.Directedness"/> property is set to <see cref="F:Smrf.NodeXL.Core.GraphDirectedness.Mixed"/>.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Graph.#ctor(Smrf.NodeXL.Core.GraphDirectedness)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.Graph"/> class with
             specified directedness.
             </summary>
            
             <param name="directedness">
             Specifies the type of edges that can be added to the graph.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.Graph.Clone(System.Boolean,System.Boolean)">
             <summary>
             Creates a copy of the graph.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new graph,
             vertices, and edges.  (This is a shallow copy.  The objects pointed to
             by the original values are NOT cloned.)  If false, the key/value pairs
             are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> properties on the new
             graph, vertices, and edges are set to the same value as in the original
             objects.  (This is a shallow copy.  The objects pointed to by the
             original <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> properties are NOT
             cloned.)  If false, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/>
             properties on the new graph, vertices, and edges are set to null.
             </param>
            
             <returns>
             The copy of the graph, as an <see cref="T:Smrf.NodeXL.Core.IGraph"/>.
             </returns>
            
             <remarks>
             The new graph, vertices, and edges have the same <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> values as the originals, but they are
             assigned new <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>s.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Graph.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.Graph.m_oIDGenerator">
            Generates unique IDs.
        </member>
        <member name="F:Smrf.NodeXL.Core.Graph.m_oVertexCollection">
            The graph's collection of vertices.
        </member>
        <member name="F:Smrf.NodeXL.Core.Graph.m_oEdgeCollection">
            The graph's collection of edges.
        </member>
        <member name="F:Smrf.NodeXL.Core.Graph.m_eDirectedness">
            Indicates the type of edges that can be added to the graph.
        </member>
        <member name="P:Smrf.NodeXL.Core.Graph.Vertices">
             <summary>
             Gets the graph's collection of vertices.
             </summary>
            
             <value>
             A collection of vertices, as an <see cref="T:Smrf.NodeXL.Core.IVertexCollection"/>.  The
             collection contains zero or more objects that implement <see cref="T:Smrf.NodeXL.Core.IVertex"/>.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Core.Graph.Edges">
             <summary>
             Gets the graph's collection of edges.
             </summary>
            
             <value>
             A collection of edges, as an <see cref="T:Smrf.NodeXL.Core.IEdgeCollection"/>.  The
             collection contains zero or more objects that implement <see cref="T:Smrf.NodeXL.Core.IEdge"/> and that connect vertices in this graph.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Core.Graph.Directedness">
             <summary>
             Gets a value that indicates the type of edges that can be added to the
             graph.
             </summary>
            
             <value>
             A <see cref="T:Smrf.NodeXL.Core.GraphDirectedness"/> value.
             </value>
            
             <remarks>
             The directedness of a graph is specified when the graph is created and
             cannot be changed.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Core.Graph.VertexMapper">
             <summary>
             Helper struct used for cloning the graph's vertices.
             </summary>
            
             <remarks>
             The <see cref="M:Smrf.NodeXL.Core.Graph.Clone(System.Boolean,System.Boolean)"/> method uses this structure to map
             vertices in the original graph to the corresponding vertices in the
             in the new graph.
            
             <para>
             This struct is nested within the <see cref="T:Smrf.NodeXL.Core.Graph"/> class.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Graph.VertexMapper.#ctor(System.Object,Smrf.NodeXL.Core.IVertex)">
             <summary>
             Initializes a new instance of the VertexMapper class.
             </summary>
            
             <param name="oOriginalVertexTag">
             Value of the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property of the
             original vertex.  Can be null.
             </param>
            
             <param name="oNewVertex">
             New vertex that corresponds to the original vertex.  Can't be null.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.Graph.VertexMapper.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.Graph.VertexMapper.m_oOriginalVertexTag">
            Value of the Tag property in the original vertex.  Can be null.
        </member>
        <member name="F:Smrf.NodeXL.Core.Graph.VertexMapper.m_oNewVertex">
            New vertex that corresponds to the original vertex.  Can't be null.
        </member>
        <member name="P:Smrf.NodeXL.Core.Graph.VertexMapper.OriginalVertexTag">
             <summary>
             Gets the value of the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property
             of the original vertex.
             </summary>
            
             <value>
             The value of the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property of
             the original vertex.  Can be null.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Core.Graph.VertexMapper.NewVertex">
             <summary>
             Gets the new vertex that corresponds to the original vertex.
             </summary>
            
             <value>
             The new vertex that corresponds to the original vertex.  Can't be
             null.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Core.Vertex">
             <summary>
             Represents a vertex.
             </summary>
            
             <remarks>
             A vertex, also known as a node, is a point in a graph that can be connected
             to other vertices in the same graph.  The connections are called edges.
            
             <para>
             A <see cref="T:Smrf.NodeXL.Core.Vertex"/> can be created via its constructor and then added
             to a graph via IGraph.Vertices.<see cref="M:Smrf.NodeXL.Core.VertexCollection.Add(Smrf.NodeXL.Core.IVertex)"/>, or created and added to a graph at
             the same time via IGraph.Vertices.<see cref="M:Smrf.NodeXL.Core.IVertexCollection.Add"/>.
             </para>
            
             <para>
             A vertex can be added to one graph only.  It cannot be added to a second
             graph unless it is first removed from the first graph.
             </para>
            
             </remarks>
            
             <example>
             The following code creates a <see cref="T:Smrf.NodeXL.Core.Vertex"/> object and adds it to a
             graph.
            
             <code>
             oGraph.Vertices.Add();
             </code>
            
             </example>
            
             <seealso cref="T:Smrf.NodeXL.Core.IVertex"/>
             <seealso cref="T:Smrf.NodeXL.Core.IVertexCollection"/>
        </member>
        <member name="T:Smrf.NodeXL.Core.IVertex">
             <summary>
             Represents a vertex.
             </summary>
            
             <remarks>
             A vertex, also known as a node, is a point in a graph that can be connected
             to other vertices in the same graph.  The connections are called edges.
            
             <para>
             A vertex can be created via the vertex constructor and then added to a
             graph via IGraph.Vertices.<see cref="M:Smrf.NodeXL.Core.VertexCollection.Add(Smrf.NodeXL.Core.IVertex)"/>, or
             created and added to a graph at the same time via IGraph.Vertices.<see cref="M:Smrf.NodeXL.Core.IVertexCollection.Add"/>.
             </para>
            
             <para>
             A vertex can be added to one graph only.  It cannot be added to a second
             graph unless it is first removed from the first graph.
             </para>
            
             </remarks>
            
             <seealso cref="T:Smrf.NodeXL.Core.Vertex"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.IVertex.Clone(System.Boolean,System.Boolean)">
             <summary>
             Creates a copy of the vertex.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new vertex.
             (This is a shallow copy.  The objects pointed to by the original values
             are NOT cloned.)  If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property on the new
             vertex is set to the same value as in the original vertex.  (This is a
             shallow copy.  The object pointed to by the original <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property on the new vertex is set to
             null.
             </param>
            
             <returns>
             The copy of the vertex, as an <see cref="T:Smrf.NodeXL.Core.IVertex"/>.
             </returns>
            
             <remarks>
             The new vertex has no edges connected to it.  Its <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> is set to the same value as the
             original's, but it is assigned a new <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>.  Its <see cref="P:Smrf.NodeXL.Core.IVertex.ParentGraph"/>
             is null and its <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> is the default value of <see cref="F:System.Drawing.Point.Empty"/>.
            
             <para>
             The new vertex can be added to the same graph or to a different graph.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IVertex.GetConnectingEdges(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Gets a collection of edges that connect this vertex to a specified
             vertex.
             </summary>
            
             <param name="otherVertex">
             Other vertex.
             </param>
            
             <returns>
             A collection of zero or more edges that connect this vertex to
             <paramref name="otherVertex"/>, as a collection of <see cref="T:Smrf.NodeXL.Core.IEdge"/> objects.
             </returns>
            
             <remarks>
             If there are no such edges, the returned collection is empty.  The
             returned value is never null.
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is returned in
             the collection only if <paramref name="otherVertex"/> is this vertex.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IVertex.IsIncidentEdge(Smrf.NodeXL.Core.IEdge)">
             <summary>
             Determines whether an edge is incident to the vertex.
             </summary>
            
             <param name="edge">
             The edge to test.
             </param>
            
             <returns>
             true if <paramref name="edge" /> is incident to the vertex, false if
             not.
             </returns>
            
             <remarks>
             An incident edge is an edge that is connected to the vertex.
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IVertex.IsOutgoingEdge(Smrf.NodeXL.Core.IEdge)">
             <summary>
             Determines whether an edge is one of the vertex's outgoing edges.
             </summary>
            
             <param name="edge">
             The edge to test.
             </param>
            
             <returns>
             true if <paramref name="edge" /> is one of the vertex's outgoing edges,
             false if not.
             </returns>
            
             <remarks>
             An outgoing edge is either a directed edge that has the vertex at its
             back, or an undirected edge connected to the vertex.
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IVertex.IsIncomingEdge(Smrf.NodeXL.Core.IEdge)">
             <summary>
             Determines whether an edge is one of the vertex's incoming edges.
             </summary>
            
             <param name="edge">
             The edge to test.
             </param>
            
             <returns>
             true if <paramref name="edge" /> is one of the vertex's incoming edges,
             false if not.
             </returns>
            
             <remarks>
             An incoming edge is either a directed edge that has the vertex at its
             front, or an undirected edge connected to the vertex.
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.IVertex.ParentGraph">
             <summary>
             Gets the graph that owns the vertex.
             </summary>
            
             <value>
             The graph that owns the vertex, as an <see cref="T:Smrf.NodeXL.Core.IGraph"/>, or null if
             the vertex does not belong to a graph.
             </value>
            
             <remarks>
             This is a read-only property.  The implementation determines how this
             property gets set.  When the vertex is added to a graph, it must be set
             to that graph.  If the vertex is removed from a graph, it must be set
             to null.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.IVertex.IncomingEdges">
             <summary>
             Gets a collection of the vertex's incoming edges.
             </summary>
            
             <value>
             A collection of the vertex's zero or more incoming edges, as a
             collection of <see cref="T:Smrf.NodeXL.Core.IEdge"/> objects.
             </value>
            
             <remarks>
             An incoming edge is either a directed edge that has this vertex at its
             front, or an undirected edge connected to this vertex.
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one incoming edge.
             </para>
            
             <para>
             If there are no incoming edges, the returned collection is empty.  The
             returned value is never null.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.IVertex.OutgoingEdges"/>
             <seealso cref="P:Smrf.NodeXL.Core.IVertex.IncidentEdges"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.IVertex.OutgoingEdges">
             <summary>
             Gets a collection of the vertex's outgoing edges.
             </summary>
            
             <value>
             A collection of the vertex's zero or more outgoing edges, as a
             collection of <see cref="T:Smrf.NodeXL.Core.IEdge"/> objects.
             </value>
            
             <remarks>
             An outgoing edge is either a directed edge that has this vertex at its
             back, or an undirected edge connected to this vertex.
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one outgoing edge.
             </para>
            
             <para>
             If there are no outgoing edges, the returned collection is empty.  The
             returned value is never null.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.IVertex.IncomingEdges"/>
             <seealso cref="P:Smrf.NodeXL.Core.IVertex.IncidentEdges"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.IVertex.IncidentEdges">
             <summary>
             Gets a collection of the vertex's incident edges.
             </summary>
            
             <value>
             A collection of the vertex's zero or more incident edges, as a
             collection of <see cref="T:Smrf.NodeXL.Core.IEdge"/> objects.
             </value>
            
             <remarks>
             An incident edge is an edge that is connected to the vertex.
            
             <para>
             The returned collection is the union of the <see cref="P:Smrf.NodeXL.Core.IVertex.IncomingEdges"/> and <see cref="P:Smrf.NodeXL.Core.IVertex.OutgoingEdges"/> collections.
             </para>
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one incident edge.
             </para>
            
             <para>
             If there are no incident edges, the returned collection is empty.  The
             returned value is never null.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.IVertex.IncomingEdges"/>
             <seealso cref="P:Smrf.NodeXL.Core.IVertex.IncidentEdges"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.IVertex.Degree">
             <summary>
             Gets the vertex's degree.
             </summary>
            
             <value>
             The vertex's degree, as an Int32.
             </value>
            
             <remarks>
             The degree of a vertex is the number of edges that are incident to it.
             (An incident edge is an edge that is connected to this vertex.)
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one incident edge.
             </para>
            
             <para>
             This property returns the same value as <see cref="P:Smrf.NodeXL.Core.IVertex.IncidentEdges"/>.Length.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.IVertex.IncomingEdges"/>
             <seealso cref="P:Smrf.NodeXL.Core.IVertex.OutgoingEdges"/>
             <seealso cref="P:Smrf.NodeXL.Core.IVertex.IncidentEdges"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.IVertex.PredecessorVertices">
             <summary>
             Gets a collection of the vertex's predecessor vertices.
             </summary>
            
             <value>
             A collection of the vertex's zero or more predecessor vertices, as a
             collection of <see cref="T:Smrf.NodeXL.Core.IVertex"/> objects.
             </value>
            
             <remarks>
             A predecessor vertex is a vertex at the other side of an incoming edge.
             (An incoming edge is either a directed edge that has this vertex at its
             front, or an undirected edge connected to this vertex.)
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is always
             considered an incoming edge.  Therefore, if there is an edge that
             connects this vertex to itself, then this vertex is included in the
             returned collection.
             </para>
            
             <para>
             The predecessor vertices in the returned collection are unique.  If two
             or more edges connect this vertex with another vertex, the other vertex
             is included once only.
             </para>
            
             <para>
             If there are no predecessor vertices, the returned collection is empty.
             The returned value is never null.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.IVertex.SuccessorVertices"/>
             <seealso cref="P:Smrf.NodeXL.Core.IVertex.AdjacentVertices"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.IVertex.SuccessorVertices">
             <summary>
             Gets a collection of the vertex's successor vertices.
             </summary>
            
             <value>
             A collection of the vertex's zero or more successor vertices, as a
             collection of <see cref="T:Smrf.NodeXL.Core.IVertex"/> objects.
             </value>
            
             <remarks>
             A successor vertex is a vertex at the other side of an outgoing edge.
             (An outgoing edge is either a directed edge that has this vertex at its
             back, or an undirected edge connected to this vertex.)
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is always
             considered an outgoing edge.  Therefore, if there is an edge that
             connects this vertex to itself, then this vertex is included in the
             returned collection.
             </para>
            
             <para>
             The successor vertices in the returned collection are unique.  If two
             or more edges connect this vertex with another vertex, the other vertex
             is included once only.
             </para>
            
             <para>
             If there are no successor vertices, the returned collection is empty.
             The returned value is never null.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.IVertex.PredecessorVertices"/>
             <seealso cref="P:Smrf.NodeXL.Core.IVertex.AdjacentVertices"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.IVertex.AdjacentVertices">
             <summary>
             Gets a collection of the vertex's adjacent vertices.
             </summary>
            
             <value>
             A collection of the vertex's zero or more adjacent vertices, as a
             collection of <see cref="T:Smrf.NodeXL.Core.IVertex"/> objects.
             </value>
            
             <remarks>
             An adjacent vertex is a vertex at the other side of an incident edge.
             (An incident edge is an edge that is connected to the vertex.)
            
             <para>
             The returned collection is the union of the <see cref="P:Smrf.NodeXL.Core.IVertex.PredecessorVertices"/> and <see cref="P:Smrf.NodeXL.Core.IVertex.SuccessorVertices"/>
             collections.
             </para>
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is always
             considered an incident edge.  Therefore, if there is an edge that
             connects this vertex to itself, then this vertex is included in the
             returned collection.
             </para>
            
             <para>
             The adjacent vertices in the returned collection are unique.  If two or
             more edges connect this vertex with another vertex, the other vertex is
             included once only.
             </para>
            
             <para>
             If there are no adjacent vertices, the returned collection is empty.
             The returned value is never null.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.IVertex.PredecessorVertices"/>
             <seealso cref="P:Smrf.NodeXL.Core.IVertex.SuccessorVertices"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.IVertex.Location">
             <summary>
             Gets or sets the vertex's location.
             </summary>
            
             <value>
             The vertex's location as a <see cref="T:System.Drawing.PointF"/>.  The default value is
             <see cref="F:System.Drawing.PointF.Empty"/>.
             </value>
            
             <remarks>
             Typically, this property is set when the graph is laid out by
             ILayout.LayOutGraph and is read when the graph is drawn.  It's also
             possible to explicitly set all of the graph's vertex locations using
             this property and then bypass the layout stage.  You might do this
             when you want to restore vertex locations that have been saved from a
             previous layout, for example.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Vertex.#cctor">
            <overloads>
            Static constructor for the <see cref="T:Smrf.NodeXL.Core.Vertex"/> class.
            </overloads>
        </member>
        <member name="M:Smrf.NodeXL.Core.Vertex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.Vertex"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.Vertex.Clone(System.Boolean,System.Boolean)">
             <summary>
             Creates a copy of the vertex.
             </summary>
            
             <param name="copyMetadataValues">
             If true, the key/value pairs that were set with <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> are copied to the new vertex.
             (This is a shallow copy.  The objects pointed to by the original values
             are NOT cloned.)  If false, the key/value pairs are not copied.
             </param>
            
             <param name="copyTag">
             If true, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property on the new
             vertex is set to the same value as in the original vertex.  (This is a
             shallow copy.  The object pointed to by the original <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> is NOT cloned.)  If false, the <see cref="P:Smrf.NodeXL.Core.IMetadataProvider.Tag"/> property on the new vertex is set to
             null.
             </param>
            
             <returns>
             The copy of the vertex, as an <see cref="T:Smrf.NodeXL.Core.IVertex"/>.
             </returns>
            
             <remarks>
             The new vertex has no edges connected to it.  Its <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> is set to the same value as the
             original's, but it is assigned a new <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>.  Its <see cref="P:Smrf.NodeXL.Core.Vertex.ParentGraph"/>
             is null and its <see cref="P:Smrf.NodeXL.Core.Vertex.Location"/> is the default value of <see cref="F:System.Drawing.Point.Empty"/>.
            
             <para>
             The new vertex can be added to the same graph or to a different graph.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Vertex.GetConnectingEdges(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Gets a collection of edges that connect this vertex to a specified
             vertex.
             </summary>
            
             <param name="otherVertex">
             Other vertex.
             </param>
            
             <returns>
             A collection of zero or more edges that connect this vertex to
             <paramref name="otherVertex"/>, as a collection of <see cref="T:Smrf.NodeXL.Core.IEdge"/> objects.
             </returns>
            
             <remarks>
             If there are no such edges, the returned collection is empty.  The
             returned value is never null.
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is returned in
             the collection only if <paramref name="otherVertex"/> is this vertex.
             </para>
            
             <para>
             This method is an O(n) operation, where n is the number of edges
             incident to this vertex.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Vertex.IsIncidentEdge(Smrf.NodeXL.Core.IEdge)">
             <summary>
             Determines whether an edge is incident to the vertex.
             </summary>
            
             <param name="edge">
             The edge to test.
             </param>
            
             <returns>
             true if <paramref name="edge" /> is incident to the vertex, false if
             not.
             </returns>
            
             <remarks>
             An incident edge is an edge that is connected to the vertex.
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Vertex.IsOutgoingEdge(Smrf.NodeXL.Core.IEdge)">
             <summary>
             Determines whether an edge is one of the vertex's outgoing edges.
             </summary>
            
             <param name="edge">
             The edge to test.
             </param>
            
             <returns>
             true if <paramref name="edge" /> is one of the vertex's outgoing edges,
             false if not.
             </returns>
            
             <remarks>
             An outgoing edge is either a directed edge that has the vertex at its
             back, or an undirected edge connected to the vertex.
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Vertex.IsIncomingEdge(Smrf.NodeXL.Core.IEdge)">
             <summary>
             Determines whether an edge is one of the vertex's incoming edges.
             </summary>
            
             <param name="edge">
             The edge to test.
             </param>
            
             <returns>
             true if <paramref name="edge" /> is one of the vertex's incoming edges,
             false if not.
             </returns>
            
             <remarks>
             An incoming edge is either a directed edge that has the vertex at its
             front, or an undirected edge connected to the vertex.
            
             <para>
             This method is an O(1) operation.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Vertex.SetParentGraph(Smrf.NodeXL.Core.IGraph)">
             <summary>
             Sets the graph that owns the vertex.
             </summary>
            
             <param name="oParentGraph">
             The graph that owns the vertex, as an <see cref="T:Smrf.NodeXL.Core.IGraph"/>, or null if
             the vertex does not belong to a graph.
             </param>
             
             <remarks>
             This is the implementation-specific way that the <see cref="P:Smrf.NodeXL.Core.Vertex.ParentGraph"/> property gets set.  When the vertex is added to a
             graph, it must be set to that graph.  If the vertex is removed from a
             graph, it must be set to null.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Vertex.IVertexToVertex(Smrf.NodeXL.Core.IVertex,System.String,System.String)">
             <summary>
             Casts an <see cref="T:Smrf.NodeXL.Core.IVertex"/> to a <see cref="T:Smrf.NodeXL.Core.Vertex"/> object.
             </summary>
            
             <param name="oVertex">
             The <see cref="T:Smrf.NodeXL.Core.IVertex"/> to cast to a <see cref="T:Smrf.NodeXL.Core.Vertex"/> object.
             </param>
            
             <param name="sClassName">
             Name of the class calling this method.
             </param>
            
             <param name="sMethodOrPropertyName">
             Name of the method or property calling this method.
             </param>
            
             <returns>
             The <see cref="T:Smrf.NodeXL.Core.Vertex"/> object.
             </returns>
            
             <remarks>
             An <see cref="T:System.ApplicationException"/> is thrown if <paramref name="oVertex"/> is null or not of type <see cref="T:Smrf.NodeXL.Core.Vertex"/>.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.Vertex.GetIncomingOrOutgoingEdges(System.Boolean,System.Boolean)">
             <summary>
             Gets a collection of the vertex's incoming or outgoing edges.
             </summary>
            
             <param name="bIncludeIncoming">
             true to include the vertex's incoming edges.
             </param>
            
             <param name="bIncludeOutgoing">
             true to include the vertex's outgoing edges.
             </param>
            
             <returns>
             A collection of the vertex's zero or more incoming or outgoing edges (or
             both), as a collection of <see cref="T:Smrf.NodeXL.Core.IEdge"/> objects.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.Vertex.GetPredecessorOrSuccessorVertices(System.Boolean,System.Boolean)">
             <summary>
             Gets a collection of the vertex's predecessor or successor vertices, or
             both.
             </summary>
            
             <param name="bIncludePredecessor">
             true to include the vertex's predecessor vertices.
             </param>
            
             <param name="bIncludeSuccessor">
             true to include the vertex's successor vertices.
             </param>
            
             <returns>
             A collection of the vertex's zero or more predecessor or successor
             vertices, as a collection of <see cref="T:Smrf.NodeXL.Core.IVertex"/> objects.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.Vertex.RemoveIncidentEdges">
            <summary>
            Removes all edges incident to this vertex.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.Vertex.GetEdgeCollection(Smrf.NodeXL.Core.EdgeCollection@)">
             <summary>
             Gets the <see cref="T:Smrf.NodeXL.Core.EdgeCollection"/> owned by the parent graph.
             </summary>
            
             <param name="oEdgeCollection">
             Where the <see cref="T:Smrf.NodeXL.Core.EdgeCollection"/> gets stored if true is
             returned.
             </param>
            
             <returns>
             true if the <see cref="T:Smrf.NodeXL.Core.EdgeCollection"/> was stored at <paramref name="oEdgeCollection"/>, false if the vertex does not belong to a
             graph.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.Vertex.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.Vertex.m_oIDGenerator">
            Generates unique IDs.
        </member>
        <member name="F:Smrf.NodeXL.Core.Vertex.m_oParentGraph">
            Graph to which this vertex has been added, or null if does not belong
            to a graph.
        </member>
        <member name="F:Smrf.NodeXL.Core.Vertex.m_oFirstIncidentEdgeNode">
            First node in the vertex's group of incident edges, or null if the
            vertex has no incident edges.  The edges are maintained by
            EdgeCollection.
        </member>
        <member name="F:Smrf.NodeXL.Core.Vertex.m_oLocation">
            The vertex's location, or Point.Empty if Location hasn't been set yet.
        </member>
        <member name="P:Smrf.NodeXL.Core.Vertex.ParentGraph">
             <summary>
             Gets the graph that owns the vertex.
             </summary>
            
             <value>
             The graph that owns the vertex, as an <see cref="T:Smrf.NodeXL.Core.IGraph"/>, or null if
             the vertex does not belong to a graph.
             </value>
            
             <remarks>
             This is a read-only property.  When the vertex is added to a graph,
             this property is automatically set to that graph.  If the vertex is
             removed from the graph, this property is set to null.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.Vertex.IncomingEdges">
             <summary>
             Gets a collection of the vertex's incoming edges.
             </summary>
            
             <value>
             A collection of the vertex's zero or more incoming edges, as a
             collection of <see cref="T:Smrf.NodeXL.Core.IEdge"/> objects.
             </value>
            
             <remarks>
             An incoming edge is either a directed edge that has this vertex at its
             front, or an undirected edge connected to this vertex.
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one incoming edge.
             </para>
            
             <para>
             If there are no incoming edges, the returned collection is empty.  The
             returned value is never null.
             </para>
            
             <para>
             This property is an O(n) operation, where n is the number of edges
             incident to this vertex.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.Vertex.OutgoingEdges"/>
             <seealso cref="P:Smrf.NodeXL.Core.Vertex.IncidentEdges"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.Vertex.OutgoingEdges">
             <summary>
             Gets a collection of the vertex's outgoing edges.
             </summary>
            
             <value>
             A collection of the vertex's zero or more outgoing edges, as a
             collection of <see cref="T:Smrf.NodeXL.Core.IEdge"/> objects.
             </value>
            
             <remarks>
             An outgoing edge is either a directed edge that has this vertex at its
             back, or an undirected edge connected to this vertex.
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one outgoing edge.
             </para>
            
             <para>
             If there are no outgoing edges, the returned collection is empty.  The
             returned value is never null.
             </para>
            
             <para>
             This property is an O(n) operation, where n is the number of edges
             incident to this vertex.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.Vertex.IncomingEdges"/>
             <seealso cref="P:Smrf.NodeXL.Core.Vertex.IncidentEdges"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.Vertex.IncidentEdges">
             <summary>
             Gets a collection of the vertex's incident edges.
             </summary>
            
             <value>
             A collection of the vertex's zero or more incident edges, as a
             collection of <see cref="T:Smrf.NodeXL.Core.IEdge"/> objects.
             </value>
            
             <remarks>
             An incident edge is an edge that is connected to the vertex.
            
             <para>
             The returned collection is the union of the <see cref="P:Smrf.NodeXL.Core.Vertex.IncomingEdges"/> and <see cref="P:Smrf.NodeXL.Core.Vertex.OutgoingEdges"/> collections.
             </para>
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one incident edge.
             </para>
            
             <para>
             If there are no incident edges, the returned collection is empty.  The
             returned value is never null.
             </para>
            
             <para>
             This property is an O(n) operation, where n is the number of edges
             incident to this vertex.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.Vertex.IncomingEdges"/>
             <seealso cref="P:Smrf.NodeXL.Core.Vertex.IncidentEdges"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.Vertex.Location">
             <summary>
             Gets or sets the vertex's location.
             </summary>
            
             <value>
             The vertex's location as a <see cref="T:System.Drawing.PointF"/>.  The default value is
             <see cref="F:System.Drawing.PointF.Empty"/>.
             </value>
            
             <remarks>
             Typically, this property is set when the graph is laid out by
             ILayout.LayOutGraph and is read when the graph is drawn.  It's also
             possible to explicitly set all of the graph's vertex locations using
             this property and then bypass the layout stage.  You might do this
             when you want to restore vertex locations that have been saved from a
             previous layout, for example.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.Vertex.Degree">
             <summary>
             Gets the vertex's degree.
             </summary>
            
             <value>
             The vertex's degree, as an Int32.
             </value>
            
             <remarks>
             The degree of a vertex is the number of edges that are incident to it.
             (An incident edge is an edge that is connected to this vertex.)
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is considered
             one incident edge.
             </para>
            
             <para>
             This property returns the same value as <see cref="P:Smrf.NodeXL.Core.Vertex.IncidentEdges"/>.Length.
             </para>
            
             <para>
             This property is an O(n) operation, where n is the number of edges
             incident to this vertex.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.Vertex.IncomingEdges"/>
             <seealso cref="P:Smrf.NodeXL.Core.Vertex.OutgoingEdges"/>
             <seealso cref="P:Smrf.NodeXL.Core.Vertex.IncidentEdges"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.Vertex.PredecessorVertices">
             <summary>
             Gets a collection of the vertex's predecessor vertices.
             </summary>
            
             <value>
             A collection of the vertex's zero or more predecessor vertices, as a
             collection of <see cref="T:Smrf.NodeXL.Core.IVertex"/> objects.
             </value>
            
             <remarks>
             A predecessor vertex is a vertex at the other side of an incoming edge.
             (An incoming edge is either a directed edge that has this vertex at its
             front, or an undirected edge connected to this vertex.)
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is always
             considered an incoming edge.  Therefore, if there is an edge that
             connects this vertex to itself, then this vertex is included in the
             returned collection.
             </para>
            
             <para>
             The predecessor vertices in the returned collection are unique.  If two
             or more incoming edges connect this vertex with another vertex, the
             other vertex is included once only.
             </para>
            
             <para>
             If there are no predecessor vertices, the returned collection is empty.
             The returned value is never null.
             </para>
            
             <para>
             This property is an O(n) operation, where n is the number of edges
             incident to this vertex.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.Vertex.SuccessorVertices"/>
             <seealso cref="P:Smrf.NodeXL.Core.Vertex.AdjacentVertices"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.Vertex.SuccessorVertices">
             <summary>
             Gets a collection of the vertex's successor vertices.
             </summary>
            
             <value>
             A collection of the vertex's zero or more successor vertices, as a
             collection of <see cref="T:Smrf.NodeXL.Core.IVertex"/> objects.
             </value>
            
             <remarks>
             A successor vertex is a vertex at the other side of an outgoing edge.
             (An outgoing edge is either a directed edge that has this vertex at its
             back, or an undirected edge connected to this vertex.)
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is always
             considered an outgoing edge.  Therefore, if there is an edge that
             connects this vertex to itself, then this vertex is included in the
             returned collection.
             </para>
            
             <para>
             The successor vertices in the returned collection are unique.  If two
             or more outgoing edges connect this vertex with another vertex, the
             other vertex is included once only.
             </para>
            
             <para>
             If there are no successor vertices, the returned collection is empty.
             The returned value is never null.
             </para>
            
             <para>
             This property is an O(n) operation, where n is the number of edges
             incident to this vertex.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.Vertex.PredecessorVertices"/>
             <seealso cref="P:Smrf.NodeXL.Core.Vertex.AdjacentVertices"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.Vertex.AdjacentVertices">
             <summary>
             Gets a collection of the vertex's adjacent vertices.
             </summary>
            
             <value>
             A collection of the vertex's zero or more adjacent vertices, as a
             collection of <see cref="T:Smrf.NodeXL.Core.IVertex"/> objects.
             </value>
            
             <remarks>
             An adjacent vertex is a vertex at the other side of an incident edge.
             (An incident edge is an edge that is connected to the vertex.)
            
             <para>
             The returned collection is the union of the <see cref="P:Smrf.NodeXL.Core.Vertex.PredecessorVertices"/> and <see cref="P:Smrf.NodeXL.Core.Vertex.SuccessorVertices"/>
             collections.
             </para>
            
             <para>
             A self-loop (an edge that connects a vertex to itself) is always
             considered an incident edge.  Therefore, if there is an edge that
             connects this vertex to itself, then this vertex is included in the
             returned collection.
             </para>
            
             <para>
             The adjacent vertices in the returned collection are unique.  If two or
             more edges connect this vertex with another vertex, the other vertex is
             included once only.
             </para>
            
             <para>
             If there are no adjacent vertices, the returned collection is empty.
             The returned value is never null.
             </para>
            
             <para>
             This property is an O(n) operation, where n is the number of edges
             incident to this vertex.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Core.Vertex.PredecessorVertices"/>
             <seealso cref="P:Smrf.NodeXL.Core.Vertex.SuccessorVertices"/>
        </member>
        <member name="P:Smrf.NodeXL.Core.Vertex.FirstIncidentEdgeNode">
             <summary>
             Gets or sets the first node in the vertex's group of incident edges.
             </summary>
            
             <value>
             First node in the vertex's group of incident edges, or null if the
             vertex has no incident edges.
             </value>
            
             <remarks>
             This is used by <see cref="T:Smrf.NodeXL.Core.EdgeCollection"/>, which maintains the
             incident edge groups for all vertices.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Core.GraphDirectedness">
            <summary>
            Specifies the type of edges a graph can contain.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.GraphDirectedness.Directed">
            <summary>
            Only directed edges can be added to the graph.  A directed edge has
            an <see cref="P:Smrf.NodeXL.Core.IEdge.IsDirected"/> value of true.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.GraphDirectedness.Undirected">
            <summary>
            Only undirected edges can be added to the graph.  An undirected edge
            has an <see cref="P:Smrf.NodeXL.Core.IEdge.IsDirected"/> value of false.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.GraphDirectedness.Mixed">
            <summary>
            Both directed and undirected edges can be added to the graph.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Core.IVertexSorter">
             <summary>
             Represents an object that can sort a collection of vertices.
             </summary>
            
             <remarks>
             The <see cref="M:Smrf.NodeXL.Core.IVertexSorter.Sort(System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex})"/> method sorts the specified vertex collection in a
             manner determined by the implementation.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IVertexSorter.Sort(System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex})">
             <summary>
             Sorts a collection of vertices.
             </summary>
            
             <param name="vertices">
             Collection to sort.  The collection is not modified.
             </param>
            
             <returns>
             A new, sorted collection.
             </returns>
            
             <remarks>
             This method creates a new collection of references to the vertices in
             <paramref name="vertices" />, sorts the new collection, and returns the
             new collection.  The original <paramref name="vertices" /> collection
             is not modified and no vertices are cloned or created.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Core.EdgeUtil">
             <summary>
             Utility methods for dealing with <see cref="T:Smrf.NodeXL.Core.IEdge"/> objects.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.EdgeUtil.VertexNamePairSeparator">
             <remarks>
             The separator character used by <see cref="M:Smrf.NodeXL.Core.EdgeUtil.GetVertexNamePair(System.String,System.String,System.Boolean)"/>.
            
             <para>
             This is a vertical tab, which is highly unlikely to be used in a vertex
             name.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeUtil.EdgeToVertices(Smrf.NodeXL.Core.IEdge,System.String,System.String,Smrf.NodeXL.Core.IVertex@,Smrf.NodeXL.Core.IVertex@)">
             <summary>
             Obtains an edge's two vertices.
             </summary>
            
             <param name="edge">
             The edge connecting the two vertices.  Can't be null.
             </param>
            
             <param name="className">
             Name of the class calling this method.
             </param>
            
             <param name="methodOrPropertyName">
             Name of the method or property calling this method.
             </param>
            
             <param name="vertex1">
             Where the edge's first vertex gets stored.
             </param>
            
             <param name="vertex2">
             Where the edge's second vertex gets stored.
             </param>
            
             <remarks>
             This method obtains an edge's two vertices and stores them at
             <paramref name="vertex1"/> and <paramref name="vertex2"/>.  An
             <see cref="T:System.ApplicationException"/> is thrown if the vertices can't be
             obtained.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeUtil.GetVertexIDPair(Smrf.NodeXL.Core.IEdge)">
             <overloads>
             Combines the IDs of an edge's vertices into a pair suitable for use as
             a dictionary key.
             </overloads>
            
             <summary>
             Combines the IDs of an edge's vertices into a pair suitable for use as
             a dictionary key, taking the edge's directedness into account.
             </summary>
            
             <param name="edge">
             The edge to get the vertex ID pair for.
             </param>
            
             <returns>
             A vertex ID pair suitable for use as a dictionary key.
             </returns>
            
             <remarks>
             In a directed graph, the two edges (A,B) and (A,B) yield the same
             vertex ID pair.  The two edges (A,B) and (B,A) do not.
            
             <para>
             In an undirected graph, the two edges (A,B) and (A,B) yield the same
             vertex ID pair.  The two edges (A,B) and (B,A) also yield the same
             vertex ID pair.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeUtil.GetVertexIDPair(Smrf.NodeXL.Core.IEdge,System.Boolean)">
             <summary>
             Combines the IDs of an edge's vertices into a pair suitable for use as
             a dictionary key, optionally taking the edge's directedness into
             account.
             </summary>
            
             <param name="edge">
             The edge to get the vertex ID pair for.
             </param>
            
             <param name="useDirectedness">
             true to take the edge's directedness into account.
             </param>
            
             <returns>
             A vertex ID pair suitable for use as a dictionary key.
             </returns>
            
             <remarks>
             If <paramref name="useDirectedness" /> is false, the two edges (A,B)
             and (A,B) yield the same vertex ID pair.  The two edges (A,B) and (B,A)
             also yield the same vertex ID pair.
            
             <para>
             If <paramref name="useDirectedness" /> is true and the graph is
             directed, the two edges (A,B) and (A,B) yield the same vertex ID pair.
             The two edges (A,B) and (B,A) do not.
             </para>
            
             <para>
             If <paramref name="useDirectedness" /> is true and the graph is
             undirected, the two edges (A,B) and (A,B) yield the same vertex ID
             pair.  The two edges (A,B) and (B,A) also yield the same vertex ID
             pair.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeUtil.GetVertexNamePair(System.String,System.String,System.Boolean)">
             <summary>
             Combines the names of an edge's vertices into a name pair suitable for
             use as a dictionary key.
             </summary>
            
             <param name="vertexName1">
             Name of the edge's first vertex.  Can't be null or empty.
             </param>
            
             <param name="vertexName2">
             Name of the edge's second vertex.  Can't be null or empty.
             </param>
            
             <param name="graphIsDirected">
             true if the graph is directed, false if it is undirected.
             </param>
            
             <returns>
             A name pair suitable for use as a dictionary key.
             </returns>
            
             <remarks>
             In a directed graph, the two edges (A,B) and (A,B) yield the same
             vertex name pair.  The two edges (A,B) and (B,A) do not.
            
             <para>
             In an undirected graph, the two edges (A,B) and (A,B) yield the same
             vertex name pair.  The two edges (A,B) and (B,A) also yield the same
             vertex name pair.
             </para>
            
             <para>
             This method differs from <see cref="M:Smrf.NodeXL.Core.EdgeUtil.GetVertexIDPair(Smrf.NodeXL.Core.IEdge)"/> in that
             it uses vertex names rather than IDs.  This allows application code to
             test whether two edges might be duplicates before the edges and their
             vertices are actually added to a graph.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeUtil.GetEdgeWeightSum(Smrf.NodeXL.Core.IVertex,Smrf.NodeXL.Core.IVertex)">
             <summary>
             Gets the sum of the edge weights of the edges that connect two
             vertices.
             </summary>
            
             <param name="vertex1">
             The first vertex.
             </param>
            
             <param name="vertex2">
             The second vertex.
             </param>
            
             <returns>
             The sum of the edge weights.
             </returns>
            
             <remarks>
             It's assumed that duplicate edges have been merged, and that the
             <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.EdgeWeight"/> key has been set on
             each of the graph's edges.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeUtil.TryGetEdgeWeight(Smrf.NodeXL.Core.IEdge,System.Double@)">
             <summary>
             Attempts to get the edge weight that might be stored on an edge.
             </summary>
            
             <param name="edge">
             The edge to check.
             </param>
            
             <param name="edgeWeight">
             Where the edge weight gets stored if true is returned.
             </param>
            
             <returns>
             true if the edge weight was obtained.
             </returns>
            
             <remarks>
             If the edge has the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.EdgeWeight"/> key,
             this method stores the key's value at <paramref name="edgeWeight"/>
             and returns true.  Otherwise, false is returned.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeUtil.GetPositiveEdgeWeight(Smrf.NodeXL.Core.IEdge)">
             <summary>
             Gets an edge's weight, ignoring non-positive values.
             </summary>
            
             <param name="edge">
             The edge to check.
             </param>
            
             <returns>
             The edge's weight.  Always greater than zero.
             </returns>
            
             <remarks>
             If the edge has the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.EdgeWeight"/> key
             and its value is positive, this method returns the value.  If it has
             the key and the value is not positive, 1.0 is returned.  If it doesn't
             have the key, 1.0 is returned.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.EdgeUtil.TryGetIntermediateCurvePoints(Smrf.NodeXL.Core.IEdge,System.Drawing.PointF[]@)">
             <summary>
             Attempts to get the intermediate curve points that might be stored on
             an edge.
             </summary>
            
             <param name="edge">
             The edge to check.
             </param>
            
             <param name="intermediateCurvePoints">
             Where an array of intermediate curve points gets stored if true is
             returned.  The array may be empty, which is not an error.
             </param>
            
             <returns>
             true if the intermediate curve points were obtained.
             </returns>
            
             <remarks>
             If the edge has the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerEdgeIntermediateCurvePoints"/> key, this
             method stores the key's value at <paramref name="intermediateCurvePoints"/> and returns true.  Otherwise, false
             is returned.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Core.CollapsedGroupAttributes">
             <summary>
             Stores attributes that describe how a collapsed group should be displayed.
             </summary>
            
             <remarks>
             The attributes are stored as key/value pairs in a dictionary, where the
             keys and values are strings.
            
             <para>
             The entire collection of attributes can be saved to a single delimited
             string using PersistableStringDictionary.<see cref="M:Smrf.AppLib.PersistableStringDictionary.ToString"/>, and the collection can be
             restored from the delimited string using <see cref="M:Smrf.NodeXL.Core.CollapsedGroupAttributes.FromString(System.String)"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.CollapsedGroupAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.CollapsedGroupAttributes"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.CollapsedGroupAttributes.GetGroupType">
             <summary>
             Gets the type of the group, if it's available.
             </summary>
            
             <returns>
             The type of the group, or String.Empty if a type isn't available.
             </returns>
            
             <remarks>
             This returns the value of the <see cref="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.Type"/> key, if it's available.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.CollapsedGroupAttributes.FromString(System.String)">
             <summary>
             Loads a new collection of key/value pairs from a string.
             </summary>
            
             <param name="attributes">
             The collection as a string.  Can be empty but not null.
             </param>
            
             <returns>
             A new collection.
             </returns>
            
             <remarks>
             <paramref name="attributes"/> should be a string that was returned
             from <see cref="M:Smrf.AppLib.PersistableStringDictionary.ToString"/>.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.CollapsedGroupAttributes.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys">
             <summary>
             Names of the keys stored in a <see cref="T:Smrf.NodeXL.Core.CollapsedGroupAttributes"/>
             object.
             </summary>
            
             <remarks>
             For consistency, classes that store or retrieve key/value pairs from a <see cref="T:Smrf.NodeXL.Core.CollapsedGroupAttributes"/> object should use the keys that are
             specified by this class.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.Type">
            <summary>
            The collapsed group's type.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.VertexColor">
            <summary>
            The color of the vertex used to represent a collapsed fan, D-connector,
            or clique motif.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.HeadVertexName">
            <summary>
            The name of the head vertex in a fan motif.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.LeafVertices">
            <summary>
            The number of leaf vertices in a fan motif.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.ArcScale">
            <summary>
            The arc scale in a collapsed fan motif.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.AnchorVertices">
            <summary>
            The number of anchor vertices in a D-connector motif.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.SpanVertices">
            <summary>
            The number of span vertices in a D-connector motif.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.SpanScale">
            <summary>
            The span scale in a collapsed D-connector motif.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.AnchorVertex1EdgeColor">
            <summary>
            The color of the edges connecting the vertex used to represent a
            collapsed D-connector motif with its first anchor vertex.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.AnchorVertex2EdgeColor">
            <summary>
            The color of the edges connecting the vertex used to represent a
            collapsed D-connector motif with its second anchor vertex.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.AnchorVertex1EdgeWidth">
            <summary>
            The width of the edges connecting the vertex used to represent a
            collapsed D-connector motif with its first anchor vertex.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.AnchorVertex2EdgeWidth">
            <summary>
            The width of the edges connecting the vertex used to represent a
            collapsed D-connector motif with its second anchor vertex.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.CliqueVertices">
            <summary>
            The number of member vertices in a clique motif.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.CliqueScale">
            <summary>
            The clique scale in a collapsed clique motif.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.AnchorVertexNameBase">
            <summary>
            The base used for the name of an anchor vertex in a D-connector motif.
            The full key is AnchorVertexNameBase with an appended zero-based anchor
            vertex index: "AnchorVertexName0" and "AnchorVertexName1", for example.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.AnchorVertexEdgeColorBase">
            <summary>
            The base used for the color of the edges connecting the vertex used to
            represent a collapsed D-connector motif with one of its anchor vertices.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.AnchorVertexEdgeWidthBase">
            <summary>
            The base used for the width of the edges connecting the vertex used to
            represent a collapsed D-connector motif with one of its anchor vertices.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.GetAnchorVertexNameKey(System.Int32)">
             <summary>
             Gets the key for the name of a specified anchor vertex in a D-connector
             motif.
             </summary>
            
             <param name="anchorVertexIndex">
             Zero-based index of the anchor vertex.
             </param>
            
             <returns>
             The key for the name of the specified anchor vertex.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.GetAnchorVertexEdgeColorKey(System.Int32)">
             <summary>
             Gets the key for the color of the edges connecting the vertex used to
             represent a collapsed D-connector motif with one of its anchor vertices.
             </summary>
            
             <param name="anchorVertexIndex">
             Zero-based index of the anchor vertex.
             </param>
            
             <returns>
             The key for the edge color for the specified anchor vertex.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.GetAnchorVertexEdgeWidthKey(System.Int32)">
             <summary>
             Gets the key for the width of the edges connecting the vertex used to
             represent a collapsed D-connector motif with one of its anchor vertices.
             </summary>
            
             <param name="anchorVertexIndex">
             Zero-based index of the anchor vertex.
             </param>
            
             <returns>
             The key for the edge width for the specified anchor vertex.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.GetAnchorVertexKey(System.String,System.Int32)">
             <summary>
             Gets a key for a specified anchor vertex in a D-connector motif.
             </summary>
            
             <param name="sKeyBase">
             The base of the key.
             </param>
            
             <param name="iAnchorVertexIndex">
             Zero-based index of the anchor vertex.
             </param>
            
             <returns>
             A key for the specified anchor vertex.
             </returns>
        </member>
        <member name="T:Smrf.NodeXL.Core.CollapsedGroupAttributeValues">
             <summary>
             Values stored in a <see cref="T:Smrf.NodeXL.Core.CollapsedGroupAttributes"/> object.
             </summary>
            
             <remarks>
             For consistency, classes that store or retrieve key/value pairs from a <see cref="T:Smrf.NodeXL.Core.CollapsedGroupAttributes"/> object should use the values that are
             specified by this class.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeValues.FanMotifType">
            <summary>
            Value of the <see cref="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.Type"/> key for a
            collapsed fan motif.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeValues.DConnectorMotifType">
            <summary>
            Value of the <see cref="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.Type"/> key for a
            collapsed D-connector motif.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.CollapsedGroupAttributeValues.CliqueMotifType">
            <summary>
            Value of the <see cref="F:Smrf.NodeXL.Core.CollapsedGroupAttributeKeys.Type"/> key for a
            collapsed clique motif.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Core.GroupInfo">
            <summary>
            Contains information about one vertex group.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.GroupInfo.#ctor(System.String,System.Boolean,System.String)">
             <overloads>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.GroupInfo"/> class.
             </overloads>
            
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.GroupInfo"/> class with
             a unique name and "is collapsed" flag.
             </summary>
            
             <param name="name">
             The unique name of the group.  Can be null or empty.
             </param>
            
             <param name="isCollapsed">
             true if the group should be collapsed.
             </param>
            
             <param name="collapsedAttributes">
             String containing the attributes describing what the group should look
             like when it is collapsed, or null to give the collapsed group a
             default appearance.  If not null, this should be a string that was
             returned by <see cref="M:Smrf.AppLib.PersistableStringDictionary.ToString"/>.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.GroupInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.GroupInfo"/> class
            without a name and without being collapsed.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.GroupInfo.CompareConnectivity(Smrf.NodeXL.Core.GroupInfo)">
            <summary>
            Compares the group's connectivity metric for the Packed Rectangles 
            Group-in-a-Box layout.
            </summary>
            
            <param name="other">
            A group to compare this against.
            </param>
            
            <returns>
            A signed number indicating the relative values of connectivity metric.
            </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.GroupInfo.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.GroupInfo.m_sName">
            The group's unique name.  Can be null or empty.
        </member>
        <member name="F:Smrf.NodeXL.Core.GroupInfo.m_Connectivity">
            Group's connectivity metric for GIB layout algorithm
        </member>
        <member name="F:Smrf.NodeXL.Core.GroupInfo.m_oVertices">
            Collection of the group's vertices.
        </member>
        <member name="F:Smrf.NodeXL.Core.GroupInfo.m_oRectangle">
            The rectangle the group's vertices were laid out within.
        </member>
        <member name="F:Smrf.NodeXL.Core.GroupInfo.m_sLabel">
            Optional label to show in the group's rectangle.  Can be null or empty.
        </member>
        <member name="F:Smrf.NodeXL.Core.GroupInfo.m_bIsCollapsed">
            true if the group should be collapsed.
        </member>
        <member name="F:Smrf.NodeXL.Core.GroupInfo.m_sCollapsedAttributes">
            String that contains the attributes describing what the group should
            look like when it is collapsed, or null.
        </member>
        <member name="F:Smrf.NodeXL.Core.GroupInfo.m_oCollapsedLocation">
            The location of the vertex that represents the collapsed group, or
            null.
        </member>
        <member name="P:Smrf.NodeXL.Core.GroupInfo.Name">
             <summary>
             Gets or sets the group's unique name.
             </summary>
            
             <value>
             An unique name.  Can be null or empty.  The default value is null.
             </value>
            
             <remarks>
             Groups can be collapsed and expanded when using the NodeXLControl.  The
             group to collapse or expand is specified by name.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.GroupInfo.Vertices">
             <summary>
             Gets a collection of the vertices in the group.
             </summary>
            
             <value>
             A collection of the vertices in the group.  Can be empty but not null.
             The default value is an empty collection.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Core.GroupInfo.Rectangle">
             <summary>
             Gets or sets the rectangle the vertices were laid out within.
             </summary>
            
             <value>
             A System.Drawing.Rectangle.  The default value is Rectangle.Empty.
             </value>
            
             <remarks>
             If the graph is laid out using groups, this gets set to the rectangle
             the vertices were laid out within.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.GroupInfo.Label">
             <summary>
             Gets or sets the group's label.
             </summary>
            
             <value>
             An optional label.  Can be null or empty.  The default value is null.
             </value>
            
             <remarks>
             If the graph is laid out using groups, the label gets shown in the
             group's rectangle.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.GroupInfo.IsCollapsed">
             <summary>
             Gets a flag indicating whether the group should be collapsed.
             </summary>
            
             <value>
             true if the group should be collapsed.
             </value>
            
             <remarks>
             Groups can be collapsed and expanded when using the NodeXLControl.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.GroupInfo.CollapsedLocation">
             <summary>
             Gets or sets the location of the vertex that represents the collapsed
             group.
             </summary>
            
             <value>
             The vertex's location as a <see cref="T:System.Drawing.PointF"/>, or null if a
             collapsed location is not available.  The default value is null.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Core.GroupInfo.CollapsedAttributes">
             <summary>
             Gets or sets a string containing the attributes describing what the
             group should look like when it is collapsed.
             </summary>
            
             <value>
             A string that was returned by <see cref="M:Smrf.AppLib.PersistableStringDictionary.ToString"/>, or null if
             the collapsed group should have a default appearance.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Core.GroupInfo.Connectivity">
            <summary>
            Gets or sets the group's connectivity metric for the Packed Rectangles 
            Group-in-a-Box layout.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Core.GroupUtil">
             <summary>
             Utility methods for dealing with vertex groups.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.GroupUtil.GraphHasGroups(Smrf.NodeXL.Core.IGraph)">
             <summary>
             Returns true if a graph has at least one group.
             </summary>
            
             <param name="graph">
             The graph to check.
             </param>
            
             <returns>
             true if the graph has at least one group.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.GroupUtil.TryGetGroups(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Core.GroupInfo[]@)">
             <summary>
             Attempts to get a graph's groups.
             </summary>
            
             <param name="graph">
             The graph to get groups from.
             </param>
            
             <param name="groups">
             Where the graph's groups get stored if the graph has at least one
             group.
             </param>
            
             <returns>
             true if the graph has at least one group.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.GroupUtil.GetGroups(Smrf.NodeXL.Core.IGraph)">
             <summary>
             Gets a graph's groups, or an empty array if the graph has no groups.
             </summary>
            
             <param name="graph">
             The graph to get groups from.
             </param>
            
             <returns>
             An array of GroupInfo objects.  If the graph has no groups, an empty
             array is returned.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.GroupUtil.GetGroupIndexDictionary(System.Collections.Generic.IList{Smrf.NodeXL.Core.GroupInfo})">
             <summary>
             Gets a Dictionary that maps vertex IDs to the groups the vertices
             belong to.
             </summary>
            
             <param name="groups">
             A collection of <see cref="T:Smrf.NodeXL.Core.GroupInfo"/> objects, one for each group.
             </param>
            
             <returns>
             A new Dictionary.  The key is an IVertex.ID and the value is the
             zero-based index of the group the vertex belongs to.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.GroupUtil.GetGroupsWithAllVertices(Smrf.NodeXL.Core.IGraph,System.Boolean)">
             <summary>
             Gets a list of the graph's groups, adding an extra group if necessary
             to contain any non-grouped vertices.
             </summary>
            
             <param name="graph">
             The graph to get the groups from.
             </param>
            
             <param name="checkForCollapsedGroups">
             If true and a group is collapsed, the group's vertices are ignored and
             the vertex that represents the collapsed group is placed in the extra
             group mentioned in the Remarks.
             </param>
            
             <returns>
             A List containing a GroupInfo object for each of the graph's groups.
             See the Remarks.
             </returns>
            
             <remarks>
             If the graph has vertices that aren't in a group, they are put in an
             extra GroupInfo object that is included in the returned list.  The
             returned list therefore contains every vertex in the graph.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.GroupUtil.RemoveIsolatesFromGroups(System.Collections.Generic.List{Smrf.NodeXL.Core.GroupInfo})">
             <summary>
             Removes isolated vertices from a list of the graph's groups.
             </summary>
            
             <param name="groups">
             The list containing the graph's groups.
             </param>
            
             <remarks>
             This method removes all isolated vertices from <paramref
             name="groups" />.  If that leaves one or more GroupInfo objects with
             zero vertices, those GroupInfo objects are then removed from the list.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Core.IntergroupEdgeInfo">
             <summary>
             Contains information about the edges that connect the vertices in one
             vertex group to the vertices in another vertex group.
             </summary>
            
             <remarks>
             The groups are assumed to be stored in some external indexed collection.
             This class stores the indexes of two groups, along with metrics for the
             edges that connect the groups.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IntergroupEdgeInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.IntergroupEdgeInfo"/>
             class.
             </summary>
            
             <param name="group1Index">
             The index of the first group.
             </param>
            
             <param name="group2Index">
             The index of the second group.  Note that this can be the same as
             <paramref name="group1Index"/>, in which case the object contains
             information about the edges that connect the vertices within a single
             group.
             </param>
            
             <param name="edges">
             The number of edges that connect the vertices in the first group with
             the vertices in the second group.  Must be greater than zero.
             </param>
            
             <param name="edgeWeightSum">
             The sum of the edge weights of the edges that connect the vertices in
             the first group with the vertices in the second group.  Must be greater
             than zero.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.IntergroupEdgeInfo.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.IntergroupEdgeInfo.m_iGroup1Index">
            The index of the first group.
        </member>
        <member name="F:Smrf.NodeXL.Core.IntergroupEdgeInfo.m_iGroup2Index">
            The index of the second group.
        </member>
        <member name="F:Smrf.NodeXL.Core.IntergroupEdgeInfo.m_iEdges">
            The number of edges that connect the two groups.
        </member>
        <member name="F:Smrf.NodeXL.Core.IntergroupEdgeInfo.m_dEdgeWeightSum">
            The sum of the edge weights of the edges that connect the vertices in
            the first group with the vertices in the second group.
        </member>
        <member name="P:Smrf.NodeXL.Core.IntergroupEdgeInfo.Group1Index">
             <summary>
             Gets the index of the first group.
             </summary>
            
             <value>
             A zero-based index into a collection of groups.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Core.IntergroupEdgeInfo.Group2Index">
             <summary>
             Gets the index of the second group.
             </summary>
            
             <value>
             A zero-based index into a collection of groups.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Core.IntergroupEdgeInfo.Edges">
             <summary>
             Gets or sets the number of edges that connect the two groups.
             </summary>
            
             <value>
             The number of edges that connect the vertices in the first group with
             the vertices in the second group.  Must be greater than zero.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Core.IntergroupEdgeInfo.EdgeWeightSum">
             <summary>
             Gets or sets the sum of the edge weights of the edges that connect the
             vertices.
             </summary>
            
             <value>
             The sum of the edge weights of the edges that connect the vertices in
             the first group with the vertices in the second group.  Must be greater
             than zero.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Core.IDGenerator">
             <summary>
             Generates a sequence of unique IDs.
             </summary>
            
             <remarks>
             Call <see cref="M:Smrf.NodeXL.Core.IDGenerator.GetNextID"/> to get a unique integer ID.  By default, <see cref="M:Smrf.NodeXL.Core.IDGenerator.GetNextID"/> generates a simple integer sequence that starts at 1.
            
             <para>
             This class can be used to generate unique IDs for graphs, vertices, and
             edges.  The class responsible for creating objects of one of these types
             should define a static field of type <see cref="T:Smrf.NodeXL.Core.IDGenerator"/>, then call
             <see cref="M:Smrf.NodeXL.Core.IDGenerator.GetNextID"/> every time an object of that type is created.
             This results in independent sequences for each type.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.IDGenerator.#ctor">
             <overloads>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.IDGenerator"/> class.
             </overloads>
            
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.IDGenerator"/> class with
             a first ID of 1.
             </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.IDGenerator.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.IDGenerator"/> class with
             a specified first ID.
             </summary>
            
             <param name="firstID">
             First ID to return from <see cref="M:Smrf.NodeXL.Core.IDGenerator.GetNextID"/>.  Can't be <see cref="F:System.Int32.MaxValue"/>.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.IDGenerator.GetNextID">
             <summary>
             Returns the ID to use for the next created object.
             </summary>
            
             <returns>
             The ID to use for the next created object.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.IDGenerator.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.IDGenerator.m_iNextID">
            ID to use for the next created object.
        </member>
        <member name="T:Smrf.NodeXL.Core.LayoutUtil">
             <summary>
             Utility methods for dealing with graph layouts.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.LayoutUtil.GetRectangleTransformation(System.Drawing.RectangleF,System.Drawing.RectangleF)">
             <summary>
             Returns a <see cref="T:System.Drawing.Drawing2D.Matrix"/> that will transform points from
             coordinates in one rectangle to cooordinates in another rectangle.
             </summary>
            
             <param name="rectangle1">
             Source rectangle.
             </param>
            
             <param name="rectangle2">
             Destination rectangle.
             </param>
            
             <returns>
             A <see cref="T:System.Drawing.Drawing2D.Matrix"/> to transform points from <paramref name="rectangle1"/> to <paramref name="rectangle2"/>.
             </returns>
            
             <remarks>
             The <see cref="T:System.Drawing.Drawing2D.Matrix"/> returned by this method can be used to
             transform vertex locations and other points from one rectangle to
             another.  The transformation can involve both a translation and a
             scaling.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.LayoutUtil.TransformVertexLocations(Smrf.NodeXL.Core.IGraph,System.Drawing.Drawing2D.Matrix)">
             <summary>
             Transforms a graph's vertex locations from their original rectangle to
             a new rectangle using a specified transformation matrix.
             </summary>
            
             <param name="graph">
             Graph whose vertex locations should be transformed.
             </param>
            
             <param name="transformationMatrix">
             Transformation matrix to use.
             </param>
            
             <remarks>
             After a graph is laid out, this method can be used to transform the
             vertex locations from the original graph rectangle to a new graph
             rectangle.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.LayoutUtil.TransformRectangle(System.Drawing.Rectangle,System.Drawing.Drawing2D.Matrix)">
             <summary>
             Transforms a rectangle using a specified transformation matrix.
             </summary>
            
             <param name="rectangle">
             Rectangle to transform.
             </param>
            
             <param name="transformationMatrix">
             Transformation matrix to use.
             </param>
            
             <returns>
             A new transformed rectangle.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.LayoutUtil.TransformPointF(System.Drawing.PointF,System.Drawing.Drawing2D.Matrix)">
             <summary>
             Transforms a PointF using a specified transformation matrix.
             </summary>
            
             <param name="pointF">
             PointF to transform.
             </param>
            
             <param name="transformationMatrix">
             Transformation matrix to use.
             </param>
            
             <returns>
             Transformed copy of <paramref name="pointF" />.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.LayoutUtil.GetGraphBoundingRectangle(Smrf.NodeXL.Core.IGraph)">
             <summary>
             Returns the smallest <see cref="T:System.Drawing.RectangleF"/> that contains all of a
             graph's vertices.
             </summary>
            
             <param name="graph">
             Graph to get a bounding rectangle for.
             </param>
            
             <returns>
             A <see cref="T:System.Drawing.RectangleF"/> that contains all of a graph's vertices.
             </returns>
            
             <remarks>
             If <paramref name="graph"/> contains zero vertices, RectangleF.Empty
             is returned.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Core.ReservedMetadataKeys">
             <summary>
             Contains metadata keys used by the NodeXL system.
             </summary>
            
             <remarks>
             Some of the metadata keys defined in this class are meant for use by
             applications that use the NodeXL class libraries.  An application can add
             the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerColor"/> key to a vertex or edge to set its color, for
             example.  Other keys are used internally by NodeXL and are of no use to
             applications -- <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayoutBaseLayoutComplete"/> is used internally
             by the NodeXL layout classes, for example.
            
             <para>
             See <see cref="T:Smrf.NodeXL.Core.IMetadataProvider"/> for information on the metadata scheme
             used by NodeXL.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.FirstChar">
            <summary>
            All reserved keys start with this character.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.EdgeWeight">
             <summary>
             Key added to an edge to specify an edge weight.
             </summary>
            
             <remarks>
             The key's value is a Double.
            
             <para>
             Edge weights are used by the FruchtermanReingoldLayout class to
             determine the attractive force between an edge's vertices.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexToolTip">
             <summary>
             Key added to a vertex to set the vertex's tooltip when using
             NodeXLControl.
             </summary>
            
             <remarks>
             The key's value is a String.
            
             <para>
             For tooltips to be visible, you must set
             NodeXLControl.UseVertexToolTips to true.  The default value is false.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.CollapsedVertices">
             <summary>
             Key added to the vertex that represents a collapsed group.
             </summary>
            
             <remarks>
             The key's value is an ICollection&lt;IVertex&gt;.
            
             <para>
             When a group of vertices is collapsed in the NodeXLControl, this key
             gets added to the new vertex that represents the collapsed group.  The
             value contains the group's vertices, which were all removed from the
             graph during the collapse operation.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.CollapsedInternalEdges">
             <summary>
             Key added to the vertex that represents a collapsed group.
             </summary>
            
             <remarks>
             The key's value is an ICollection&lt;IEdge&gt;.
            
             <para>
             When a group of vertices is collapsed in the NodeXLControl, this key
             gets added to the new vertex that represents the collapsed group.  The
             value contains the group's internal edges, which were all removed from
             the graph during the collapse operation.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.CollapsedGroupInfo">
             <summary>
             Key added to the vertex that represents a collapsed group.
             </summary>
            
             <remarks>
             The key's value is a <see cref="T:Smrf.NodeXL.Core.GroupInfo"/> object.
            
             <para>
             When a group of vertices is collapsed in the NodeXLControl, this key
             gets added to the new vertex that represents the collapsed group.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.OriginalVertex1InEdge">
             <summary>
             Key added to an edge external to a collapsed group.
             </summary>
            
             <remarks>
             The key's value is an IVertex.
            
             <para>
             When a group of vertices is collapsed in the NodeXLControl, either this
             key or <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.OriginalVertex2InEdge"/> gets added to each edge
             external to the collapsed group.  The value is the collapsed vertex
             that was originally the edge's first or second vertex.  This is used to
             reconnect the edge to its original vertex when the group is later
             expanded.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.OriginalVertex2InEdge">
             <summary>
             Key added to an edge external to a collapsed group.
             </summary>
            
             <remarks>
             The key's value is an IVertex.
            
             <para>
             See <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.OriginalVertex1InEdge"/>.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.GroupLayoutDrawingInfo">
             <summary>
             Key added to a graph to specify how groups and the edges between them
             should be drawn when the graph is laid out using groups.
             </summary>
            
             <remarks>
             If this key is specified, each of the group rectangles specified in the
             value is drawn on top of the graph's background.  The rectangles are
             the layout bounds that were used to lay out the graph's groups.  Also,
             any combined intergroup edges specified in the value are drawn.
            
             <para>
             The key's value is of type
             Smrf.NodeXL.Layouts.GroupLayoutDrawingInfo.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.VertexDrawingHistory">
             <summary>
             Key added to a vertex to store information about how the vertex was
             drawn.
             </summary>
            
             <remarks>
             The key's value is a
             Smrf.NodeXL.Visualization.Wpf.VertexDrawingHistory.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.EdgeDrawingHistory">
             <summary>
             Key added to an edge to store information about how the edge was drawn.
             </summary>
            
             <remarks>
             The key's value is a
             Smrf.NodeXL.Visualization.Wpf.EdgeDrawingHistory.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.IsSelected">
             <summary>
             Key added to a vertex or edge to draw it as selected.
             </summary>
            
             <remarks>
             The key's value is null.
            
             <para>
             <b>Important Note:</b>
             </para>
            
             <para>
             When using NodeXLControl, do not use the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.IsSelected"/> key
             to select vertex or edges.  Use the selection methods on the control
             instead.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility">
             <summary>
             Key added to a vertex or edge to control its visibility.
             </summary>
            
             <remarks>
             The key's value is a member of the <see cref="T:Smrf.NodeXL.Core.VisibilityKeyValue"/>
             enumeration.
            
             <para>
             If this key is present and its value is <see cref="F:Smrf.NodeXL.Core.VisibilityKeyValue.Filtered"/> or <see cref="F:Smrf.NodeXL.Core.VisibilityKeyValue.Hidden"/>, any <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerAlpha"/> key is
             ignored.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerColor">
             <summary>
             Key added to a vertex or edge to force it to be a specified color.
             </summary>
            
             <remarks>
             The key's value can be either a System.Drawing.Color or a 
             System.Windows.Media.Color.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerAlpha">
             <summary>
             Key added to a vertex or edge to force it to be a specified
             transparency.
             </summary>
            
             <remarks>
             The key's value is a Single between 0 (transparent) and 255 (opaque).
             (It's a Single instead of a Byte to reduce rounding errors when alpha
             values are converted to and from alpha ranges that don't run from 0 to
             255.)
            
             <para>
             If the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/> key is present and its value is <see cref="F:Smrf.NodeXL.Core.VisibilityKeyValue.Filtered"/> or <see cref="F:Smrf.NodeXL.Core.VisibilityKeyValue.Hidden"/>, the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerAlpha"/> key is
             ignored.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexShape">
             <summary>
             Key added to a vertex to force it to be a specified shape.
             </summary>
            
             <remarks>
             The key's value is a VertexShape.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexRadius">
             <summary>
             Key added to a vertex to force it to be a specified radius.
             </summary>
            
             <remarks>
             The key's value is a Single between VertexDrawer.MinimumRadius and
             VertexDrawer.MaximumRadius.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexImage">
             <summary>
             Key added to a vertex to specify the vertex's image.
             </summary>
            
             <remarks>
             If the vertex has the shape VertexShape.Image, the vertex is drawn as
             the image specified by the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexImage"/> key.  If the 
             vertex has the shape VertexShape.Image and the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexImage"/> key is missing, the vertex is drawn as a 
             VertexShape.Disk.
            
             <para>
             The key's value is a System.Windows.Media.ImageSource.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabel">
             <summary>
             Key added to a vertex to specify the vertex's label text.
             </summary>
            
             <remarks>
             The effect of this key depends on the vertex's shape.  If the shape is
             VertexShape.Label, the vertex is drawn as a rectangle containing the
             text specified by the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabel"/> key.  If the shape
             is something other than VertexShape.Label, the vertex is drawn as the
             specified shape and the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabel"/> text is drawn
             next to the vertex as an annotation, at the position specified by the
             optional <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabelPosition"/> key.
            
             <para>
             If the vertex's shape is VertexShape.Label and the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabel"/> key is missing, the vertex is drawn as a
             VertexShape.Disk.
             </para>
            
             <para>
             The key's value is a System.String.  A value of null or an empty string
             is treated as a missing key.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabelPosition">
             <summary>
             Key added to a vertex to specify the vertex's label position.
             </summary>
            
             <remarks>
             This has an effect only if a vertex label is drawn as an annotation.
             See <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabel"/> for details.
            
             <para>
             The key's value is a VertexLabelPosition.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabelFillColor">
             <summary>
             Key added to a vertex to force a label to have a specified fill color.
             </summary>
            
             <remarks>
             The key's value can be either a System.Drawing.Color or a 
             System.Windows.Media.Color.  Used only if the vertex has the shape
             VertexShape.Label and <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabel"/> is specified.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabelFontSize">
             <summary>
             Key added to a vertex to specify the vertex's label font size.
             </summary>
            
             <remarks>
             If the vertex has the shape VertexShape.Label and also has the key <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabelFontSize"/>, the label text is drawn using the
             specified font size.
            
             <para>
             This key is not used for a label drawn as an annotation.
             </para>
            
             <para>
             The key's value is a Single and is in WPF font size units.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerEdgeWidth">
             <summary>
             Key added to an edge to force it to be a specified width.
             </summary>
            
             <remarks>
             The key's value is a Single between EdgeDrawer.MinimumWidth and
             EdgeDrawer.MaximumWidth.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerEdgeStyle">
             <summary>
             Key added to an edge to force it to have a specified style.
             </summary>
            
             <remarks>
             The key's value is an EdgeStyle.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerEdgeLabel">
             <summary>
             Key added to an edge to force a label to be drawn on top of it.
             </summary>
            
             <remarks>
             The key's value is a System.String that specifies the edge's label.  If
             null or empty, no label is drawn.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerEdgeLabelTextColor">
             <summary>
             Key added to an edge to force a label to have a specified text color.
             </summary>
            
             <remarks>
             The key's value can be either a System.Drawing.Color or a 
             System.Windows.Media.Color.  Used only if <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerEdgeLabel"/>
             is specified.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerEdgeLabelFontSize">
             <summary>
             Key added to an edge to force a label to have a specified font size.
             </summary>
            
             <remarks>
             The key's value is a positive Single, in WPF units.  Used only if <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerEdgeLabel"/> is specified.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerEdgeIntermediateCurvePoints">
             <summary>
             Key added to an edge to force it to be drawn as a curve.
             </summary>
            
             <remarks>
             If the key is present on an edge and the EdgeDrawer.CurveStyle property
             is set to EdgeCurveStyle.CurveThroughIntermediatePoints, then the edge
             gets drawn as a smooth curve through the specified intermediate points. 
            
             <para>
             The key's value is a one-dimensional array of System.Drawing.PointF
             objects.  The array should include only the intermediate points on the
             curve; it should NOT include the edge's endpoints.  For example, if the
             curve should start at the edge's first vertex, pass through the
             intermediate points (53.9,204.1) and (87.2,180.5), and terminate at the
             edge's second vertex, then the key's value should be a two-element
             array of System.Drawing.PointF objects containing the points
             (53.9,204.1) and (87.2,180.5).
             </para>
            
             <para>
             If the EdgeDrawer.CurveStyle property is set to
             EdgeCurveStyle.CurveThroughIntermediatePoints and the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerEdgeIntermediateCurvePoints"/> key is missing from an edge or
             contains a zero-length array, the edge gets drawn as a straight line.
             </para>
            
             <para>
             If this key is added to the graph's edges, the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.GraphHasEdgeIntermediateCurvePoints"/> key should be added to
             the graph itself.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayoutBaseLayoutComplete">
             <summary>
             Key added to the graph after it has been laid out.
             </summary>
            
             <remarks>
             The key's value is null.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.GraphHasEdgeIntermediateCurvePoints">
             <summary>
             Key added to the graph to indicate that edges have intermediate curve
             points.
             </summary>
            
             <remarks>
             This key is added to the graph to indicate that the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerEdgeIntermediateCurvePoints"/> key has been added to the
             graph's edges.  When the graph is resized, the layout classes check for
             this key to determine whether there are intermediate curve points that
             need to be transformed.
            
             <para>
             The key's value is null.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PreCollapsePerEdgeWidth">
             <summary>
             Key added to an edge to save its width before the group it connects to
             is collapsed.
             </summary>
            
             <remarks>
             The key's value is a Single between EdgeDrawer.MinimumWidth and
             EdgeDrawer.MaximumWidth.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PreCollapsePerEdgeColor">
             <summary>
             Key added to an edge to save its color before the group it connects to
             is collapsed.
             </summary>
            
             <remarks>
             The key's value is a System.Drawing.Color.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.FanMotifFanColor">
             <summary>
             Key added to a collapsed group vertex that represents a fan motif.
             This is fill color of the fan part of the collapsed group vertex only.
             It is not the color of the head part of the collapsed group vertex.
             </summary>
            
             <remarks>
             The key's value is a System.Drawing.Color.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.GroupInfo">
             <summary>
             Key added to a graph to specify group information.
             </summary>
            
             <remarks>
             The key's value is an array of Smrf.NodeXL.Core.GroupInfo objects
             (or objects derived from that class), one for each group.
            
             <para>
             To parition the graph's vertices into groups and lay out each group in
             its own box, set the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.GroupInfo"/> key on the graph and set
             LayoutBase.LayoutStyle to LayoutStyle.UseGroups.
             </para>
            
             <para>
             To expand and collapse vertex groups when using the NodeXLControl, set
             the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.GroupInfo"/> key on the graph and call the
             NodeXLControl.CollapseGroup() or NodeXLControl.ExpandGroup() methods.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SortableLayoutAndZOrder">
             <summary>
             Key added to every vertex to specify the order in which the vertices
             are laid out and drawn in the graph.
             </summary>
            
             <remarks>
             The key's value is of type Single.  You must also add the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SortableLayoutAndZOrderSet"/> key to the graph.
            
             <para>
             This key serves two purposes:
             </para>
            
             <list type="bullet">
            
             <item><term>
             If the graph is laid out using a layout class derived from
             SortableLayoutBase, the key determines the vertex's layout order when
             the graph is laid out.  Vertices with smaller key values are laid out
             first.  Other layout classes ignore the key.
             </term></item>
            
             <item><term>
             The key always determines the vertex's z-order when the graph is drawn,
             regardless of which layout class is used.  Vertices with smaller key
             values are drawn first.
             </term></item>
            
             </list>
            
             <para>
             If the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SortableLayoutAndZOrder"/> key is added to some
             vertices but not others, an exception is thrown.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SortableLayoutAndZOrderSet">
             <summary>
             Key added to the graph to specify that the vertex layout and z-orders
             have been set on each vertex with the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SortableLayoutAndZOrder"/> key.
             </summary>
            
             <remarks>
             The value of the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SortableLayoutAndZOrderSet"/> key is null.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly">
             <summary>
             Key added to a graph to tell the layout algorithm to lay out only a
             specified set of vertices.
             </summary>
            
             <remarks>
             The key's value is an ICollection&lt;IVertex&gt; containing the
             vertices to lay out.  When this key is present on the graph, the layout
             completely ignores the graph's vertices that are not in the specified
             collection.
            
             <para>
             By default, the specified vertices are laid out within the full graph
             rectangle, but if the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesWithinBounds"/>
             key is also added to the graph, then the specified vertices are laid
             out within the rectangle defined by the current locations of the
             outermost vertices in the set.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesWithinBounds">
             <summary>
             Key added to a graph to tell the layout algorithm to lay out only a
             specified set of vertices within a bounding rectangle.
             </summary>
            
             <remarks>
             The key is used only if the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/> key
             is also added to the graph.  If both keys are present, the specified
             vertices are laid out within the rectangle defined by the current
             locations of the outermost vertices in the set.
            
             <para>
             The value of the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesWithinBounds"/> key is
             null.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation">
             <summary>
             Key added to a vertex to tell the layout algorithm to leave the vertex
             at its current location.
             </summary>
            
             <remarks>
             The key's value is a Boolean.  The layout may include the vertex in its
             overall layout calculations, but it cannot move the vertex.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PolarLayoutCoordinates">
             <summary>
             Key added to a vertex to specify its location in polar coordinates.
             </summary>
            
             <remarks>
             The key's value is a SinglePolarCoordinates.
            
             <para>
             When using the PolarLayout, the SinglePolarCoordinates.R value should
             be between 0.0 and 1.0.  0.0 represents the origin and 1.0 represents
             the maximum distance from the origin, which is the smaller of half the
             graph rectangle's width or height.  R values less than 0.0 are the same
             as 0.0, and R values greater than 1.0 are the same as 1.0.
             </para>
            
             <para>
             When using the PolarAbsoluteLayout, the SinglePolarCoordinates.R value
             is unrestricted. 0.0 represents the origin, 1 represents one WPF unit
             (1/96 inch), and -1 represents one WPF unit in the opposite direction.
             </para>
            
             <para>
             The SinglePolarCoordinates.Angle value should be an angle in degrees,
             where 0.0 represents points on the positive x-axis and 90.0 represents
             points on the positive y-axis.  Any angle is valid.  361.0 degrees is
             the same as 1.0 degree, for example, and -1.0 degree is the same as
             359.0 degrees.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.FruchtermanReingoldLayoutTagStorage">
            <summary>
            Key added to each vertex to temporarily store the vertex's Tag.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SugiyamaComputedRadius">
             <summary>
             Key added to a graph to save the radius computed by SugiyamaLayout.
             </summary>
            
             <remarks>
             SugiyamaLayout uses VertexDrawer.Radius as an initial radius for the
             vertex circles, then computes an actual radius that probably differs
             from the initial value.  It stores the computed radius in the IGraph's
             metadata in a key named SugiyamaComputedRadius  The type of the key's
             value is Single.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SugiyamaCurvePoints">
             <summary>
             Key added to an edge to save the edge curve points computed by
             SugiyamaLayout.
             </summary>
            
             <remarks>
             For each edge, SugiyamaLayout computes a curve that extends from the
             edge's first vertex to some point near the second vertex, then computes
             an endpoint on the second vertex's circle.  It stores an array of curve
             points in the edge's metadata in a key named SugiyamaCurvePoints.  The
             type of the key's value is PointF[].  The curve points should be drawn
             with code similar to the following:
            
             <code>
            
             GraphicsPath oGraphicsPath = new GraphicsPath();
             
             oGraphicsPath.AddBeziers(aoCurvePoints);
             
             oGraphics.DrawPath(oPen, oGraphicsPath);
            
             </code>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SugiyamaEndpoint">
             <summary>
             Key added to an edge to save the edge curve endpoint computed by
             SugiyamaLayout.
             </summary>
            
             <remarks>
             For each edge, SugiyamaLayout computes an endpoint on the second
             vertex's circle and stores it in the edge's metadata in a key named
             SugiyamaEndpoint.  The type of the key's value is PointF.  The line
             from the last curve point to the endpoint should be drawn with code
             similar to the following:
            
             <code>
            
             oGraphics.DrawLine(oPen,
                 aoCurvePoints[aoCurvePoints.Length - 1],
                 oEndpoint
                 );
            
             </code>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SugiyamaGleeNode">
             <summary>
             Key added to a vertex to temporarily store a NodeXL vertex's
             corresponding GLEE node.
             </summary>
            
             <remarks>
             This is used by SugiyamaLayout.  The type of the key's value is
             Microsoft.Glee.Node.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SugiyamaGleeEdge">
             <summary>
             Key added to an edge to temporarily store a NodeXL edge's corresponding
             GLEE edge.
             </summary>
            
             <remarks>
             This is used by SugiyamaLayout.  The type of the key's value is
             Microsoft.Glee.Edge.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.IntergroupEdgesHidden">
             <summary>
             Key added to a graph to indicate that intergroup edges have been
             hidden.
             </summary>
            
             <remarks>
             The key's value is null.
            
             <para>
             When intergroup edges are hidden, <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.IntergroupEdgesHidden"/>
             gets added to the graph.  Also, each intergroup edge gets a <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/> key that is set to <see cref="F:Smrf.NodeXL.Core.VisibilityKeyValue.Hidden"/>, and each such edge also gets a
             <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SavedVisibility"/> key that saves the previous visibility.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SavedVisibility">
             <summary>
             Key added to a hidden intergroup edge to save the visibility it had
             before it was hidden.
             </summary>
            
             <remarks>
             The key's value is a member of the <see cref="T:Smrf.NodeXL.Core.VisibilityKeyValue"/>
             enumeration.
             </remarks>
            
             <seealso cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.IntergroupEdgesHidden"/>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.ConnectedComponentCalculatorIndex">
             <summary>
             Key added to each vertex in the graph while computing the graph's
             strongly connected components.
             </summary>
            
             <remarks>
             The key's value is of type Int32.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.ConnectedComponentCalculatorLowLink">
             <summary>
             Key added to each vertex in the graph while computing the graph's
             strongly connected components.
             </summary>
            
             <remarks>
             The key's value is of type Int32.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.AllEdgeMetadataKeys">
             <summary>
             Key added to a graph to specify the complete set of metadata key values
             that may be present on the graph's edges.
             </summary>
            
             <remarks>
             When WorkbookReader.ReadWorkbook() is called with a
             ReadWorkbookContext.ReadAllEdgeAndVertexColumns value of true, this key
             gets added to the graph.  The key's value is of type String[] and the
             array contains one string for each possible key value.
            
             <para>
             Also, GraphMLGraphAdapter.LoadGraph() adds this key to the graph to
             indicate which keys may have been added to the graph's edges.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.AllVertexMetadataKeys">
             <summary>
             Key added to a graph to specify the complete set of metadata key values
             that may be present on the graph's vertices.
             </summary>
            
             <remarks>
             When WorkbookReader.ReadWorkbook() is called with a
             ReadWorkbookContext.ReadAllEdgeAndVertexColumns value of true, this key
             gets added to the graph.  The key's value is of type String[] and the
             array contains one string for each possible key value.
            
             <para>
             Also, GraphMLGraphAdapter.LoadGraph() adds this key to the graph to
             indicate which keys may have been added to the graph's vertices.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.VertexHasVisibilityOfShow">
             <summary>
             Key added to a vertex to mark it as a vertex that should be shown
             regardless of whether it is part of an edge.
             </summary>
            
             <remarks>
             The key's value is null.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.GraphDescription">
             <summary>
             Key added to a graph to describe where the graph came from.
             </summary>
            
             <remarks>
             GraphMLGraphAdapter.LoadGraph() adds this key to the graph if there is
             a description of the graph in the GraphML it loads.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SuggestedTitle">
             <summary>
             Key added to a graph to specify a suggested title.
             </summary>
            
             <remarks>
             GraphMLGraphAdapter.LoadGraph() adds this key to the graph if there is
             a suggested title in the GraphML it loads.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SuggestedFileNameNoExtension">
             <summary>
             Key added to a graph to specify a suggested file name.
             </summary>
            
             <remarks>
             GraphMLGraphAdapter.LoadGraph() adds this key to the graph if there is
             a suggested file name in the GraphML it loads.  The file name has no
             path or extension.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.DraggedVerticesOriginalLocation">
             <summary>
             Key added to a dragged vertex to store its original location.
             </summary>
            
             <remarks>
             The Visualization.Wpf.DraggedVertices class adds this key to each
             selected vertex before it is dragged.  The key's value is the vertex's
             original location, as a PointF.  The key is removed when the drag
             completes.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Marked">
             <summary>
             Key added to a vertex or edge to "mark" it.
             </summary>
            
             <remarks>
             The key's value is true or false.  The meaning of marking is up to the
             application.  None of the NodeXL core or visualization components pay
             attention to this key.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.ReservedMetadataKeys.CustomContextMenuItems">
             <summary>
             Key added to a vertex to add custom menu items to the vertex's
             context menu in the graph.
             </summary>
            
             <remarks>
             The key's value is an array of KeyValue&lt;String,String&gt;.  For each
             element, the key is the custom menu item text and the value is the
             custom menu item action.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Core.VisibilityKeyValue">
             <summary>
             Values used by the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/> reserved
             metadata key.
             </summary>
            
             <remarks>
             Setting the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/> key on a vertex
             or edge to one of these values controls the visibility of the vertex or
             edge.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Core.VisibilityKeyValue.Visible">
            <summary>
            The vertex or edge is drawn normally.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.VisibilityKeyValue.Hidden">
             <summary>
             The vertex or edge is not drawn, even though it participated in the
             layout.
            
             <para>
             Any <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerAlpha"/> key is ignored.
             </para>
            
             </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.VisibilityKeyValue.Filtered">
             <summary>
             The vertex or edge is drawn, but with a reduced alpha to indicate that
             it has been filtered with a dynamic filter.
            
             <para>
             Any <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerAlpha"/> key is ignored.
             </para>
            
             </summary>
        </member>
        <member name="T:Smrf.NodeXL.Core.ByDelegateVertexSorter">
             <summary>
             Sorts a collection of vertices using a vertex-comparison delegate.
             </summary>
            
             <remarks>
             Use this class when you want to sort a collection of vertices using your
             own vertex comparison method.  Set the <see cref="P:Smrf.NodeXL.Core.ByDelegateVertexSorter.VertexComparer"/>
             property to a delegate that compares two vertices, then call the <see cref="M:Smrf.NodeXL.Core.IVertexSorter.Sort(System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex})"/> method.
            
             <para>
             If you want to sort on metadata values, use <see cref="T:Smrf.NodeXL.Core.ByMetadataVertexSorter`1"/> instead.  <see cref="T:Smrf.NodeXL.Core.ByMetadataVertexSorter`1"/> is optimized for this task.
             </para>
            
             </remarks>
            
             <example>
             The following code sorts a graph's vertices using a delegate that sorts by
             vertex name.  The code assumes that every vertex's <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.Name"/> has been set to a non-null value.
            
             <code>
             {
             ...
            
             ByDelegateVertexSorter oByDelegateVertexSorter =
                 new ByDelegateVertexSorter()
            
             oByDelegateVertexSorter.VertexComparer = CompareVerticesByName;
            
             IVertex [] aoSortedVertices = oByDelegateVertexSorter.Sort(oGraph.Vertices);
            
             ...
             }
            
             public Int32
             CompareVerticesByName
             (
                 IVertex vertex1,
                 IVertex vertex2
             )
             {
                 return ( vertex1.Name.CompareTo(vertex2.Name) );
             }
             </code>
            
             </example>
        </member>
        <member name="T:Smrf.NodeXL.Core.VertexSorterBase">
             <summary>
             Base class for vertex sorters.
             </summary>
            
             <remarks>
             This abstract class can serve as a base class for <see cref="T:Smrf.NodeXL.Core.IVertexSorter"/> implementations.  Its implementations of the <see cref="T:Smrf.NodeXL.Core.IVertexSorter"/> public methods provide error checking but defer the
             actual work to protected abstract methods.
             </remarks>
            
             <seealso cref="T:Smrf.NodeXL.Core.Edge"/>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexSorterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.VertexSorterBase"/>
            class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexSorterBase.Sort(System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex})">
             <summary>
             Sorts a collection of vertices.
             </summary>
            
             <param name="vertices">
             Collection to sort.  The collection is not modified.
             </param>
            
             <returns>
             A new, sorted collection.
             </returns>
            
             <remarks>
             This method creates a new collection of references to the vertices in
             <paramref name="vertices" />, sorts the new collection, and returns the
             new collection.  The original <paramref name="vertices" /> collection
             is not modified and no vertices are cloned or created.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexSorterBase.SortCore(Smrf.NodeXL.Core.IVertex[])">
             <summary>
             Sorts an array of vertices in place.
             </summary>
            
             <param name="vertices">
             Array to sort.  The array is sorted in place.
             </param>
            
             <returns>
             Sorted <paramref name="vertices" />.
             </returns>
            
             <remarks>
             This method sorts <paramref name="vertices" /> in place and returns the
             sorted vertices.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.VertexSorterBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.ByDelegateVertexSorter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.ByDelegateVertexSorter"/>
            class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Core.ByDelegateVertexSorter.SortCore(Smrf.NodeXL.Core.IVertex[])">
             <summary>
             Sorts an array of vertices in place.
             </summary>
            
             <param name="vertices">
             Array to sort.  The array is sorted in place.
             </param>
            
             <returns>
             Sorted <paramref name="vertices" />.
             </returns>
            
             <remarks>
             This method sorts <paramref name="vertices" /> in place and returns the
             sorted vertices.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.ByDelegateVertexSorter.CompareVerticesByID(Smrf.NodeXL.Core.IVertex,Smrf.NodeXL.Core.IVertex)">
             <summary>
             Compares two vertices by <see cref="P:Smrf.NodeXL.Core.IIdentityProvider.ID"/>.
             </summary>
            
             <param name="vertex1">
             First vertex to compare.
             </param>
            
             <param name="vertex2">
             Second vertex to compare.
             </param>
            
             <returns>
             See <see cref="M:System.Collections.IComparer.Compare(System.Object,System.Object)"/>.
             </returns>
            
             <remarks>
             This method is used as the default delegate for the <see cref="P:Smrf.NodeXL.Core.ByDelegateVertexSorter.VertexComparer"/> property.  If you use the default delegate and
             call <see cref="M:Smrf.NodeXL.Core.IVertexSorter.Sort(System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex})"/>, the returned array will be
             sorted in order of ascending vertex IDs.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.ByDelegateVertexSorter.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.ByDelegateVertexSorter.m_oVertexComparer">
            Delegate used to compare two vertices.
        </member>
        <member name="P:Smrf.NodeXL.Core.ByDelegateVertexSorter.VertexComparer">
             <summary>
             Gets or sets the delegate used to compare two vertices.
             </summary>
            
             <value>
             A delegate that compares two vertices.  The default value is <see cref="M:Smrf.NodeXL.Core.ByDelegateVertexSorter.CompareVerticesByID(Smrf.NodeXL.Core.IVertex,Smrf.NodeXL.Core.IVertex)"/>, a delegate that sorts vertices by ID.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Core.ByMetadataVertexSorter`1">
             <summary>
             Sorts a collection of vertices on a specified metadata value.
             </summary>
            
             <typeparam name="TValue">
             The type of the values that will be sorted on.
             </typeparam>
            
             <remarks>
             Use this class when you want to sort a collection of vertices on a metadata
             value.  Set the metadata value on each vertex in the collection, then call
             the <see cref="M:Smrf.NodeXL.Core.IVertexSorter.Sort(System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex})"/> method.
            
             <para>
             The <see cref="M:Smrf.NodeXL.Core.IVertexSorter.Sort(System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex})"/> method optimizes sort performance by
             caching the metadata values instead of reading them every time two vertices
             are compared.
             </para>
            
             </remarks>
            
             <example>
             The following code sorts a graph's vertices in ascending order of a
             metadata value named Weight, which is of type Int32.  The code assumes that
             a Weight metadata value has been set on every vertex.
            
             <code>
             ByMetadataVertexSorter oByMetadataVertexSorter =
                 new ByMetadataVertexSorter&lt;Int32&gt;("Weight")
            
             IVertex [] aoSortedVertices = oByMetadataVertexSorter.Sort(oGraph.Vertices);
             </code>
            
             </example>
        </member>
        <member name="M:Smrf.NodeXL.Core.ByMetadataVertexSorter`1.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.ByMetadataVertexSorter`1"/> class.
             </summary>
            
             <param name="sortKey">
             The metadata key whose values should be sorted on.  Can't be null or
             empty.  The key must exist on each vertex and the corresponding value
             must be of type TValue.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.ByMetadataVertexSorter`1.SortCore(Smrf.NodeXL.Core.IVertex[])">
             <summary>
             Sorts an array of vertices in place.
             </summary>
            
             <param name="vertices">
             Array to sort.  The array is sorted in place.
             </param>
            
             <returns>
             Sorted <paramref name="vertices" />.
             </returns>
            
             <remarks>
             This method sorts <paramref name="vertices" /> in place and returns the
             sorted vertices.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.ByMetadataVertexSorter`1.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.ByMetadataVertexSorter`1.m_sSortKey">
            Key whose values should be sorted on.
        </member>
        <member name="F:Smrf.NodeXL.Core.ByMetadataVertexSorter`1.m_bSortAscending">
            true to sort in ascending order, false to sort in descending order.
        </member>
        <member name="P:Smrf.NodeXL.Core.ByMetadataVertexSorter`1.SortKey">
             <summary>
             Gets or sets the key whose values should be sorted on.
             </summary>
            
             <value>
             The metadata key whose values should be sorted on.  Can't be null or
             empty.
             </value>
            
             <remarks>
             The key must exist on each vertex and the corresponding value must be
             of type TValue.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Core.ByMetadataVertexSorter`1.SortAscending">
             <summary>
             Gets or sets a flag specifying whether the sort is ascending or
             descending.
             </summary>
            
             <value>
             true to sort the collection of vertices in ascending order of the
             values specified by <see cref="P:Smrf.NodeXL.Core.ByMetadataVertexSorter`1.SortKey"/>, false to sort the
             collection in descending order.  The default value is true.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Core.ByMetadataVertexSorter`1.ValueComparer">
             <summary>
             Compares two metadata values.
             </summary>
            
             <remarks>
             This is nested within the MetadataSorter class, so its type is
             VertexSorter.Comparer.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Core.ByMetadataVertexSorter`1.ValueComparer.#ctor(System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Core.ByMetadataVertexSorter`1.ValueComparer"/>
             class.
             </summary>
            
             <param name="sortAscending">
             true to sort in ascending order of metadata values, false to sort
             in descending order.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Core.ByMetadataVertexSorter`1.ValueComparer.Compare(`0,`0)">
             <summary>
             Compares two values.
             </summary>
            
             <param name="value1">
             First value to compare.
             </param>
            
             <param name="value2">
             Second value to compare.
             </param>
            
             <returns>
             See <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)"/>.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Core.ByMetadataVertexSorter`1.ValueComparer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Core.ByMetadataVertexSorter`1.ValueComparer.m_bSortAscending">
            true to sort in ascending order, false to sort in descending order.
        </member>
    </members>
</doc>
