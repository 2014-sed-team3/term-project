<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Smrf.NodeXL.Layouts</name>
    </assembly>
    <members>
        <member name="T:Smrf.AppLib.ArgumentChecker">
             <summary>
             Contains methods that check method arguments and property values.
             </summary>
            
             <remarks>
             This can be used by a class that wants to check values passed to its
             property setters and arguments passed to its methods.  The CheckXXX()
             methods in this class throw an exception if a parameter value or method
             argument is invalid.
            
             <para>
             This class is marked internal to avoid compiler error CS0433 ("The
             type ... exists in both ...") when an executable references two or more
             assemblies that use this class.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.#ctor(System.String)">
             <summary>
             Initializes a new instance of the ArgumentChecker class.
             </summary>
            
             <param name="sOwnerClassName">
             Class name of the object that created this object.  The class name gets
             prepended to all exception messages.  Sample: "MyClass".
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotNull(System.String,System.Object)">
             <summary>
             Throws an exception if a property value is null.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotEmpty(System.String,System.String)">
             <summary>
             Throws an exception if a string property value is null or has a length
             of zero.
             </summary>
            
             <param name="sPropertyName">
             Name of the string property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Double)">
             <summary>
             Throws an exception if a Double property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Decimal)">
             <summary>
             Throws an exception if a Decimal property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="decPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotNegative(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is negative.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
            
             <param name="sInvalidValue">
             Invalid value for <paramref name="sPropertyValue" />.  Can't be null.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iInvalidValue">
             Invalid value for <paramref name="iPropertyValue" />.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Int32,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="iMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Single,System.Single,System.Single)">
             <summary>
             Throws an exception if a Single property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="fPropertyValue">
             Property value to check.
             </param>
            
             <param name="fMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="fMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Double,System.Double,System.Double)">
             <summary>
             Throws an exception if a Double property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
            
             <param name="dMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="dMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyIsDefined(System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a property value is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oPropertyValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentNotNull(System.String,System.String,System.Object)">
             <summary>
             Throws an exception if a method argument is null.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentNotEmpty(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string method argument is null or has a length
             of zero.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="sArgumentValue">
             Argument value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Double)">
             <summary>
             Throws an exception if a Double method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="dArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentInRange(System.String,System.String,System.Double,System.Double,System.Double)">
             <summary>
             Throws an exception if a Double method argument is not within a
             specified range.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="dArgumentValue">
             Argument to check.
             </param>
            
             <param name="dMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="dMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentIsDefined(System.String,System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a method argument is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oArgumentValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is an inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Smrf.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is no inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Smrf.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is an inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Smrf.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is no inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Smrf.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.ArgumentChecker.m_sOwnerClassName">
            Class name of the object that created this object.
        </member>
        <member name="T:Smrf.GraphicsLib.GraphicsUtil">
             <summary>
             Set of static methods that perform graphics operations not available
             directly through GDI+.
             </summary>
            
             <remarks>
             Do not try to instantiate an object of this type.  All methods are static.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.#ctor">
             <summary>
             Do not use this contructor.
             </summary>
            
             <remarks>
             All methods on this class are static, so there is no need to create a
             GraphicsUtil object.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.PixelsToPoints(System.Drawing.Graphics,System.Single,System.Single,System.Single@,System.Single@)">
             <summary>
             Converts a height and width from pixels to points.
             </summary>
            
             <param name="oGraphics">
             Object that will do the conversion.
             </param>
            
             <param name="fWidthPx">
             Width in pixels.  Must be greater than or equal to zero.
             </param>
            
             <param name="fHeightPx">
             Height in pixels.  Must be greater than or equal to zero.
             </param>
            
             <param name="fWidthPt">
             Where the width in points gets stored.
             </param>
            
             <param name="fHeightPt">
             Where the height in points gets stored.
             </param>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.PointsToPixels(System.Drawing.Graphics,System.Single,System.Single,System.Single@,System.Single@)">
             <summary>
             Converts a height and width from points to pixels.
             </summary>
            
             <param name="oGraphics">
             Object that will do the conversion.
             </param>
            
             <param name="fWidthPt">
             Width in points.  Must be greater than or equal to zero.
             </param>
            
             <param name="fHeightPt">
             Height in points.  Must be greater than or equal to zero.
             </param>
            
             <param name="fWidthPx">
             Where the width in pixels gets stored.
             </param>
            
             <param name="fHeightPx">
             Where the height in pixels gets stored.
             </param>
            
             <remarks>
             There are two versions of this method.  This version converts to
             floating-point pixels.  The other converts to integer pixels.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.PointsToPixels(System.Drawing.Graphics,System.Single,System.Single,System.Int32@,System.Int32@)">
             <summary>
             Converts a height and width from points to pixels.
             </summary>
            
             <param name="oGraphics">
             Object that will do the conversion.
             </param>
            
             <param name="fWidthPt">
             Width in points.  Must be greater than or equal to zero.
             </param>
            
             <param name="fHeightPt">
             Height in points.  Must be greater than or equal to zero.
             </param>
            
             <param name="iWidthPx">
             Where the width in pixels gets stored.
             </param>
            
             <param name="iHeightPx">
             Where the height in pixels gets stored.
             </param>
            
             <remarks>
             There are two versions of this method.  This version converts to
             integer pixels.  The other converts to floating-point pixels.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.DrawCircle(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)">
             <summary>
             Draws a circle defined by a center point and radius.
             </summary>
            
             <param name="oGraphics">
             Object to draw on.
             </param>
            
             <param name="oPen">
             Pen to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the circle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the circle's center.
             </param>
            
             <param name="fRadius">
             Radius of the circle.
             </param>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.FillCircle(System.Drawing.Graphics,System.Drawing.Brush,System.Single,System.Single,System.Single)">
             <summary>
             Fills the interior of a circle defined by a center point and radius.
             </summary>
            
             <param name="oGraphics">
             Object to draw on.
             </param>
            
             <param name="oBrush">
             Brush to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the circle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the circle's center.
             </param>
            
             <param name="fRadius">
             Radius of the circle.
             </param>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.FillCircle3D(System.Drawing.Graphics,System.Drawing.Color,System.Single,System.Single,System.Single)">
             <summary>
             Fills the interior of a circle defined by a center point and radius
             using 3-D shading.
             </summary>
            
             <param name="oGraphics">
             Object to draw on.
             </param>
            
             <param name="oColor">
             Color to use.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the circle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the circle's center.
             </param>
            
             <param name="fRadius">
             Radius of the circle.  Must be greater than zero.
             </param>
            
             <remarks>
             The circle is shaded to make it look as if it's a 3-D sphere.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.DrawSquare(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)">
             <summary>
             Draws a square defined by a center point and half-width.
             </summary>
            
             <param name="oGraphics">
             Object to draw on.
             </param>
            
             <param name="oPen">
             Pen to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the square's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the square's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the square.
             </param>
            
             <remarks>
             The square is specified as a center point and half-width to make this
             method compatible with <see cref="M:Smrf.GraphicsLib.GraphicsUtil.DrawCircle(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)"/>.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.FillSquare(System.Drawing.Graphics,System.Drawing.Brush,System.Single,System.Single,System.Single)">
             <summary>
             Fills the interior of a square defined by a center point and
             half-width.
             </summary>
            
             <param name="oGraphics">
             Object to draw on.
             </param>
            
             <param name="oBrush">
             Brush to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the square's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the square's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the square.
             </param>
            
             <remarks>
             The square is specified as a center point and half-width to make this
             method compatible with <see cref="M:Smrf.GraphicsLib.GraphicsUtil.FillCircle(System.Drawing.Graphics,System.Drawing.Brush,System.Single,System.Single,System.Single)"/>.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.FillSquare3D(System.Drawing.Graphics,System.Drawing.Color,System.Single,System.Single,System.Single)">
             <summary>
             Fills the interior of a square using 3-D shading.
             </summary>
            
             <param name="oGraphics">
             Object to draw on.
             </param>
            
             <param name="oColor">
             Color to use.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the square's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the square's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the square.
             </param>
            
             <remarks>
             The square is shaded to make it look as if it's 3-D.
            
             <para>
             The square is specified as a center point and half-width to make this
             method compatible with <see cref="M:Smrf.GraphicsLib.GraphicsUtil.FillCircle(System.Drawing.Graphics,System.Drawing.Brush,System.Single,System.Single,System.Single)"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.DrawDiamond(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)">
             <summary>
             Draws a diamond defined by a center point and half-width.
             </summary>
            
             <param name="oGraphics">
             Object to draw on.
             </param>
            
             <param name="oPen">
             Pen to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the diamond's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the diamond's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the diamond.
             </param>
            
             <remarks>
             The diamond is specified as a center point and half-width to make this
             method compatible with <see cref="M:Smrf.GraphicsLib.GraphicsUtil.DrawCircle(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)"/>.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.FillDiamond(System.Drawing.Graphics,System.Drawing.Brush,System.Single,System.Single,System.Single)">
             <summary>
             Fills a diamond defined by a center point and half-width.
             </summary>
            
             <param name="oGraphics">
             Object to draw on.
             </param>
            
             <param name="oBrush">
             Brush to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the diamond's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the diamond's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the diamond.
             </param>
            
             <remarks>
             The diamond is specified as a center point and half-width to make this
             method compatible with <see cref="M:Smrf.GraphicsLib.GraphicsUtil.DrawCircle(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)"/>.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.DrawTriangle(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)">
             <summary>
             Draws an equilateral triangle defined by a center point and half-width.
             </summary>
            
             <param name="oGraphics">
             Object to draw on.
             </param>
            
             <param name="oPen">
             Pen to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the triangle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the triangle's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the square that bounds the triangle.
             </param>
            
             <remarks>
             The triangle is specified as a center point and half-width to make this
             method compatible with <see cref="M:Smrf.GraphicsLib.GraphicsUtil.DrawCircle(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)"/>.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.FillTriangle(System.Drawing.Graphics,System.Drawing.Brush,System.Single,System.Single,System.Single)">
             <summary>
             Fills an equilateral triangle defined by a center point and half-width.
             </summary>
            
             <param name="oGraphics">
             Object to draw on.
             </param>
            
             <param name="oBrush">
             Brush to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the triangle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the triangle's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the square that bounds the triangle.
             </param>
            
             <remarks>
             The triangle is specified as a center point and half-width to make this
             method compatible with <see cref="M:Smrf.GraphicsLib.GraphicsUtil.DrawCircle(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)"/>.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.Draw3DHorizontalLine(System.Drawing.Graphics,System.Single,System.Single,System.Single)">
             <summary>
             Draws a 3-dimensional horizontal line.
             </summary>
            
             <param name="oGraphics">
             Objects to draw with.
             </param>
            
             <param name="fLeft">
             x-coordinate of the left end of the line.
             </param>
            
             <param name="fTop">
             y-coordinate of the left end of the line.
             </param>
            
             <param name="fRight">
             x-coordinate of the right end of the line.
             </param>
            
             <returns>
             The height of the line.
             </returns>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.Clear(System.Drawing.Graphics,System.Drawing.Color)">
             <summary>
             Clears the entire drawing surface and fills it with the specified
             background color.
             </summary>
            
             <param name="oGraphics">
             Object to draw on.
             </param>
            
             <param name="oColor">
             <see cref="T:System.Drawing.Color"/> structure that represents the background color of
             the drawing surface. 
             </param>
            
             <remarks>
             This adds a GDI bug workaround to <see cref="M:System.Drawing.Graphics.Clear(System.Drawing.Color)"/>.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.CreateRoundedRectangleGraphicsPath(System.Drawing.Rectangle,System.Int32)">
             <summary>
             Creates a GraphicsPath that describes a rectangle with rounded corners.
             </summary>
            
             <param name="oRectangle">
             Rectangle to add rounded corners to.
             </param>
            
             <param name="iCornerRadius">
             Radius of the rectangle's corners.
             </param>
            
             <returns>
             A new GraphicsPath.
             </returns>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.FillTextRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
             <summary>
             Fills the interior of a rectangle that will contain text.
             </summary>
            
             <param name="oGraphics">
             Object to draw on.
             </param>
            
             <param name="oRectangle">
             Rectangle to draw on.  If empty, this method does nothing.
             </param>
            
             <param name="bTextIsSelected">
             true if the text is selected.
             </param>
            
             <remarks>
             This method fills the interior of a rectangle with either the system
             window or system highlight color, depending on whether the text is
             selected.  Call this method before you draw the text.  When you draw
             the text, use SystemBrushes.HighlightText or SystemBrushes.WindowText
             as the text color.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.RadiusToArea(System.Double)">
             <summary>
             Returns the area of a circle given its radius.
             </summary>
            
             <param name="dRadius">
             The circle's radius.
             </param>
            
             <returns>
             The circle's area.
             </returns>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.AreaToRadius(System.Double)">
             <summary>
             Returns the radius of a circle given its area.
             </summary>
            
             <param name="dArea">
             The circle's area.
             </param>
            
             <returns>
             The circle's radius.
             </returns>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.SquareFromCenterAndHalfWidth(System.Single,System.Single,System.Single)">
             <summary>
             Returns a square given a center point and half-width.
             </summary>
            
             <param name="fXCenter">
             x-coordinate of the square's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the square's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the square.
             </param>
            
             <returns>
             The specified square.
             </returns>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.DiamondFromCenterAndHalfWidth(System.Single,System.Single,System.Single)">
             <summary>
             Returns an array of points that define a diamond given a center point
             and half-width.
             </summary>
            
             <param name="fXCenter">
             x-coordinate of the diamond's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the diamond's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the diamond.
             </param>
            
             <returns>
             The specified diamond.
             </returns>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.GetDiamondEdgeMidpoints(System.Single,System.Single,System.Single)">
             <summary>
             Returns an array of points on the midpoints of a diamond's edges given
             a center point and half-width.
             </summary>
            
             <param name="fXCenter">
             x-coordinate of the diamond's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the diamond's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the diamond.
             </param>
            
             <returns>
             The midpoints of the specified diamond.
             </returns>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.TriangleFromCenterAndHalfWidth(System.Single,System.Single,System.Single)">
             <summary>
             Returns an array of points that define an equilateral triangle given a
             center point and half-width.
             </summary>
            
             <param name="fXCenter">
             x-coordinate of the triangle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the triangle's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the square that bounds the triangle.
             </param>
            
             <returns>
             The specified triangle.  The order of the points is top, lower-right,
             lower-left.
             </returns>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.GetTriangleEdgeMidpoints(System.Single,System.Single,System.Single)">
             <summary>
             Returns an array of points on the midpoints of an equilateral
             triangle's edges given a center point and half-width.
             </summary>
            
             <param name="fXCenter">
             x-coordinate of the triangle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the triangle's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the square that bounds the triangle.
             </param>
            
             <returns>
             The midpoints of the specified triangle.
             </returns>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.RectangleFToRectangle(System.Drawing.RectangleF,System.Int32)">
             <summary>
             Converts a RectangleF to a Rectangle.
             </summary>
            
             <param name="oRectangle">
             Rectangle to convert.
             </param>
             
             <param name="iPenWidthPx">
             Width of the pen that will be used to draw the rectangle.
             </param>
            
             <returns>
             Converted rectangle.
             </returns>
            
             <remarks>
             This method converts a floating-point RectangleF to an integer
             Rectangle, compensating for some GDI oddities in the process.
            
             <para>
             If precise rectangle drawing is required, the caller should convert
             all RectangleF objects to Rectangles using this method, then use the
             Graphics.DrawRectangle(Pen, Rectangle) method to draw them.  The
             floating-point version of Graphics.DrawRectangle() should not be used.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.LineSegmentsIntersect(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
             <summary>
             Determines whether two line segments intersect.
             </summary>
            
             <param name="endpointA1">
             The first endpoint on the first line segment.
             </param>
             
             <param name="endpointA2">
             The second endpoint on the first line segment.
             </param>
             
             <param name="endpointB1">
             The first endpoint on the second line segment.
             </param>
             
             <param name="endpointB2">
             The second endpoint on the second line segment.
             </param>
             
             <returns>
             true if the two line segments intersect.
             </returns>
            
             <remarks>
             If the two line segments are coincident (parallel with overlap), true
             is returned.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.SaveHighQualityImage(System.Drawing.Image,System.String,System.Drawing.Imaging.ImageFormat)">
             <summary>
             Saves an Image object to a specified file in a specified format using
             high quality settings.
             </summary>
            
             <param name="oImage">
             Image to save.
             </param>
             
             <param name="sFileName">
             Full path of the file to save to.
             </param>
            
             <param name="eImageFormat">
             File format.
             </param>
            
             <remarks>
             Use this instead of Image.Save(filename, format) if you want a high-
             quality image.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.SaveJpegImage(System.Drawing.Image,System.String,System.Int32)">
             <summary>
             Saves an image to a JPEG file with a specified quality level.
             </summary>
            
             <param name="oImage">
             Image to save.
             </param>
             
             <param name="sFileName">
             Full path of the file to save to.
             </param>
            
             <param name="iQuality">
             Quality level to use.  I THINK this can be from 1 to 100; the
             documentation is not clear.
             </param>
            
             <remarks>
             Image.Save(..., ImageFormat.Jpeg) uses a low quality by default.  This
             method allows the quality to be specified.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.DrawErrorStringOnGraphics(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
             <summary>
             Draws an error string on a Graphics object.
             </summary>
            
             <param name="oGraphics">
             Object to draw on.
             </param>
            
             <param name="oRectangle">
             Rectangle to draw on.
             </param>
            
             <param name="sString">
             String to draw.
             </param>
            
             <remarks>
             This can be used to draw error strings on bitmaps in a uniform manner.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.GetImageCodecInfoForMimeType(System.String)">
             <summary>
             Gets the ImageCodecInfo object for a specified MIME type.
             </summary>
            
             <param name="sMimeType">
             MIME type.
             </param>
            
             <remarks>
             An exception is thrown if the requested object isn't found.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.ConvertPixelsAndPoints(System.Boolean,System.Drawing.Graphics,System.Single,System.Single,System.Single@,System.Single@)">
             <summary>
             Converts a height and width from pixels to points, or vice versa.
             </summary>
            
             <param name="bPixelsToPoints">
             true to convert pixels to points, false to convert points to pixels.
             </param>
            
             <param name="oGraphics">
             Object that will do the conversion.
             </param>
            
             <param name="fWidthIn">
             Input width.  Must be greater than or equal to zero.
             </param>
            
             <param name="fHeightIn">
             Input height.  Must be greater than or equal to zero.
             </param>
            
             <param name="fWidthOut">
             Where the converted width gets stored.
             </param>
            
             <param name="fHeightOut">
             Where the converted height gets stored.
             </param>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.DisposePen(System.Drawing.Pen@)">
             <summary>
             Disposes of a pen.
             </summary>
            
             <param name="oPen">
             Pen to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oPen" /> isn't null, this method calls the Dispose
             method on <paramref name="oPen" />, then sets it to null.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.DisposeSolidBrush(System.Drawing.SolidBrush@)">
             <summary>
             Disposes of a solid brush.
             </summary>
            
             <param name="oSolidBrush">
             SolidBrush to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oSolidBrush" /> isn't null, this method calls the
             Dispose method on <paramref name="oSolidBrush" />, then sets it to
             null.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.DisposeBrush(System.Drawing.Brush@)">
             <summary>
             Disposes of a brush.
             </summary>
            
             <param name="oBrush">
             Brush to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oBrush" /> isn't null, this method calls the Dispose
             method on <paramref name="oBrush" />, then sets it to null.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.DisposeGraphics(System.Drawing.Graphics@)">
             <summary>
             Disposes of a Graphics object.
             </summary>
            
             <param name="oGraphics">
             Graphics object to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oGraphics" /> isn't null, this method calls the
             Dispose method on <paramref name="oGraphics" />, then sets it to null.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.DisposeGraphicsPath(System.Drawing.Drawing2D.GraphicsPath@)">
             <summary>
             Disposes of a GraphicsPath object.
             </summary>
            
             <param name="oGraphicsPath">
             GraphicsPath object to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oGraphicsPath" /> isn't null, this method calls the
             Dispose method on <paramref name="oGraphicsPath" />, then sets it to
             null.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.DisposeBitmap(System.Drawing.Bitmap@)">
             <summary>
             Disposes of a Bitmap object.
             </summary>
            
             <param name="oBitmap">
             Bitmap object to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oBitmap" /> isn't null, this method calls the
             Dispose method on <paramref name="oBitmap" />, then sets it to null.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.MoveRectangleWithinBounds(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Boolean)">
             <summary>
             Moves a rectangle so it is contained within an outer bounding
             rectangle.
             </summary>
            
             <param name="rectangle">
             The rectangle that needs to be contained within <paramref
             name="boundingRectangle" />.
             </param>
            
             <param name="boundingRectangle">
             The rectangle that <paramref name="rectangle" /> needs to be contained
             within.
             </param>
            
             <param name="resizeRectangleIfNecessary">
             If this is true and moving <paramref name="rectangle" /> isn't enough
             to contain it within <paramref name="boundingRectangle" />, <paramref
             name="rectangle" /> is resized to force it to be contained.  If this is
             false, any excess is left hanging over the right and bottom edges of
             <paramref name="boundingRectangle" />.
             </param>
            
             <returns>
             A copy of <paramref name="rectangle" /> that is contained within
             <paramref name="boundingRectangle" />.
             </returns>
        </member>
        <member name="M:Smrf.GraphicsLib.GraphicsUtil.DistanceBetweenTwoPointFs(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Computes the distance between two points
            </summary>
            
            <param name="point1">
            The first point
            </param>
            
            <param name="point2">
            The second point
            </param>
            
            <returns>
            The distance between the two points
            </returns>
        </member>
        <member name="T:Smrf.AppLib.SinglePolarCoordinates">
             <summary>
             Represents a point specified in polar coordinates, using a Single for the
             <see cref="P:Smrf.AppLib.PolarCoordinates`2.R"/> and <see cref="P:Smrf.AppLib.PolarCoordinates`2.Angle"/> properties.
             </summary>
            
             <remarks>
             An instance of this class specifies a point in polar coordinates using a
             distance from the origin <see cref="P:Smrf.AppLib.PolarCoordinates`2.R"/>, and
             an angle <see cref="P:Smrf.AppLib.PolarCoordinates`2.Angle"/>.  The units and
             limits are defined by the application, not by this class.
             </remarks>
        </member>
        <member name="T:Smrf.AppLib.PolarCoordinates`2">
             <summary>
             Represents a point specified in polar coordinates.
             </summary>
            
             <typeparam name="TR">
             Type of the <see cref="P:Smrf.AppLib.PolarCoordinates`2.R"/> property.
             </typeparam>
            
             <typeparam name="TAngle">
             Type of the <see cref="P:Smrf.AppLib.PolarCoordinates`2.Angle"/> property.
             </typeparam>
            
             <remarks>
             An instance of this class specifies a point in polar coordinates using a
             distance from the origin <see cref="P:Smrf.AppLib.PolarCoordinates`2.R"/>, and an angle <see cref="P:Smrf.AppLib.PolarCoordinates`2.Angle"/>.  The coordinate types, units, and limits are defined by
             the application, not by this class.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.PolarCoordinates`2.#ctor">
             <overloads>
             Initializes a new instance of the <see cref="T:Smrf.AppLib.PolarCoordinates`2"/> class.
             </overloads>
            
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.AppLib.PolarCoordinates`2"/> class using default coordinates.
             </summary>
            
             <remarks>
             The coordinates are set to the default values for TR and TAngle.
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.PolarCoordinates`2.#ctor(`0,`1)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.AppLib.PolarCoordinates`2"/> class using specified
             coordinates.
             </summary>
            
             <param name="r">
             The distance of the point from the origin.
             </param>
            
             <param name="angle">
             The angle of the point, in a counterclockwise rotation from the
             positive x-axis.
             </param>
        </member>
        <member name="M:Smrf.AppLib.PolarCoordinates`2.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.PolarCoordinates`2.m_oR">
            The distance of the point from the origin.
        </member>
        <member name="F:Smrf.AppLib.PolarCoordinates`2.m_oAngle">
            The angle of the point, in a counterclockwise rotation from the
            positive x-axis.
        </member>
        <member name="P:Smrf.AppLib.PolarCoordinates`2.R">
             <summary>
             Gets or sets the distance of the point from the origin.
             </summary>
            
             <value>
             The distance of the point from the origin.  The units and limits are
             defined by the application, not by this class.
             </value>
        </member>
        <member name="P:Smrf.AppLib.PolarCoordinates`2.Angle">
             <summary>
             Gets or sets the angle of the point.
             </summary>
            
             <value>
             The angle of the point, in a counterclockwise rotation from the
             positive x-axis.  The units and limits are defined by the application,
             not by this class.
             </value>
        </member>
        <member name="M:Smrf.AppLib.SinglePolarCoordinates.#ctor(System.Single,System.Single)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.AppLib.SinglePolarCoordinates"/>
             class using specified coordinates.
             </summary>
            
             <param name="r">
             The distance of the point from the origin.
             </param>
            
             <param name="angle">
             The angle of the point, in a counterclockwise rotation from the
             positive x-axis.
             </param>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.ILayout">
             <summary>
             Supports laying out a graph within a rectangle.
             </summary>
            
             <remarks>
             A class that implements this interface is responsible for laying out a
             graph within a specified rectangle by setting the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on all of the graph's vertices, and
             optionally adding geometry metadata to the graph, vertices, or edges.
             Laying out a graph is the first step in drawing it.
             </remarks>
            
             <para>
             The interface has both synchronous (<see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>) and
             asynchronous (<see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraphAsync(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>) methods for laying out a
             graph.
             </para>
            
             <para>
             The asynchronous semantics follow the guidelines outlined in the article
             "Multithreaded Programming with the Event-based Asynchronous Pattern" in
             the .NET Framework Developer's Guide.  <see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraphAsync(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>
             starts the layout on a worker thread and returns immediately.  The <see cref="E:Smrf.NodeXL.Layouts.ILayout.LayOutGraphCompleted"/> event fires when the layout is complete, an
             error occurs, or the layout is cancelled.  <see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraphAsyncCancel"/> cancels the layout.
             </para>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)">
             <summary>
             Lays out a graph synchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> by setting the
             <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on all of the graph's
             vertices, and optionally adding geometry metadata to the graph,
             vertices, or edges.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraphAsync(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)">
             <summary>
             Lays out a graph asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <remarks>
             This method asynchronously lays out the graph <paramref name="graph"/>.  It returns immediately.  A worker thread sets the
             <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on all of the graph's
             vertices, and optionally adds geometry metadata to the graph, vertices,
             or edges.
            
             <para>
             The <see cref="E:Smrf.NodeXL.Layouts.ILayout.LayOutGraphCompleted"/> event fires when the layout is
             complete, an error occurs, or the layout is cancelled.  <see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraphAsyncCancel"/> cancels the layout.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraphAsyncCancel">
             <summary>
             Cancels the layout started by <see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraphAsync(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>.
             </summary>
            
             <remarks>
             The layout may or may not cancel, but the <see cref="E:Smrf.NodeXL.Layouts.ILayout.LayOutGraphCompleted"/> event is guaranteed to fire.  The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> object passed to the event handler
             contains a <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/> property
             that indicates whether the cancellation occurred.
            
             <para>
             If a layout is not in progress, this method does nothing.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.ILayout.TransformLayout(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext,Smrf.NodeXL.Layouts.LayoutContext)">
             <summary>
             Transforms a graph's current layout.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Smrf.NodeXL.Layouts.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to the new graph rectangle.
             </param>
            
             <remarks>
             After a graph has been laid out by <see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>, this
             method can be used to transform the graph's layout from one rectangle
             to another.  <paramref name="originalLayoutContext"/> contains the
             original graph rectangle, and <paramref name="newLayoutContext"/>
             contains the new graph rectangle.  The implementation should transform
             all the graph's vertex locations from the original rectangle to the new
             one.  If <see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/> added geometry metadata to the
             graph, the implementation should also transform that metadata.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.ILayout.OnVertexMove(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Processes a vertex that was moved after the graph was laid out.
             </summary>
            
             <param name="vertex">
             The vertex that was moved.
             </param>
            
             <remarks>
             An application may allow the user to move a vertex after the graph has
             been laid out by <see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>.  This method is called
             after the application has changed the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/>
             property on <paramref name="vertex"/>.  If <see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>
             added geometry metadata to the graph, vertices, or edges, <see cref="M:Smrf.NodeXL.Layouts.ILayout.OnVertexMove(Smrf.NodeXL.Core.IVertex)"/> should modify the metadata if necessary.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.ILayout.Margin">
             <summary>
             Gets or sets the margin to subtract from each edge of the graph
             rectangle before laying out the graph.
             </summary>
            
             <value>
             The margin to subtract from each edge.  Must be greater than or equal
             to zero.  The units are determined by the <see cref="T:System.Drawing.Graphics"/>
             object used to draw the graph.  The default value is 0.
             </value>
            
             <remarks>
             If the graph rectangle passed to <see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/> is {L=0,
             T=0, R=50, B=30} and the <see cref="P:Smrf.NodeXL.Layouts.ILayout.Margin"/> is 5, for example, then
             the graph is laid out within the rectangle {L=5, T=5, R=45, B=25}.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.ILayout.LayoutStyle">
             <summary>
             Gets or sets the style to use when laying out the graph.
             </summary>
            
             <value>
             The style to use when laying out the graph.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.ILayout.BoxLayoutAlgorithm">
             <summary>
             Gets or sets the box layout algorithm to use when laying out the graph.
             </summary>
            
             <value>
             The box layout algorithm to use when laying out the graph.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.ILayout.SupportsOutOfBoundsVertices">
             <summary>
             Gets a flag indicating whether vertices laid out by the class can fall
             outside the graph bounds.
             </summary>
            
             <value>
             true if the vertices can fall outside the graph bounds.
             </value>
            
             <remarks>
             If true, the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> of the laid-out vertices
             may be within the graph rectangle's margin or outside the graph
             rectangle.  If false, the vertex locations are always within the
             margin.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.ILayout.GroupRectanglePenWidth">
             <summary>
             Gets or sets the width of the pen used to draw group rectangles.
             </summary>
            
             <value>
             The width of the pen used to draw group rectangles.  Must be greater
             than or equal to 0.  If 0, group rectangles aren't drawn.
             </value>
            
             <remarks>
             This property is ignored if <see cref="P:Smrf.NodeXL.Layouts.ILayout.LayoutStyle"/> is not <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.ILayout.IntergroupEdgeStyle">
             <summary>
             Gets or sets a value that specifies how the edges that connect vertices
             in different groups should be shown.
             </summary>
            
             <value>
             An <see cref="T:Smrf.NodeXL.Layouts.IntergroupEdgeStyle"/> value.
             </value>
            
             <remarks>
             This property is ignored if <see cref="P:Smrf.NodeXL.Layouts.ILayout.LayoutStyle"/> is not <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.ILayout.ImproveLayoutOfGroups">
             <summary>
             Gets or sets a flag indicating whether the layout should attempt to
             improve the appearance of groups.
             </summary>
            
             <value>
             true to attempt to improve the appearance of groups.
             </value>
            
             <remarks>
             This property is ignored if <see cref="P:Smrf.NodeXL.Layouts.ILayout.LayoutStyle"/> is not <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.ILayout.SupportsBinning">
             <summary>
             Gets a flag indicating whether binning can be used when the entire
             graph is laid out.
             </summary>
            
             <value>
             true if binning can be used.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.ILayout.MaximumVerticesPerBin">
             <summary>
             Gets or sets the maximum number of vertices a binned component can
             have.
             </summary>
            
             <value>
             The maximum number of vertices a binned component can have.
             </value>
            
             <remarks>
             If <see cref="P:Smrf.NodeXL.Layouts.ILayout.LayoutStyle"/> is <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.UseBinning"/> and a
             strongly connected component of the graph has <see cref="P:Smrf.NodeXL.Layouts.ILayout.MaximumVerticesPerBin"/> vertices or fewer, the component is
             placed in a bin.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.ILayout.BinLength">
             <summary>
             Gets or sets the height and width of each bin, in graph rectangle
             units.
             </summary>
            
             <value>
             The height and width of each bin, in graph rectangle units.
             </value>
            
             <remarks>
             This property is ignored if <see cref="P:Smrf.NodeXL.Layouts.ILayout.LayoutStyle"/> is not <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.UseBinning"/>.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.ILayout.IsBusy">
             <summary>
             Gets a value indicating whether an asynchronous operation is in
             progress.
             </summary>
            
             <value>
             true if an asynchronous operation is in progress.
             </value>
        </member>
        <member name="E:Smrf.NodeXL.Layouts.ILayout.LayOutGraphCompleted">
             <summary>
             Occurs when a layout started by <see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraphAsync(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>
             completes, is cancelled, or ends with an error.
             </summary>
            
             <remarks>
             The event fires on the thread on which <see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraphAsync(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>
             was called.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.CircleLayout">
             <summary>
             Lays out a graph by placing the vertices on a circle.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on a circle whose diameter is the
             smaller of the rectangle's dimensions.
            
             <para>
             If the graph has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Smrf.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.SortableLayoutBase">
             <summary>
             Base class for layouts that support vertex sorting and selective layout.
             </summary>
            
             <remarks>
             This is the base class for several layouts that support vertex sorting and
             the layout of a subset of the graph's vertices.  The derived class must
             implement the <see cref="M:Smrf.NodeXL.Layouts.SortableLayoutBase.LayOutGraphCoreSorted(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)"/> abstract method.
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Smrf.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will sort them.
             </para>
            
             <para>
             If the graph has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.LayoutBase">
             <summary>
             Base class for layouts.
             </summary>
            
             <remarks>
             This abstract class can serve as a base class for <see cref="T:Smrf.NodeXL.Layouts.ILayout"/> implementations.  Its implementations of the <see cref="T:Smrf.NodeXL.Layouts.ILayout"/> public methods provide error checking but defer the
             actual work to protected abstract methods.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.LayoutsBase">
            <summary>
            Base class for most classes in the <see cref="N:Smrf.NodeXL.Layouts"/>
            namespace.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutsBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.Layouts.LayoutsBase"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutsBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.LayoutsBase.ArgumentChecker">
             <summary>
             Gets a new initialized <see cref="P:Smrf.NodeXL.Layouts.LayoutsBase.ArgumentChecker"/> object.
             </summary>
            
             <value>
             A new initialized <see cref="P:Smrf.NodeXL.Layouts.LayoutsBase.ArgumentChecker"/> object.
             </value>
            
             <remarks>
             The returned object can be used to check the validity of property
             values and method parameters.
            
             <para>
             The <see cref="T:Smrf.NodeXL.Core.NodeXLBase"/> implementation of this property cannot be
             used because it's marked as internal.  The reason it's internal is
             explained in the comments for the <see cref="P:Smrf.NodeXL.Layouts.LayoutsBase.ArgumentChecker"/> class.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.#ctor">
            <summary>
            Initializes a new instance of the LayoutBase class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)">
             <summary>
             Lays out a graph synchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> by setting the
             <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on all of the graph's
             vertices, and optionally adding geometry metadata to the graph,
             vertices, or edges.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphAsync(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)">
             <summary>
             Lays out a graph asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <remarks>
             This method asynchronously lays out the graph <paramref name="graph"/>
             by setting the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on all of the
             graph's vertices, and optionally adding geometry metadata to the graph,
             vertices, or edges.  It starts a worker thread and then returns
             immediately.
            
             <para>
             The <see cref="E:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphCompleted"/> event fires when the layout is
             complete, an error occurs, or the layout is cancelled.  <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphAsyncCancel"/> cancels the layout.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphAsyncCancel">
             <summary>
             Cancels the layout started by <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphAsync(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>.
             </summary>
            
             <remarks>
             The layout may or may not cancel, but the <see cref="E:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphCompleted"/> event is guaranteed to fire.  The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> object passed to the event handler
             contains a <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/> property
             that indicates whether the cancellation occurred.
            
             <para>
             If a layout is not in progress, this method does nothing.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.TransformLayout(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext,Smrf.NodeXL.Layouts.LayoutContext)">
             <summary>
             Transforms a graph's current layout.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Smrf.NodeXL.Layouts.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to the new graph rectangle.
             </param>
            
             <remarks>
             After a graph has been laid out by <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>, this
             method can be used to transform the graph's layout from the original
             graph rectangle to another.  <paramref name="originalLayoutContext"/>
             contains the original graph rectangle, and <paramref name="newLayoutContext"/> contains the new graph rectangle.  This
             method transforms all the graph's vertex locations from the original
             rectangle to the new one.  If <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/> added geometry
             metadata to the graph, this method also transforms that metadata.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.OnVertexMove(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Processes a vertex that was moved after the graph was laid out.
             </summary>
            
             <param name="vertex">
             The vertex that was moved.
             </param>
            
             <remarks>
             An application may allow the user to move a vertex after the graph has
             been laid out by <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>.  This method is called
             after the application has changed the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/>
             property on <paramref name="vertex"/>.  If <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>
             added geometry metadata to the graph, vertices, or edges, <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.OnVertexMove(Smrf.NodeXL.Core.IVertex)"/> should modify the metadata if necessary.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphCore(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.GetAdjustedLayoutContext(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext,Smrf.NodeXL.Layouts.LayoutContext@)">
             <summary>
             Gets an adjusted layout context object to use when laying out the
             graph.
             </summary>
            
             <param name="oGraph">
             The graph being laid out.
             </param>
            
             <param name="oOriginalLayoutContext">
             The original layout context passed to the layout method.
             </param>
            
             <param name="oAdjustedLayoutContext">
             If true is returned, this gets set to a copy of <paramref name="oOriginalLayoutContext"/> that has been adjusted.
             </param>
            
             <returns>
             true if the graph can be laid out, false if it can't be.
             </returns>
            
             <remarks>
             This method adjusts the graph rectangle stored in <paramref name="oOriginalLayoutContext"/> according to the <see cref="P:Smrf.NodeXL.Layouts.LayoutBase.Margin"/> setting and the presence of a <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesWithinBounds"/> key on
             the graph.  If subtracting the margin results in a non-positive width
             or height, false is returned.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.GetRectangleCenterAndHalfSize(System.Drawing.Rectangle,System.Double@,System.Double@,System.Double@)">
             <summary>
             Gets the center of a rectangle and the minimum of half its width and
             half its height.
             </summary>
            
             <param name="rectangle">
             The rectangle to use.
             </param>
            
             <param name="centerX">
             The x-coordinate of the center of <paramref name="rectangle" />.
             </param>
            
             <param name="centerY">
             The y-coordinate of the center of <paramref name="rectangle" />.
             </param>
            
             <param name="halfSize">
             If the width of <paramref name="rectangle" /> is less than its height,
             half the width gets stored here.  Otherwise, half the height gets
             stored here.
             </param>
            
             <remarks>
             This method can be used by layouts that are centered and symetrical.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.GetVerticesToLayOut(Smrf.NodeXL.Core.IGraph)">
             <summary>
             Gets the vertices to lay out.
             </summary>
            
             <param name="graph">
             Graph that is being laid out.
             </param>
            
             <returns>
             The vertices to lay out.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.GetEdgesToLayOut(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex})">
             <summary>
             Gets the edges to lay out.
             </summary>
            
             <param name="graph">
             Graph that is being laid out.
             </param>
            
             <param name="verticesToLayOut">
             The vertices being laid out.
             </param>
            
             <returns>
             The edges to lay out.
             </returns>
            
             <remarks>
             If the derived class needs a list of the edges that connect only those
             vertices being laid out, it should use this method to get the list.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.RandomizeVertexLocations(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)">
             <overloads>
             Randomly distributes the vertex locations in a graph.
             </overloads>
            
             <summary>
             Randomly distributes the vertex locations in a graph using a
             time-dependent default seed value.
             </summary>
            
             <param name="graph">
             Graph whose vertices need to be randomized.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> must have non-zero width and
             height.
             </param>
            
             <remarks>
             If a vertex has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with the value true,
             its location is left unmodified.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.RandomizeVertexLocations(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext,System.Int32)">
             <summary>
             Randomly distributes the vertex locations in a graph using a specified
             seed value.
             </summary>
            
             <param name="graph">
             Graph whose vertices need to be randomized.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> must have non-zero width and
             height.
             </param>
            
             <param name="seed">
             A number used to calculate a starting value for the pseudo-random
             number sequence. If a negative number is specified, the absolute value
             of the number is used. 
             </param>
            
             <remarks>
             If a vertex has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with the value true,
             its location is left unmodified.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.RandomizeVertexLocations(System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.Random)">
             <summary>
             Randomly distributes the vertex locations in a graph using a specified
             random number generator.
             </summary>
            
             <param name="vertices">
             Vertices that need to be randomized.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> must have non-zero width and
             height.
             </param>
            
             <param name="random">
             Random number generator.
             </param>
            
             <remarks>
             If a vertex has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with the value true,
             its location is left unmodified.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.VertexIsLocked(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Returns a flag indicating whether the vertex is locked.
             </summary>
            
             <param name="oVertex">
             The vertex to check.
             </param>
            
             <returns>
             true if the vertex is locked.
             </returns>
            
             <remarks>
             A locked vertex's location should not be modified by the layout,
             although the vertex may be included in layout calculations.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.TransformLayoutCore(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext,Smrf.NodeXL.Layouts.LayoutContext)">
             <summary>
             Transforms a graph's current layout.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Smrf.NodeXL.Layouts.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to objects needed to transform the graph's layout.
             </param>
            
             <remarks>
             After a graph has been laid out by <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>, this
             method may get called to transform the graph's layout from one rectangle
             to another.  <paramref name="originalLayoutContext"/> contains the
             original graph rectangle, and <paramref name="newLayoutContext"/>
             contains the new graph rectangle.  This base-class implementation
             transforms all the graph's vertex locations from the original rectangle
             to the new one.  If the derived <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphCore(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)"/>
             implementation added geometry metadata to the graph, the derived class
             should override this method, transform the geometry metadata, and call
             this base-class implementation to transform the graph's vertex
             locations.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.TransformIntermediateCurvePoints(Smrf.NodeXL.Core.IGraph,System.Drawing.Drawing2D.Matrix)">
             <summary>
             Transforms the intermediate curve points stored on a graph's edges.
             </summary>
            
             <param name="oGraph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="oTransformationMatrix">
             The matrix to use for the transformation.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.OnVertexMoveCore(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Processes a vertex that was moved after the graph was laid out.
             </summary>
            
             <param name="vertex">
             The vertex that was moved.
             </param>
            
             <remarks>
             An application may allow the user to move a vertex after the graph has
             been laid out by <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphCore(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)"/>.  This method is called
             after the application has changed the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/>
             property on <paramref name="vertex"/>.  If <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphCore(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)"/> added geometry metadata to the graph,
             vertices, or edges, <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.OnVertexMoveCore(Smrf.NodeXL.Core.IVertex)"/> should modify the
             metadata if necessary.
            
             <para>
             This base-class implementation does nothing.
             </para>
            
             <para>
             The argument has already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphInternal(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Synchronously or asynchronously lays out a graph.
             </summary>
            
             <param name="oGraph">
             The graph to lay out.
             </param>
            
             <param name="oLayoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <param name="oBackgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method,
             or null if the graph is being laid out synchronously.
             </param>
            
             <param name="oDoWorkEventArgs">
             Asynchronous event arguments, or null if the graph is being laid out
             synchronously.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphUsingGroups(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.List{Smrf.NodeXL.Core.GroupInfo},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Synchronously or asynchronously lays out a graph using groups.
             </summary>
            
             <param name="oGraph">
             The graph to lay out.
             </param>
            
             <param name="oGroupsToLayout">
             A List containing a GroupInfo object for each group of vertices that
             should be laid out in a rectangle, sorted by the number of vertices in
             the group, in descending order.
             </param>
            
             <param name="oAdjustedLayoutContext">
             The LayoutContext to use.  This has already been adjusted for the
             layout margin.
             </param>
            
             <param name="oBackgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method,
             or null if the graph is being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphUsingPackedRectangles(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.List{Smrf.NodeXL.Core.GroupInfo},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Synchronously or asynchronously lays out a graph using groups.
             </summary>
            
             <param name="oGraph">
             The graph to lay out.
             </param>
            
             <param name="oGroupsToLayout">
             A List containing a GroupInfo object for each group of vertices that
             should be laid out in a rectangle, sorted by the number of vertices in
             the group, in descending order.
             </param>
             
             <param name="oAdjustedLayoutContext">
             The LayoutContext to use.  This has already been adjusted for the
             layout margin.
             </param>
            
             <param name="oBackgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method,
             or null if the graph is being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphUsingForceDirectedGroups(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.List{Smrf.NodeXL.Core.GroupInfo},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Synchronously or asynchronously lays out a graph using groups.
             </summary>
            
             <param name="oGraph">
             The graph to lay out.
             </param>
            
             <param name="oGroupsToLayout">
             A List containing a GroupInfo object for each group of vertices that
             should be laid out in a rectangle, sorted by the number of vertices in
             the group, in descending order.
             </param>
             
             <param name="oAdjustedLayoutContext">
             The LayoutContext to use.  This has already been adjusted for the
             layout margin.
             </param>
            
             <param name="oBackgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method,
             or null if the graph is being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.createGroupVertexProximityGraph(Smrf.NodeXL.Core.IGraph)">
            <summary>
            Creates the proximity graph (delaunay triangulation) of the node
            positions in the group graph.
            </summary>
            <param name="graph">
            The group graph to create a proximity graph from.
            </param>
            
            <returns>
            The proximity graph.
            </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.proximityGraphStressMajorization(Smrf.NodeXL.Core.IGraph,System.Int32)">
            <summary>
            Run iterations of stress majorization to eliminate overlap on a 
            proximity graph.
            </summary>
            
            <param name="groupProximityGraph">
            The proximity graph to run stress majorization on.
            </param>
            
            <param name="maxIterations">
            The maximum number of interations of stress majorization to run.
            </param>
            
            <returns>
            Whether there was any overlap initially.
            </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.inverse(System.Single)">
            <summary>
            Simply calculates the inverse of a value.
            </summary>
            
            <param name="val">
            The value to inverse.
            </param>
            
            <returns>
            The inverse.
            </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.isApproximatelyEqual(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether two values are within epsilon of each other.
            </summary>
            
            <param name="value1">
            Value A
            </param>
            
            <param name="value2">
            Valube B
            </param>
            
            <param name="epsilon">
            The largest difference A-B where A and B are still approximately equal.
            </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.GetGroupsToLayOut(Smrf.NodeXL.Core.IGraph)">
             <summary>
             Lays out a graph on a BackgroundWorker thread using groups.
             </summary>
            
             <param name="oGraph">
             The graph to lay out.
             </param>
            
             <returns>
             A List containing a GroupInfo object for each group of vertices that
             should be laid out in a rectangle, sorted by the number of vertices in
             the group, in descending order.
             </returns>
            
             <remarks>
             This method analyzes the graph's groups and creates a new List of
             groups from them.  Empty and collapsed groups are skipped, and any
             vertices that aren't in a group are put into a new group.  The list is
             then sorted.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.GetLayoutToUseForGroup(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex})">
             <summary>
             Gets the <see cref="T:Smrf.NodeXL.Layouts.LayoutBase"/> object to use to lay out a group.
             </summary>
            
             <param name="oGraph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="oVerticesInGroup">
             Vertices in the group.  The collection is guaranteed to have at least
             one vertex.
             </param>
            
             <returns>
             The <see cref="T:Smrf.NodeXL.Layouts.LayoutBase"/> object to use to lay out the group.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.UseGridLayoutForGroup(System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex})">
             <summary>
             Returns a flag indicating whether a grid layout should be used to lay
             out a group.
             </summary>
            
             <param name="oVerticesInGroup">
             Vertices in the group.  The collection is guaranteed to have at least
             one vertex.
             </param>
            
             <returns>
             true if a grid layout should be used.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.FireLayOutGraphCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
             <summary>
             Fires the <see cref="E:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphCompleted"/> event if appropriate.
             </summary>
            
             <param name="oAsyncCompletedEventArgs">
             An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains the event data.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Handles the DoWork event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.BackgroundWorker_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
             <summary>
             Handles the RunWorkerCompleted event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.GetGroupsToLayOutConnectivity(Smrf.NodeXL.Core.IGraph)">
            <summary>
            Gets the groups from the graph and ensures they have connectivity
            calculated.
            </summary>
            
            <param name="oGraph">
            The graph to examine.
            </param>
            
            <returns>
            A list of GroupInfo objects from the graph sorted by connectivity.
            </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.getConnectivityBetween(Smrf.NodeXL.Core.GroupInfo,Smrf.NodeXL.Core.GroupInfo,Smrf.NodeXL.Core.IGraph)">
            <summary>
            Get whether there is connectivity between two groups in a graph.
            </summary>
            
            <param name="g1">
            Group 1
            </param>
            
            <param name="g2">
            Group 2
            </param>
            
            <param name="oGraph">
            The graph these groups are in
            </param>
            
            <returns>
            True if there is connectivity, false otherwise.
            </returns>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutBase.MaximumGroupEdgeCountToGrid">
            Maximum number of non-self-loop edges in a group for the group to be
            laid out in a grid when m_bImproveLayoutOfGroups is true.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutBase.m_iMargin">
            Margin to subtract from the graph rectangle before laying out the
            graph.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutBase.m_eLayoutStyle">
            The style to use when laying out the graph.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutBase.m_eBoxLayoutAlgorithm">
            The algorithm to use when laying out groups.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutBase.m_dGroupRectanglePenWidth">
            The width of the pen used to draw group rectangles.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutBase.m_eIntergroupEdgeStyle">
            Specifies how the edges that connect vertices in different groups
            should be shown.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutBase.m_bImproveLayoutOfGroups">
            true to attempt to improve the appearance of groups.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutBase.m_iMaximumVerticesPerBin">
            The maximum number of vertices a binned component can have.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutBase.m_iBinLength">
            Height and width of each bin, in graph rectangle units.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutBase.m_oBackgroundWorker">
            BackgroundWorker used by LayOutGraphAsync().
        </member>
        <member name="P:Smrf.NodeXL.Layouts.LayoutBase.Margin">
             <summary>
             Gets or sets the margin to subtract from each edge of the graph
             rectangle before laying out the graph.
             </summary>
            
             <value>
             The margin to subtract from each edge.  Must be greater than or equal
             to zero.  The default value is 6.
             </value>
            
             <remarks>
             If the graph rectangle passed to <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/> is {L=0,
             T=0, R=50, B=30} and the <see cref="P:Smrf.NodeXL.Layouts.LayoutBase.Margin"/> is 5, for example, then
             the graph is laid out within the rectangle {L=5, T=5, R=45, B=25}.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.LayoutBase.LayoutStyle">
             <summary>
             Gets or sets the style to use when laying out the graph.
             </summary>
            
             <value>
             The style to use when laying out the graph.  The default value is
             <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.Normal"/>.
             </value>
            
             <remarks>
             If you set this property to <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.UseGroups"/>, you must add
             group information to the graph to tell the layout class which vertices
             are in which groups.
            
             <example>
             Here is sample C# code that puts each of the graph's vertices in a
             group and tells the layout class to lay out each group in its own box.
             It assumes that you are using a NodeXLControl.
            
             <code>
             // For demonstration purposes, put each vertex in a random group.
             
             const Int32 Groups = 5;
             
             GroupInfo [] groupInfo = new GroupInfo[Groups];
             
             for (Int32 i = 0; i &lt; Groups; i++)
             {
                 groupInfo[i] = new GroupInfo();
             }
             
             Random random = new Random();
             
             foreach (IVertex vertex in nodeXLControl.Graph.Vertices)
             {
                 groupInfo[ random.Next(0, Groups - 1) ].Vertices.AddLast(vertex);
             }
             
             // Store the group information as metadata on the graph.
             
             nodeXLControl.Graph.SetValue(ReservedMetadataKeys.GroupInfo, groupInfo);
             
             // Tell the layout class to use the group information.
             
             nodeXLControl.Layout.LayoutStyle = LayoutStyle.UseGroups;
             </code>
             </example>
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.LayoutBase.BoxLayoutAlgorithm">
             <summary>
             Gets or sets the box layout algorithm to use when laying out the graph.
             </summary>
            
             <value>
             The box layout algorithm to use when laying out the graph.  The default value is
             <see cref="F:Smrf.NodeXL.Layouts.BoxLayoutAlgorithm.Treemap"/>.
             </value>
            
        </member>
        <member name="P:Smrf.NodeXL.Layouts.LayoutBase.SupportsOutOfBoundsVertices">
             <summary>
             Gets a flag indicating whether vertices laid out by the class can fall
             outside the graph bounds.
             </summary>
            
             <value>
             true if the vertices can fall outside the graph bounds.
             </value>
            
             <remarks>
             If true, the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> of the laid-out vertices
             may be within the graph rectangle's margin or outside the graph
             rectangle.  If false, the vertex locations are always within the
             margin.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.LayoutBase.GroupRectanglePenWidth">
             <summary>
             Gets or sets the width of the pen used to draw group rectangles.
             </summary>
            
             <value>
             The width of the pen used to draw group rectangles.  Must be greater
             than or equal to 0.  If 0, group rectangles aren't drawn.  The default
             value is 1.0.
             </value>
            
             <remarks>
             This property is ignored if <see cref="P:Smrf.NodeXL.Layouts.LayoutBase.LayoutStyle"/> is not <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.LayoutBase.IntergroupEdgeStyle">
             <summary>
             Gets or sets a value that specifies how the edges that connect vertices
             in different groups should be shown.
             </summary>
            
             <value>
             An <see cref="T:Smrf.NodeXL.Layouts.IntergroupEdgeStyle"/> value.
             </value>
            
             <remarks>
             This property is ignored if <see cref="P:Smrf.NodeXL.Layouts.LayoutBase.LayoutStyle"/> is not <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.LayoutBase.ImproveLayoutOfGroups">
             <summary>
             Gets or sets a flag indicating whether the layout should attempt to
             improve the appearance of groups.
             </summary>
            
             <value>
             true to attempt to improve the appearance of groups.  The default value
             is false.
             </value>
            
             <remarks>
             This property is ignored if <see cref="P:Smrf.NodeXL.Layouts.LayoutBase.LayoutStyle"/> is not <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
            
             <para>
             If true, groups that don't have many vertices are laid out using a Grid
             layout.
             </para>
            
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.LayoutBase.SupportsBinning">
             <summary>
             Gets a flag indicating whether binning can be used when the entire
             graph is laid out.
             </summary>
            
             <value>
             true if binning can be used.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.LayoutBase.MaximumVerticesPerBin">
             <summary>
             Gets or sets the maximum number of vertices a binned component can
             have.
             </summary>
            
             <value>
             The maximum number of vertices a binned component can have.  The
             default value is 3.
             </value>
            
             <remarks>
             If <see cref="P:Smrf.NodeXL.Layouts.LayoutBase.LayoutStyle"/> is <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.UseBinning"/> and a
             strongly connected component of the graph has <see cref="P:Smrf.NodeXL.Layouts.LayoutBase.MaximumVerticesPerBin"/> vertices or fewer, the component is
             placed in a bin.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.LayoutBase.BinLength">
             <summary>
             Gets or sets the height and width of each bin, in graph rectangle
             units.
             </summary>
            
             <value>
             The height and width of each bin, in graph rectangle units.  The
             default value is 16.
             </value>
            
             <remarks>
             This property is ignored if <see cref="P:Smrf.NodeXL.Layouts.LayoutBase.LayoutStyle"/> is not <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.UseBinning"/>.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.LayoutBase.IsBusy">
             <summary>
             Gets a value indicating whether an asynchronous operation is in
             progress.
             </summary>
            
             <value>
             true if an asynchronous operation is in progress.
             </value>
        </member>
        <member name="E:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphCompleted">
             <summary>
             Occurs when a layout started by <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphAsync(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>
             completes, is cancelled, or ends with an error.
             </summary>
            
             <remarks>
             The event fires on the thread on which <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphAsync(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>
             was called.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.LayoutBase.GroupVertex">
            <summary>
            A special representation of a group used for calculating the 
            Force-Directed Group-in-a-Box layout.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.GroupVertex.updatePositionFromLocation">
            <summary>
            Updates the MIConvexHull <see cref="T:MIConvexHull.MICHIVertex"/> Position using the NodeXL <see cref="T:Smrf.NodeXL.Core.Vertex"/> Location
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.GroupVertex.updateLocationFromPosition">
            <summary>
            Updates the NodeXL <see cref="T:Smrf.NodeXL.Core.Vertex"/> Location using the MIConvexHull <see cref="T:MIConvexHull.MICHIVertex"/> Position
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutBase.GroupVertex.updateGroupInfoLocationFromLocation">
            <summary>
            Updates the <see cref="T:Smrf.NodeXL.Core.GroupInfo"/> CollapsedLocation using the <see cref="T:Smrf.NodeXL.Core.Vertex"/> Location
            as well as the GroupInfo.Rectangle
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SortableLayoutBase.#ctor">
            <summary>
            Initializes a new instance of the SortableLayoutBase class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SortableLayoutBase.UseMetadataVertexSorter(Smrf.NodeXL.Core.IGraph)">
             <summary>
             Tells the layout to sort the vertices by layout order.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <remarks>
             If <paramref name="graph"/> has the key <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SortableLayoutAndZOrderSet"/>, this method
             sets the <see cref="P:Smrf.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort the graph's vertices by the values contained in the vertices' <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.SortableLayoutAndZOrder"/> keys.
             Otherwise, it sets the <see cref="P:Smrf.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to null.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SortableLayoutBase.LayOutGraphCore(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SortableLayoutBase.LayOutGraphCoreSorted(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously using specified
             vertices that may be sorted.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SortableLayoutBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.SortableLayoutBase.m_oVertexSorter">
            The vertex sorter to use to sort the vertices before they are laid out,
            or null if the vertices should not be sorted.
        </member>
        <member name="P:Smrf.NodeXL.Layouts.SortableLayoutBase.VertexSorter">
             <summary>
             Gets or sets the vertex sorter to use.
             </summary>
            
             <value>
             The vertex sorter to use to sort the vertices before they are laid out,
             as an <see cref="T:Smrf.NodeXL.Core.IVertexSorter"/>, or null if the vertices should not
             be sorted.
             </value>
            
             <remarks>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Smrf.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will sort them.  The
             ByMetadataVertexSorter and ByDelegateVertexSorter classes can be used
             for this.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.CircleLayout.#ctor">
            <summary>
            Initializes a new instance of the CircleLayout class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.CircleLayout.LayOutGraphCoreSorted(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously using specified
             vertices that may be sorted.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.CircleLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout">
             <summary>
             Lays out a graph using the Fruchterman-Reingold layout.
             </summary>
            
             <remarks>
             For details on the layout algorithm, see
             http://www.cs.ubc.ca/rr/proceedings/spe91-95/spe/vol21/issue11/spe060tf.pdf.
            
             <para>
             If the graph has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <para>
             If the graph has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayoutBaseLayoutComplete"/>, the previous
             layout is used as a starting point for the new layout.  Otherwise, the
             locations of all unlocked vertices are randomized at the start of the
             layout process.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
             </para>
            
             <para>
             If an edge has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.EdgeWeight"/>, the edge weight is used in the
             layout calculations.  Edges with larger edge weights exert stronger
             attractive forces on their vertices.  If an edge weight is zero or less,
             the algorithm ignores it and uses a value of 1.0 instead.
             </para>
            
             <example>
             Here is sample C# code that uses a <see cref="T:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout"/> to synchronously lay out a graph.
            
             <code>
             using System;
             using System.Drawing;
             using Smrf.NodeXL.Core;
             using Smrf.NodeXL.Layouts;
            
             namespace PopulateAndLayOutGraph
             {
             class Program
             {
                 static void Main(string[] args)
                 {
                     // Create a graph.  The graph has no visual representation; it is
                     // just a data structure.
            
                     Graph oGraph = new Graph(GraphDirectedness.Directed);
                     IVertexCollection oVertices = oGraph.Vertices;
                     IEdgeCollection oEdges = oGraph.Edges;
            
                     // Add three vertices.
            
                     IVertex oVertexA = oVertices.Add();
                     oVertexA.Name = "Vertex A";
                     IVertex oVertexB = oVertices.Add();
                     oVertexB.Name = "Vertex B";
                     IVertex oVertexC = oVertices.Add();
                     oVertexC.Name = "Vertex C";
            
                     // Connect the vertices with directed edges.
            
                     IEdge oEdge1 = oEdges.Add(oVertexA, oVertexB, true);
                     IEdge oEdge2 = oEdges.Add(oVertexB, oVertexC, true);
                     IEdge oEdge3 = oEdges.Add(oVertexC, oVertexA, true);
            
                     // Lay out the graph within a 100x100 rectangle.  This sets the
                     // IVertex.Location property of each vertex.
            
                     ILayout oLayout = new FruchtermanReingoldLayout();
            
                     LayoutContext oLayoutContext =
                         new LayoutContext(new Rectangle(0, 0, 100, 100));
            
                     oLayout.LayOutGraph(oGraph, oLayoutContext);
            
                     // List the results.
            
                     foreach (IVertex oVertex in oVertices)
                     {
                         Console.WriteLine("The location of {0} is {1}.",
                             oVertex.Name, oVertex.Location);
                     }
                 }
             }
             }
             </code>
            
             </example>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout.#ctor">
            <summary>
            Initializes a new instance of the FruchtermanReingoldLayout class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout.LayOutGraphCore(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout.InitializeMetadata(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex})">
             <summary>
             Stores required metadata on the graph's vertices and edges before the
             layout begins.
             </summary>
            
             <param name="oGraph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="oVerticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout.RemoveMetadata(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex})">
             <summary>
             Removes metadata from the graph's vertices and edges after the layout
             is complete.
             </summary>
            
             <param name="oGraph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="oVerticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout.SaveTag(Smrf.NodeXL.Core.IMetadataProvider)">
             <summary>
             Saves a vertex or edge Tag in metadata.
             </summary>
            
             <param name="oVertexOrEdge">
             The vertex or edge.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout.RestoreTag(Smrf.NodeXL.Core.IMetadataProvider)">
             <summary>
             Restores a vertex or edge Tag from metadata.
             </summary>
            
             <param name="oVertexOrEdge">
             The vertex or edge.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout.CalculateRepulsiveForces(System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},System.Single)">
             <summary>
             Calculates the repulsive forces between the vertices.
             </summary>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="k">
             The "k" constant in the Fruchterman-Reingold algorithm.
             </param>
            
             <remarks>
             The results are stored in the FruchtermanReingoldVertexInfo object
             stored in each vertex's Tag.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout.CalculateAttractiveForces(System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IEdge},System.Single)">
             <summary>
             Calculates the attractive forces between the vertices.
             </summary>
            
             <param name="edgesToLayOut">
             Edges to lay out.
             </param>
            
             <param name="k">
             The "k" constant in the Fruchterman-Reingold algorithm.
             </param>
            
             <remarks>
             The results are added to the existing FruchtermanReingoldVertexInfo
             object stored in each vertex's Tag.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout.SetUnboundedLocations(System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.Single,System.Boolean)">
             <summary>
             Sets the unbounded location of each vertex.
             </summary>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="fTemperature">
             Current temperature.  Must be greater than zero.
             </param>
            
             <param name="bAlsoSetVertexLocations">
             true to also set each vertex's <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/>
             property.
             </param>
            
             <remarks>
             This method is called at the end of each layout iteration.  For each
             vertex, it modifies the vertex's location within an unbounded rectangle
             based on the repulsive and attractive forces that have been calculated
             for the vertex.  If <paramref name="bAlsoSetVertexLocations"/> is
             true, it also transforms that unbounded locations to a point within the
             bounded graph rectangle, and sets each vertex's <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property to that bounded point.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout.m_iIterations">
            Number of times the algorithm should run.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout.m_fC">
            Gets or sets the constant that determines the strength of the
            attractive and repulsive forces between the vertices.
        </member>
        <member name="P:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout.C">
             <summary>
             Gets or sets the constant that determines the strength of the
             attractive and repulsive forces between the vertices.
             </summary>
            
             <value>
             The "C" constant in the "Modelling the forces" section of the
             Fruchterman-Reingold paper.  Must be greater than 0.  The default value
             is 1.0.
             </value>
            
             <remarks>
             Increasing C decreases the attractive forces and increases the
             repulsive forces; decreasing C increases the attractive forces and
             decreases the repulsive forces.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout.Iterations">
             <summary>
             Gets or sets the number of times to run the Fruchterman-Reingold
             algorithm.
             </summary>
            
             <value>
             The number of times to run the Fruchterman-Reingold algorithm when the
             graph is laid out, as an Int32.  Must be greater than zero.  The
             default value is 10.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.FruchtermanReingoldVertexInfo">
             <summary>
             Stores information calculated by <see cref="T:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout"/>
             for one vertex.
             </summary>
            
             <remarks>
             <see cref="T:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout"/> calculates several pieces of
             information about each vertex in the graph being laid out.  Instead of
             storing each piece of information in a separate vertex metadata key, which
             would require multiple key lookups and inefficient boxing and unboxing of
             value types, it stores all the information for the vertex in one instance
             of type <see cref="T:Smrf.NodeXL.Layouts.FruchtermanReingoldVertexInfo"/> and stores the
             instance in the vertex's Tag.
            
             <para>
             All data is exposed as public fields instead of properties.  That's because
             the method in <see cref="T:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout"/> that calculates
             repulsive forces accesses the data repeatedly in an O(V-squared) loop, and
             property getters are much slower than direct field accesses.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.FruchtermanReingoldVertexInfo.#ctor(System.Drawing.PointF)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Layouts.FruchtermanReingoldVertexInfo"/> class.
             </summary>
            
             <param name="initialLocation">
             The vertex's initial location within the bounded graph rectangle.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.FruchtermanReingoldVertexInfo.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.FruchtermanReingoldVertexInfo.UnboundedLocationX">
            The vertex's location within an unbounded rectangle.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.FruchtermanReingoldVertexInfo.UnboundedLocationY">
            
        </member>
        <member name="F:Smrf.NodeXL.Layouts.FruchtermanReingoldVertexInfo.DisplacementX">
            The vertex's displacement with respect to its current unbounded
            location.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.FruchtermanReingoldVertexInfo.DisplacementY">
            
        </member>
        <member name="T:Smrf.NodeXL.Layouts.GridLayout">
             <summary>
             Lays out a graph by placing the vertices on a grid.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on a simple grid.
            
             <para>
             If the graph has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Smrf.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GridLayout.#ctor">
            <summary>
            Initializes a new instance of the GridLayout class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GridLayout.LayOutGraphCoreSorted(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously using specified
             vertices that may be sorted.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GridLayout.GetRowsAndColumns(System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.Int32@,System.Int32@)">
             <summary>
             Gets the number of rows and columns to use in the grid.
             </summary>
            
             <param name="oVerticesToLayOut">
             Vertices to lay out.
             </param>
            
             <param name="oLayoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <param name="iRows">
             Where the number of grid rows gets stored.
             </param>
            
             <param name="iColumns">
             Where the number of grid columns gets stored.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GridLayout.RowsAndColumnsAreSufficient(System.Int32,System.Int32,System.Int32)">
             <summary>
             Determines whether a calculated number of rows and columns are
             sufficient to display all the vertices.
             </summary>
            
             <param name="iRows">
             Calculated number of rows.
             </param>
            
             <param name="iColumns">
             Calculated number of columns.
             </param>
            
             <param name="iVertices">
             Number of vertices.
             </param>
            
             <returns>
             true if the rows and columns are sufficient.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GridLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.HarelKorenFastMultiscaleLayout">
             <summary>
             Lays out a graph using the Harel-Koren fast multiscale algorithm.
             </summary>
            
             <remarks>
             For details on the layout algorithm, see "A Fast Multi-Scale Method for
             Drawing Large Graphs," David Harel and Yehuda Koren, Journal of Graph
             Algorithms and Applications, Vol. 6 No. 3, 2002.
            
             <para>
             Most property names are identical to the names used in the Harel-Koren
             paper.  The exception is Iterations, which is renamed <see cref="P:Smrf.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.LocalIterations"/>.
             </para>
            
             <para>
             If the graph has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, its
             location is left unmodified.
             </para>
            
             <para>
             This class wraps a C# implementation written by Janez Brank at Microsoft
             Research Cambridge in May 2009.  The code from Janez is in the file
             HarelKorenFastMultiscaleLayoutInternal.cs.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.#ctor">
            <summary>
            Initializes a new instance of the HarelKorenFastMultiscaleLayout class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.LayOutGraphCore(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.m_iRad">
            The "Rad" constant in the Harel-Koren paper.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.m_iLocalIterations">
            The "Iterations" constant in the Harel-Koren paper.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.m_iRatio">
            The "Ratio" constant in the Harel-Koren paper.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.m_iMinSize">
            The "MinSize" constant in the Harel-Koren paper.
        </member>
        <member name="P:Smrf.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.Rad">
             <summary>
             Gets or sets the constant that determines the radius of local
             neighborhoods.
             </summary>
            
             <value>
             The "Rad" constant in the Harel-Koren paper.  Must be greater than 0.
             The default value is 7.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.LocalIterations">
             <summary>
             Gets or sets the constant that determines the number of iterations used
             for local beautification.
             </summary>
            
             <value>
             The "Iterations" constant in the Harel-Koren paper.  Must be greater
             than 0.  The default value is 10.
             </value>
            
             <remarks>
             This is named LocalIterations because "Iterations" might be confused
             with NodeXL's notion of an iteration, which in the Harel-Koren
             algorithm is the number of coarse graph iterations.  The number of
             coarse graph iterations is determined by the <see cref="P:Smrf.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.Ratio"/>
             property and the number of vertices in the graph.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.Ratio">
             <summary>
             Gets or sets the ratio between the number of vertices in two coarse
             graph iterations.
             </summary>
            
             <value>
             The "Ratio" constant in the Harel-Koren paper.  Must be greater than 1.
             The default value is 3.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.HarelKorenFastMultiscaleLayout.MinSize">
             <summary>
             Gets or sets the minimum number of clusters in the graph.
             </summary>
            
             <value>
             The "MinSize" constant in the Harel-Koren paper.  Must be greater than
             zero.  The default value is 10.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.LayOutGraphAsyncArguments">
             <summary>
             Stores the arguments passed to <see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraphAsync(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>.
             </summary>
            
             <remarks>
             <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraphAsync(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/> uses an instance of this class
             to pass its arguments to <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)"/>.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayOutGraphAsyncArguments.#ctor(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Layouts.LayOutGraphAsyncArguments"/> class.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayOutGraphAsyncArguments.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayOutGraphAsyncArguments.m_oGraph">
            Graph to lay out.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayOutGraphAsyncArguments.m_oLayoutContext">
            Provides access to objects needed to lay out the graph.
        </member>
        <member name="P:Smrf.NodeXL.Layouts.LayOutGraphAsyncArguments.Graph">
             <summary>
             Gets the graph to lay out.
             </summary>
            
             <value>
             The graph to lay out, as an <see cref="T:Smrf.NodeXL.Core.IGraph"/>.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.LayOutGraphAsyncArguments.LayoutContext">
             <summary>
             Gets the object that provides access to objects needed to lay out the
             graph.
             </summary>
            
             <value>
             Object that provides access to objects needed to lay out the graph, as
             a <see cref="P:Smrf.NodeXL.Layouts.LayOutGraphAsyncArguments.LayoutContext"/>.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.NullLayout">
             <summary>
             Leaves the graph's vertices in their current location.
             </summary>
            
             <remarks>
             This layout does nothing.  It is meant for use in applications where a
             layout is always performed, but sometimes the layout should do nothing.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.NullLayout.#ctor">
            <summary>
            Initializes a new instance of the NullLayout class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.NullLayout.LayOutGraphCore(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.NullLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.NullLayout.SupportsBinning">
             <summary>
             Gets a flag indicating whether binning can be used when the entire
             graph is laid out.
             </summary>
            
             <value>
             true if binning can be used.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.PolarAbsoluteLayout">
             <summary>
             Lays out a graph by placing the vertices within a polar coordinate space.
             </summary>
            
             <remarks>
             This layout defines a polar coordinate space that uses (R, Angle) to
             specify a point.
            
             <para>
             R represents the distance of the point from the origin, which is the center
             of the graph rectangle.  0.0 represents the origin, 1.0 represents one WPF
             unit (1/96 inch), and -1 represents one WPF unit in the opposite direction.
             </para>
            
             <para>
             Angle is in degrees.  0.0 represents points on the positive x-axis and 90.0
             represents points on the positive y-axis.  Any angle is valid.  361.0
             degrees is the same as 1.0 degree, for example, and -1.0 degree is the same
             as 359.0 degrees.
             </para>
            
             <para>
             To specify the polar coordinates of a vertex, add the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PolarLayoutCoordinates"/> key to the vertex.
             If a vertex is missing this key, the vertex is placed at the origin.
             </para>
            
             <para>
             If the graph has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, its
             location is left unmodified.
             </para>
            
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.PolarLayoutBase">
            <summary>
            Base class for classes that lay out a graph by placing the vertices within
            a polar coordinate space.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.PolarLayoutBase.#ctor(System.Boolean)">
             <summary>
             Initializes a new instance of the PolarLayoutBase class.
             </summary>
            
             <param name="polarRIsAbsolute">
             If true, the polar R coordinates are in WPF units and have no upper
             limit.  If false, the polar R coordinates can vary from 0.0 to 1.0, and
             1.0 represents half of either the graph rectangle height or width,
             whichever is smaller.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.PolarLayoutBase.LayOutGraphCore(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.PolarLayoutBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.PolarLayoutBase.m_bPolarRIsAbsolute">
            If true, the polar R coordinates are in WPF units and have no upper
            limit.  If false, the polar R coordinates can vary from 0.0 to 1.0, and
            1.0 represents half of either the graph rectangle height or width,
            whichever is smaller.
        </member>
        <member name="M:Smrf.NodeXL.Layouts.PolarAbsoluteLayout.#ctor">
            <summary>
            Initializes a new instance of the PolarAbsoluteLayout class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.PolarAbsoluteLayout.TransformLayoutCore(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext,Smrf.NodeXL.Layouts.LayoutContext)">
             <summary>
             Transforms a graph's current layout.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Smrf.NodeXL.Layouts.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to objects needed to transform the graph's layout.
             </param>
            
             <remarks>
             After a graph has been laid out by <see cref="M:Smrf.NodeXL.Layouts.LayoutBase.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>, this method may get called to
             transform the graph's layout from one rectangle to another.  <paramref name="originalLayoutContext"/> contains the original graph rectangle,
             and <paramref name="newLayoutContext"/> contains the new graph
             rectangle.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.PolarAbsoluteLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.PolarAbsoluteLayout.SupportsOutOfBoundsVertices">
             <summary>
             Gets a flag indicating whether vertices laid out by the class can fall
             outside the graph bounds.
             </summary>
            
             <value>
             true if the vertices call fall outside the graph bounds.
             </value>
            
             <remarks>
             If true, the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> of the laid-out vertices
             may be within the graph rectangle's margin or outside the graph
             rectangle.  If false, the vertex locations are always within the
             margin.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.PolarLayout">
             <summary>
             Lays out a graph by placing the vertices within a polar coordinate space.
             </summary>
            
             <remarks>
             This layout defines a polar coordinate space that uses (R, Angle) to
             specify a point.
            
             <para>
             R represents the distance of the point from the origin, which is the center
             of the graph rectangle.  0.0 represents the origin and 1.0 represents the
             maximum distance from the origin, which is the smaller of half the graph
             rectangle's width or height.  R values less than 0.0 are the same as 0.0,
             and R values greater than 1.0 are the same as 1.0.
             </para>
            
             <para>
             Angle is in degrees.  0.0 represents points on the positive x-axis and 90.0
             represents points on the positive y-axis.  Any angle is valid.  361.0
             degrees is the same as 1.0 degree, for example, and -1.0 degree is the same
             as 359.0 degrees.
             </para>
            
             <para>
             To specify the polar coordinates of a vertex, add the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PolarLayoutCoordinates"/> key to the vertex.
             If a vertex is missing this key, the vertex is placed at the origin.
             </para>
            
             <para>
             If the graph has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, its
             location is left unmodified.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.PolarLayout.#ctor">
            <summary>
            Initializes a new instance of the PolarLayout class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.PolarLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.RandomLayout">
             <summary>
             Lays out a graph by placing the vertices in random locations.
             </summary>
            
             <para>
             If the graph has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <remarks>
             If a vertex has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.RandomLayout.#ctor">
            <summary>
            Initializes a new instance of the RandomLayout class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.RandomLayout.LayOutGraphCore(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.RandomLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.SinusoidHorizontalLayout">
             <summary>
             Lays out a graph by placing the vertices on a horizontal sine wave.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on one cycle of a sine wave that
             spans the rectangle horizontally from left to right.
            
             <para>
             If the graph has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Smrf.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.SinusoidLayout">
             <summary>
             Lays out a graph by placing the vertices on a horizontal or vertical sine
             wave.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on one cycle of a sine wave that
             spans the rectangle either horizontally or vertically.
            
             <para>
             If the graph has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex array are laid out and all other vertices
             are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/>, it is included in layout
             calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Smrf.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SinusoidLayout.#ctor(System.Boolean,System.Double)">
             <summary>
             Initializes a new instance of the SinusoidLayout class.
             </summary>
            
             <param name="isHorizontal">
             true for a sine wave that runs from left to right, false for top to
             bottom.
             </param>
            
             <param name="cycleLength">
             Length of the sine wave cycle, in radians.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SinusoidLayout.LayOutGraphCoreSorted(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously using specified
             vertices that may be sorted.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SinusoidLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.SinusoidLayout.m_bIsHorizontal">
            true for a sine wave that runs from left to right, false for top to
            bottom.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.SinusoidLayout.m_dCycleLength">
            Length of the sine wave cycle, in radians.
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SinusoidHorizontalLayout.#ctor">
            <summary>
            Initializes a new instance of the SinusoidHorizontalLayout class.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.SinusoidVerticalLayout">
             <summary>
             Lays out a graph by placing the vertices on a vertical sine wave.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on one cycle of a sine wave that
             spans the rectangle vertically from top to bottom.
            
             <para>
             If the graph has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex array are laid out and all other vertices
             are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/>, it is included in layout
             calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Smrf.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SinusoidVerticalLayout.#ctor">
            <summary>
            Initializes a new instance of the SinusoidVerticalLayout class.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.SpiralLayout">
             <summary>
             Lays out a graph by placing the vertices on a spiral.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on a spiral scaled to the smaller of
             the rectangle's dimensions.
            
             <para>
             If the graph has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex collection are laid out and all other
             vertices are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Smrf.NodeXL.Layouts.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.SpiralLayout.MaximumSpiralAngle">
            Maximum angle of the spiral, in radians.
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SpiralLayout.#ctor">
            <summary>
            Initializes a new instance of the SpiralLayout class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SpiralLayout.LayOutGraphCoreSorted(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously using specified
             vertices that may be sorted.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SpiralLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.SugiyamaLayout">
             <summary>
             Lays out a graph using the Sugiyama layered layout scheme.
             </summary>
            
             <remarks>
             This layout uses an algorithm based on Sugiyama's layered layout scheme.
             It is implemented with the Microsoft Research GLEE (Graph Layout Execution
             Engine) library.  GLEE was developed by Lev Nachmanson of Microsoft
             Research and was available on the Microsoft Research download site as of
             January 2007.
            
             <para>
             The Microsoft.GLEE.dll assembly must be included in the build that uses
             this class.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.SugiyamaLayout.DefaultNodeXLVertexRadius">
            Radius to use for the vertices, in NodeXL coordinates.
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SugiyamaLayout.#ctor">
            <summary>
            Initializes a new instance of the SugiyamaLayout class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SugiyamaLayout.LayOutGraphCore(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
             This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/> property on the
             vertices in <paramref name="verticesToLayOut"/> and optionally adding
             geometry metadata to the graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SugiyamaLayout.TransformLayoutCore(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext,Smrf.NodeXL.Layouts.LayoutContext)">
             <summary>
             Transforms a graph's current layout.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Smrf.NodeXL.Layouts.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to objects needed to transform the graph's layout.
             </param>
            
             <remarks>
             After a graph has been laid out by <see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>,
             this method may get called to transform the graph's layout from one
             rectangle to another.  <paramref name="originalLayoutContext"/>
             contains the original graph rectangle, and <paramref name="newLayoutContext"/> contains the new graph rectangle.  The
             base-class implementation transforms all the graph's vertex locations
             from the original rectangle to the new one.  If the derived <see cref="M:Smrf.NodeXL.Layouts.SugiyamaLayout.LayOutGraphCore(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)"/> implementation added geometry metadata to the
             graph, the derived class should override this method, transform the
             geometry metadata, and call the base-class implementation to transform
             the graph's vertex locations.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SugiyamaLayout.OnVertexMoveCore(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Processes a vertex that was moved after the graph was laid out.
             </summary>
            
             <param name="vertex">
             The vertex that was moved.
             </param>
            
             <remarks>
             An application may allow the user to move a vertex after the graph has
             been laid out by <see cref="M:Smrf.NodeXL.Layouts.SugiyamaLayout.LayOutGraphCore(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)"/>.  This method is called
             after the application has changed the <see cref="P:Smrf.NodeXL.Core.IVertex.Location"/>
             property on <paramref name="vertex"/>.  If <see cref="M:Smrf.NodeXL.Layouts.SugiyamaLayout.LayOutGraphCore(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.ComponentModel.BackgroundWorker)"/> added geometry metadata to the graph,
             vertices, or edges, <see cref="M:Smrf.NodeXL.Layouts.SugiyamaLayout.OnVertexMoveCore(Smrf.NodeXL.Core.IVertex)"/> should modify the
             metadata if necessary.
            
             <para>
             The argument has already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SugiyamaLayout.GetNodeXLVertexRadius(Smrf.NodeXL.Layouts.LayoutContext)">
             <summary>
             Gets the vertex radius to use, in NodeXL coordinates.
             </summary>
            
             <param name="oLayoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <returns> 
             The vertex radius to use, in NodeXL coordinates.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SugiyamaLayout.NodeXLVertexToGleeNode(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Retrieves a GLEE node that has been stored as metadata in a NodeXL
             vertex. 
             </summary>
            
             <param name="oVertex">
             NodeXL vertex.
             </param>
            
             <returns>
             The GLEE node corresponding to <paramref name="oVertex" />.
             </returns>
            
             <remarks>
             This method assumes that the GLEE node has been stored in the vertex's
             metadata using the key ReservedMetadataKeys.SugiyamaGleeNode.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SugiyamaLayout.NodeXLEdgeToGleeEdge(Smrf.NodeXL.Core.IEdge)">
             <summary>
             Retrieves a GLEE edge that has been stored as metadata in a NodeXL
             edge. 
             </summary>
            
             <param name="oEdge">
             NodeXL edge.
             </param>
            
             <returns>
             The GLEE edge corresponding to <paramref name="oEdge" />.
             </returns>
            
             <remarks>
             This method assumes that the GLEE edge has been stored in the edge's
             metadata using the key ReservedMetadataKeys.SugiyamaGleeEdge.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SugiyamaLayout.GetTransformationMatrix(Microsoft.Glee.GleeGraph,System.Drawing.Rectangle)">
             <summary>
             Returns a <see cref="T:System.Drawing.Drawing2D.Matrix"/> that will transform coordinates in the
             graph rectangle computed by the GLEE layout code to coordinates in the
             NodeXL graph rectangle.
             </summary>
            
             <param name="oGleeGraph">
             GLEE graph that has been laid out.
             </param>
            
             <param name="oNodeXLGraphRectangle">
             Rectangle in which the NodeXL graph is being laid out.
             </param>
            
             <returns>
             A <see cref="T:System.Drawing.Drawing2D.Matrix"/> to transform coordinates.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SugiyamaLayout.GleePointToTransformedPointF(Microsoft.Glee.Splines.Point,System.Drawing.Drawing2D.Matrix)">
             <summary>
             Converts a Microsoft.Glee.Splines.Point in GLEE coordinates to a PointF
             in NodeXL coordinates.
             </summary>
            
             <param name="oGleePoint">
             Microsoft.Glee.Splines.Point to convert.
             </param>
            
             <param name="oTransformationMatrix">
             Matrix created by <see cref="M:Smrf.NodeXL.Layouts.SugiyamaLayout.GetTransformationMatrix(Microsoft.Glee.GleeGraph,System.Drawing.Rectangle)"/>.
             </param>
            
             <returns>
             <paramref name="oGleePoint"/> in GLEE coordinates converted to a
             PointF in NodeXL coordinates.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SugiyamaLayout.GleePointToPointF(Microsoft.Glee.Splines.Point)">
             <summary>
             Converts a Microsoft.Glee.Splines.Point to a PointF.
             </summary>
            
             <param name="oGleePoint">
             Microsoft.Glee.Splines.Point to convert.
             </param>
            
             <returns>
             <paramref name="oGleePoint" /> converted to a PointF.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SugiyamaLayout.GleeCurveToTransformedPointFArray(Microsoft.Glee.Splines.Curve,System.Drawing.Drawing2D.Matrix)">
             <summary>
             Converts a Microsoft.Glee.Splines.Curve to an array of PointF objects
             in NodeXL coordinates.
             </summary>
            
             <param name="oCurve">
             Microsoft.Glee.Splines.Curve to convert.
             </param>
            
             <param name="oTransformationMatrix">
             Matrix created by <see cref="M:Smrf.NodeXL.Layouts.SugiyamaLayout.GetTransformationMatrix(Microsoft.Glee.GleeGraph,System.Drawing.Rectangle)"/>.
             </param>
            
             <returns>
             An array of PointF objects suitable for drawing with the following
             code, where aoCurvePoints is the returned array:
            
             <code>
             GraphicsPath oGraphicsPath = new GraphicsPath();
             
             oGraphicsPath.AddBeziers(aoCurvePoints);
             
             oGraphics.DrawPath(oPen, oGraphicsPath);
             </code>
            
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SugiyamaLayout.GleeCurveToPointFArray(Microsoft.Glee.Splines.Curve)">
             <summary>
             Converts a Microsoft.Glee.Splines.Curve to an array of PointF objects.
             </summary>
            
             <param name="oCurve">
             Microsoft.Glee.Splines.Curve to convert.
             </param>
            
             <returns>
             An array of PointF objects suitable for drawing with the following
             code, where aoCurvePoints is the returned array:
            
             <code>
             oTransformationMatrix.TransformPoints(aoCurvePoints);
            
             GraphicsPath oGraphicsPath = new GraphicsPath();
             
             oGraphicsPath.AddBeziers(aoCurvePoints);
             
             oGraphics.DrawPath(oPen, oGraphicsPath);
             </code>
            
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.SugiyamaLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.BoxLayoutAlgorithm">
            <summary>
            Specifies which layout algorithm should be used for the group-in-a-box layout.
            It maps from solely 
            </summary>
            
            <remarks>
            See <see cref="T:Smrf.NodeXL.Layouts.LayoutStyle"/> for more information.
            </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.BoxLayoutAlgorithm.Treemap">
            <summary>
            Squarified treemap group-in-a-box layout.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.BoxLayoutAlgorithm.PackedRectangles">
            <summary>
            Packed rectangles group-in-a-box layout.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.BoxLayoutAlgorithm.ForceDirected">
            <summary>
            Force-directed group-in-a-box layout.
            </summary>
            
        </member>
        <member name="T:Smrf.NodeXL.Layouts.EdgeBundler">
            <summary>
            EdgeBundler class is intended to be used for bundling and straightening of the edges of the graph.
            The goal is to get the layout that is less clutered and more suitable for analiyzing.
            
            This class is based on the paper "Force-Directed Edge Bundling for Graph Visualization"
            by Danny Holten and Jarke J. van Wijk.
            http://www.win.tue.nl/~dholten/papers/forcebundles_eurovis.pdf
            
            It was implemented and modified by Luka Potkonjak.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.BundleAllEdges(Smrf.NodeXL.Core.IGraph,System.Drawing.Rectangle)">
            <summary>
            Bundles edges of the graph.
            </summary>
            
            <param name="graph">
            Graph whose edges should be bundled
            </param>
            
            <param name="rectangle">
            Rectangle in which the graph is laid out.
            Control points of bundled edges should not fall outside of this rectangle.
            </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.BundleEdges(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge},System.Drawing.Rectangle)">
            <summary>
            Bundles specified edges. Shapes of all the other edges remain the same,
            so this method is faster than the one for bundling all edges, but also produces less optimal layout.
            </summary>
            
            <param name="graph">
            Parent graph of the edge set
            </param>
            
            <param name="edges">
            Edges that should be bundled
            </param>
            
            <param name="rectangle">
            Rectangle in which the graph is laid out.
            Control points of bundled edges should not fall outside of this rectangle.
            </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.AddEdgeDataForMovedEdges(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge})">
            <summary>
            Collects edge data from the specified edges
            </summary>
            
            <param name="edges">
            Edges whose data should be added to the collection
            </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.AddDataForAllEdges(Smrf.NodeXL.Core.IEdgeCollection)">
            <summary>
            Collects edge data from all edges in the specified collection.
            Used by the <see cref="M:Smrf.NodeXL.Layouts.EdgeBundler.BundleAllEdges(Smrf.NodeXL.Core.IGraph,System.Drawing.Rectangle)"/> method.
            </summary>
            
            <param name="edges">
            Collection of edges whose data should be collected
            </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.AddEdgeData(Smrf.NodeXL.Core.IEdge)">
            <summary>
            Collects data from the specified edge
            </summary>
            
            <param name="e">
            Edge to collect data from
            </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.AddAllExistingData(Smrf.NodeXL.Core.IEdgeCollection)">
            <summary>
            Collects edge data from all edges in the specified collection.
            Used for edges that already have control points metadata.
            </summary>
            
            <param name="edges">
            Collection of edges whose data should be collected
            </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.AddExistingData(Smrf.NodeXL.Core.IEdge)">
            <summary>
            Collects data from the specified edge.
            Used for edges that already have control points metadata.
            </summary>
            
            <param name="e">
            Edge to collect data from
            </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.AngleCompatibility(Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData,Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData)">
            <summary>
            Calculates angle compatibility of the two edges
            </summary>
            
            <param name="ed1">
            First edge to be used in calculation
            </param>
            
            <param name="ed2">
            Second edge to be used in calculation
            </param>
            
            <returns>
            Angle compatibility coefficient ranging from 0 to 1
            </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.PositionCompatibility(Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData,Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData)">
            <summary>
            Calculates position compatibility of the two edges
            </summary>
            
            <param name="ed1">
            First edge to be used in calculation
            </param>
            
            <param name="ed2">
            Second edge to be used in calculation
            </param>
            
            <returns>
            Position compatibility coefficient ranging from 0 to 1
            </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.ScaleCompatibility(Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData,Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData)">
            <summary>
            Calculates scale compatibility of the two edges
            </summary>
            
            <param name="ed1">
            First edge to be used in calculation
            </param>
            
            <param name="ed2">
            Second edge to be used in calculation
            </param>
            
            <returns>
            Scale compatibility coefficient ranging from 0 to 1
            </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.CalculateCompatibility(Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData,Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData)">
            <summary>
            Calculates compatibility of the two edges.
            Combines angle, position, scale, and visibility compatibility coefficient.
            </summary>
            
            <param name="ed1">
            First edge to be used in calculation
            </param>
            
            <param name="ed2">
            Second edge to be used in calculation
            </param>
            
            <returns>
            Compatibility coefficient ranging from 0 to 1
            </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.VisibilityCompatibility(Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData,Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData)">
            <summary>
            Calculates visibility compatibility of the two edges.
            Uses lower of the two calculated visibility coefficients.
            </summary>
            
            <param name="ed1">
            First edge to be used in calculation
            </param>
            
            <param name="ed2">
            Second edge to be used in calculation
            </param>
            
            <returns>
            Visibility compatibility coefficient ranging from 0 to 1
            </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.VisibilityCoefficient(Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData,Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData)">
            <summary>
            Calculates visibility coefficient of the two edges.
            </summary>
            
            <param name="ed1">
            First edge to be used in calculation
            </param>
            
            <param name="ed2">
            Second edge to be used in calculation
            </param>
            
            <returns>
            Compatibility coefficient ranging from 0 to 1
            </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.CalculateDirectedness(Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData,Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData)">
            <summary>
            Calculates directedness of the two edges.
            </summary>
            
            <param name="ed1">
            First edge to be used in calculation
            </param>
            
            <param name="ed2">
            Second edge to be used in calculation
            </param>
            
            <returns>
            True if edges have roughly the same direction, false otherwise
            </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.Intersects(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@,System.Single@)">
            <summary>
            Finds an intersection point of the two lines
            </summary>
            
            <param name="p1">
            First point of the first line
            </param>
            
            <param name="p2">
            Second point of the first line
            </param>
            
            <param name="q1">
            First point of the second line
            </param>
            
            <param name="q2">
            Second point of the second line
            </param>
            
            <param name="intersection">
            Point of intersection
            </param>
            
            <param name="rp">
            Parameter used for determining on which segment the intersection point lies
            </param>
            
            <returns>
            True if lines are not parallel, false otherwise
            </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.FindCompatibleEdges(System.Collections.Generic.Dictionary{Smrf.NodeXL.Layouts.EdgeBundler.KeyPair,Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData})">
            <summary>
            Finds compatible edges for the specified set of edges
            </summary>
            
            <param name="edgeSet">
            Edges for which we should find compatible edges
            </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.DivideAllEdges(System.Int32)">
            <summary>
            Divides edges into segments by adding subdivision points to them
            </summary>
            
            <param name="subdivisionPointsNum">
            Number of subdivision points that should be created
            </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.ResetMovedEdges">
            <summary>
            Straightens moved edges.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.DivideEdge(Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData,System.Int32)">
            <summary>
            Divides an edge into segments by adding subdivision points to it
            </summary>
            
            <param name="ed">
            Edge data that is used for creating new subdivision points
            </param>
            
            <param name="subdivisionPointsNum">
            Number of subdivision points that should be created
            </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.DoubleSubdivisionPoints(Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData)">
            <summary>
            Doubles subdivision points for an edge by adding one new subdivision point between each two
            </summary>
            
            <param name="ed">
            Edge data that contains subdivision points to be doubled
            </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.DoubleSubdivisionPointsForAllEdges">
            <summary>
            Doubles subdivision points for all edges
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.CalculateNewControlPoints(System.Object)">
            <summary>
            Calculates new positions for the control points of an edge by applying elastic and electrostatic forces to them
            </summary>
            
            <param name="o">
            Edge data that contains subdivision points to be moved
            </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.MoveControlPoints(System.Collections.Generic.Dictionary{Smrf.NodeXL.Layouts.EdgeBundler.KeyPair,Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData})">
            <summary>
            Moves control points for the specified edges
            </summary>
            
            <param name="groupsToMove">
            Edges that should be moved
            </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.StraightenEdgesInternally(System.Collections.Generic.Dictionary{Smrf.NodeXL.Layouts.EdgeBundler.KeyPair,Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData},System.Single)">
            <summary>
            Straightens the edges using internal data sturctures
            </summary>
            
            <param name="groupsToStraighten">
            Groups of edges that should be straightened
            </param>
            
            <param name="s">
            Specifies the amount of straightening, from 0 to 1
            </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.EdgeBundler.StraightenEdges(Smrf.NodeXL.Core.IGraph,System.Single)">
            <summary>
            Moves the control points of all the edges of the graph closer to their original position on the straight edge
            </summary>
            
            <param name="graph">
            Graph whose edges should be straightened
            </param>
            
            <param name="s">
            Specifies the amount of straightening, from 0 to 1
            </param>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.EdgeBundler.SubdivisionPoints">
            <summary>
            Gets or sets the number of subdivision points each edge should have.
            Default value is 15.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.EdgeBundler.Iterations">
            <summary>
            Gets or sets the number of iterations for moving the control points.
            Default value is 50.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.EdgeBundler.RepulseOpposite">
            <summary>
            Gets or sets the value indicating whether opposite edges should attracts or repulse each other.
            Default value is false.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.EdgeBundler.UseThreading">
            <summary>
            Gets or sets the the value that determines if multiple threads should be used for the calculations.
            Default value is true.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.EdgeBundler.SpringConstant">
            <summary>
            Gets or sets the value for the spring constant.
            Edges are more easely bent if the value is lower.
            Default value is 10.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.EdgeBundler.Threshold">
            <summary>
            Gets or sets the treshold for the edge compatibility.
            Every pair of edges has the compatibility coefficient assigned to it.
            Range of the coefficient is from 0 to 1.
            Edges that have coefficient lower than the treshold between them are not considered for interaction.
            Default value is 0.2.
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.EdgeBundler.RepulsionCoefficient">
            <summary>
            If repulseOpposite is true, this determines how much will opposite edges repulse eachother.
            From -1 to 0.
            Default is -0.1
            </summary>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.EdgeBundler.Straightening">
            <summary>
            Gets or sets the amount of straightening that will be applied after every bundling.
            This can produce better-looking graphs.
            Default value is 0.15, range is from 0 to 1.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.EdgeBundler.EdgeGroupData">
            <summary>
            Class used for storing the needed edge metadata
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.EdgeBundler.GroupPairData">
            <summary>
            Class used for storing data for a pair of groups of edges (direction and compatibility coefficient)
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.VectorTools">
            <summary>
            Used for vector calculations
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.GraphBinner">
            <summary>
            Lays out a graph's smaller components in bins.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.GraphBinner.BinMargin">
            Margin within each bin.
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GraphBinner.#ctor">
            <summary>
            Initializes a new instance of the GraphBinner class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GraphBinner.LayOutSmallerComponentsInBins(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},Smrf.NodeXL.Layouts.LayoutContext,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex}@,System.Drawing.Rectangle@)">
             <summary>
             Lays out a graph's smaller components in bins.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph must have at least one vertex.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection must have at least one vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle"/> must have non-zero width and
             height.
             </param>
            
             <param name="remainingVertices">
             Where the vertices that have not been binned get stored if true is
             returned.
             </param>
            
             <param name="remainingRectangle">
             Where the remaining rectangle gets stored if true is returned.
             </param>
            
             <remarks>
             This method splits <paramref name="verticesToLayOut"/> into strongly
             connected components, synchronously lays out each of the smaller
             components using <see cref="T:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout"/>, and places
             the components along the bottom of the rectangle.  If there are any
             vertices remaining and any space remaining, they get stored at
             <paramref name="remainingVertices"/> and <paramref name="remainingRectangle"/> and true is returned.  Otherwise, false is
             returned.
            
             <para>
             If true is returned, the caller should lay out the remaining vertices
             in the remaining rectangle.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GraphBinner.LayOutComponentInBin(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex},System.Drawing.Rectangle)">
             <summary>
             Lays out a graph component in a bin.
             </summary>
            
             <param name="oGraph">
             Graph being laid out.
             </param>
            
             <param name="oVerticesInComponent">
             The vertices in the bin.
             </param>
            
             <param name="oBinRectangle">
             The bin rectangle to lay out the vertices within.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GraphBinner.GetRemainingVertices(System.Collections.Generic.IList{System.Collections.Generic.LinkedList{Smrf.NodeXL.Core.IVertex}},System.Int32)">
             <summary>
             Copies the remaining vertices into an array.
             </summary>
            
             <param name="oComponents">
             The graph's strongly connected components.
             </param>
            
             <param name="iFirstRemainingComponent">
             Index of the first remaining component in <paramref
             name="oComponents" />.
             </param>
            
             <returns>
             A collection of remaining vertices that have not been binned.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GraphBinner.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.GraphBinner.m_iMaximumVerticesPerBin">
            The maximum number of vertices a binned component can have.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.GraphBinner.m_iBinLength">
            Height and width of each bin, in graph rectangle units.
        </member>
        <member name="P:Smrf.NodeXL.Layouts.GraphBinner.MaximumVerticesPerBin">
             <summary>
             Gets or sets the maximum number of vertices a binned component can
             have.
             </summary>
            
             <value>
             The maximum number of vertices a binned component can have.  The
             default value is 3.
             </value>
            
             <remarks>
             If a strongly connected component of the graph has <see cref="P:Smrf.NodeXL.Layouts.GraphBinner.MaximumVerticesPerBin"/> vertices or fewer, the component is
             placed in a bin.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.GraphBinner.BinLength">
             <summary>
             Gets or sets the height and width of each bin, in graph rectangle
             units.
             </summary>
            
             <value>
             The height and width of each bin, in graph rectangle units.  The
             default value is 16.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.PackedGroupRectangleCalculator">
             <summary>
             Calculates a rectangle for each group of vertices.
             </summary>
            
             <remarks>
             This class is used when a BoxLayoutAlgorithm of <see cref="F:Smrf.NodeXL.Layouts.BoxLayoutAlgorithm.PackedRectangles"/> is specified.
            
             <para>
             All methods are static.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.PackedGroupRectangleCalculator.CalculateGroupRectangles(System.Drawing.Rectangle,System.Collections.Generic.IList{Smrf.NodeXL.Core.GroupInfo},System.Double)">
             <summary>
             Calculates a rectangle for each group of vertices.
             </summary>
            
             <param name="graphRectangle">
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being laid out within.
             </param>
            
             <param name="sortedGroups">
             List of <see cref="T:Smrf.NodeXL.Core.GroupInfo"/> objects, one for each group of
             vertices.  Must be sorted in descending order of the number of vertices
             in each group.  There must be at least one vertex in each group.
             </param>
             
             <param name="alpha">
             The factor by which the center group's size should be reduced if all groups
             do not fit in the screen space
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.PackedGroupRectangleCalculator.LayoutAllGroupsInU(System.Drawing.Rectangle,System.Collections.Generic.IList{Smrf.NodeXL.Core.GroupInfo},System.Double,System.Double,System.Double,System.Int32,System.Double)">
             <summary>
             Determines a rectangle for every group. Places one group at top center and arranges the rest around it in a U
             </summary>
            
             <param name="graphRectangle">
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being laid out within.
             </param>
            
             <param name="sortedGroups">
             List of <see cref="T:Smrf.NodeXL.Core.GroupInfo"/> objects, one for each group of
             vertices.  Must be sorted in descending order of the connectivity
             There must be at least one vertex in each group.
             </param>
            
             <param name="alpha">
             The factor by which gamma is to be reduced if all groups do not fit in the graph rectangle
             </param>
             
             <param name="gamma">
             The fraction of space occupied by the first (center) group
             </param>
            
             <param name="ARs">
             Aspect ratio of graphRectangle
             </param>
            
             <param name="iSortedGroupCount">
             Total number of groups to be placed (including the first/center one)
             </param>
            
             <param name="dTotalNumberOfVertices">
             Total number of vertices in the graph
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.PackedGroupRectangleCalculator.LayoutAllGroupsInDonut(System.Drawing.Rectangle,System.Collections.Generic.IList{Smrf.NodeXL.Core.GroupInfo},System.Double,System.Double,System.Double,System.Int32,System.Double)">
             <summary>
             Determines a rectangle for every group. Places one group at center and arranges the rest around it
             </summary>
            
             <param name="graphRectangle">
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being laid out within.
             </param>
            
             <param name="sortedGroups">
             List of <see cref="T:Smrf.NodeXL.Core.GroupInfo"/> objects, one for each group of
             vertices.  Must be sorted in descending order of the connectivity
             There must be at least one vertex in each group.
             </param>
            
             <param name="alpha">
             The factor by which gamma is to be reduced if all groups do not fit in the graph rectangle
             </param>
             
             <param name="gamma">
             The fraction of space occupied by the first (center) group
             </param>
            
             <param name="ARs">
             Aspect ratio of graphRectangle
             </param>
            
             <param name="iSortedGroupCount">
             Total number of groups to be placed (including the first/center one)
             </param>
            
             <param name="dTotalNumberOfVertices">
             Total number of vertices in the graph
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.PackedGroupRectangleCalculator.ArrangeRemainingGroupsInFreeSpaces(System.Drawing.Rectangle,System.Collections.Generic.IList{Smrf.NodeXL.Core.GroupInfo},System.Double,System.Int32,System.Double)">
             <summary>
             Makes rectangle assignments to the groups left after placing the center/first group from the free space list
             </summary>
            
             <param name="graphRectangle">
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being laid out within.
             </param>
            
             <param name="sortedGroups">
             List of <see cref="T:Smrf.NodeXL.Core.GroupInfo"/> objects, one for each group of
             vertices.  Must be sorted in descending order of the connectivity
             There must be at least one vertex in each group.
             </param>
            
             <param name="gamma">
             The fraction of space occupied by the first (center) group
             </param>
            
             <param name="iSortedGroupCount">
             Total number of groups to be placed (including the first/center one)
             </param>
            
             <param name="dTotalNumberOfVertices">
             Total number of vertices in the graph
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.PackedGroupRectangleCalculator.PlaceGroupInFreeBox(Smrf.NodeXL.Core.GroupInfo,System.Double,Smrf.NodeXL.Layouts.FreeSpaceBox)">
             <summary>
             Places the group in the free box provided as a parameter
             </summary>
            
             <param name="groupToBePlaced">
            The group to be placed
             </param>
            
             <param name="groupArea">
            Area of the group to be placed. It is passed as a parameter to reduce computation
             </param>
            
             <param name="freeBox">
            The free space box in which group is to be placed
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.PackedGroupRectangleCalculator.RecalculateFreeSpace(System.Collections.Generic.LinkedListNode{Smrf.NodeXL.Layouts.FreeSpaceBox},System.Drawing.RectangleF)">
             <summary>
             Recalculates the free space
             </summary>
            
             <param name="freeSpaceBoxNode">
            The free space box in which group is was placed (this box is not in linked list anymore
             </param>
             
             <param name="boxPlaced">
            The group rectangle that was placed in the above free space box
             </param>
             
             <remarks>
             This  is for spiral layout
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.FreeSpaceBox">
             <summary>
             Manages the various free space boxes that are available
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.FreeSpaceBox.boxRectangle">
            <summary>
            The underlying RectangleF of this FreeSpaceBox
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.FreeSpaceBox.orientation">
            <summary>
            Defines the orientation of this box
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.FreeSpaceBox.#ctor(System.Single,System.Single,System.Single,System.Single,Smrf.NodeXL.Layouts.FreeSpaceBox.Orientation)">
            <summary>
            This constructor sets the box boundaries and orientation
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.FreeSpaceBox.GetArea">
            <summary>
            Gets the area of a FreeSpaceBox
            </summary>
            
            <returns>
            The area of this box's RectangleF
            </returns>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.FreeSpaceBox.Orientation">
            <summary>
            Specifies horizontal or vertical orientation for a group box
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.FreeSpaceBox.Orientation.Horiz">
            <summary>
            Horizonal orientation
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.FreeSpaceBox.Orientation.Vert">
            <summary>
            Vertical orientation
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.GroupLayoutDrawingInfo">
             <summary>
             Stores information about how groups and the edges between them should be
             drawn when the graph is laid out using groups.
             </summary>
            
             <remarks>
             An instance of this class is added to the graph when <see cref="P:Smrf.NodeXL.Layouts.ILayout.LayoutStyle"/> is set to <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GroupLayoutDrawingInfo.#ctor(System.Collections.Generic.IList{Smrf.NodeXL.Core.GroupInfo},System.Double,System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IntergroupEdgeInfo})">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Layouts.GroupLayoutDrawingInfo"/>
             class.
             </summary>
            
             <param name="groupsToDraw">
             The groups to draw.
             </param>
            
             <param name="penWidth">
             The width of the pen used to draw group rectangles.  If 0, group
             rectangles shouldn't be drawn.
             </param>
            
             <param name="combinedIntergroupEdges">
             A collection of combined intergroup edges, or null if intergroup edges
             haven't been combined.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GroupLayoutDrawingInfo.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.GroupLayoutDrawingInfo.m_oGroupsToDraw">
            The groups to draw.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.GroupLayoutDrawingInfo.m_dPenWidth">
            The width of the pen to use when drawing the group rectangles, in WPF
            units, or 0 to not draw rectangles.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.GroupLayoutDrawingInfo.m_oCombinedIntergroupEdges">
            A collection of combined intergroup edges, or null.
        </member>
        <member name="P:Smrf.NodeXL.Layouts.GroupLayoutDrawingInfo.GroupsToDraw">
             <summary>
             Gets the groups to draw.
             </summary>
            
             <value>
             A collection of the groups to draw.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.GroupLayoutDrawingInfo.PenWidth">
             <summary>
             Gets the width of the pen to use when drawing the group rectangles.
             </summary>
            
             <value>
             The pen width, in WPF units.  If 0, group rectangles shouldn't be
             drawn.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Layouts.GroupLayoutDrawingInfo.CombinedIntergroupEdges">
             <summary>
             Gets a collection of the combined intergroup edges.
             </summary>
            
             <value>
             A collection of combined intergroup edges, or null if intergroup edges
             haven't been combined.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.GroupMetadataManager">
             <summary>
             Manages the metadata that gets stored on the graph during layout when <see cref="P:Smrf.NodeXL.Layouts.LayoutBase.LayoutStyle"/> is set to <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GroupMetadataManager.OnLayoutBegin(Smrf.NodeXL.Core.IGraph)">
             <summary>
             Performs required tasks when a layout begins.
             </summary>
            
             <param name="graph">
             The graph being laid out.
             </param>
            
             <remarks>
             This method should be called at the beginning of the layout process,
             regardless of the value of <see cref="P:Smrf.NodeXL.Layouts.LayoutBase.LayoutStyle"/>.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GroupMetadataManager.OnLayoutUsingGroupsEnd(Smrf.NodeXL.Core.IGraph,System.Collections.Generic.IList{Smrf.NodeXL.Core.GroupInfo},System.Double,Smrf.NodeXL.Layouts.IntergroupEdgeStyle)">
             <summary>
             Performs required tasks when a layout with the style <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.UseGroups"/> ends.
             </summary>
            
             <param name="graph">
             The graph being laid out.
             </param>
            
             <param name="laidOutGroups">
             List of <see cref="T:Smrf.NodeXL.Core.GroupInfo"/> objects, one for each group of
             vertices that was laid out.  These are sorted in descending order of
             the number of vertices in each group.  There is at least one vertex in
             each group.
             </param>
            
             <param name="groupRectanglePenWidth">
             The width of the pen used to draw group rectangles.  If 0, group
             rectangles aren't drawn.
             </param>
            
             <param name="intergroupEdgeStyle">
             Specifies how the edges that connect vertices in different groups
             should be shown.
             </param>
            
             <remarks>
             This method should be called at the end of the layout process if <see cref="P:Smrf.NodeXL.Layouts.LayoutBase.LayoutStyle"/> is <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.UseGroups"/>.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GroupMetadataManager.TryGetGroupLayoutDrawingInfo(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.GroupLayoutDrawingInfo@)">
             <summary>
             Attempts to get group drawing information stored in a graph's metadata.
             </summary>
            
             <param name="graph">
             The graph to get the information from.
             </param>
            
             <param name="groupLayoutDrawingInfo">
             Where the information get stored if true is returned.
             </param>
            
             <returns>
             true if the information was obtained.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GroupMetadataManager.TransformGroupRectangles(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext,Smrf.NodeXL.Layouts.LayoutContext)">
             <summary>
             Transforms a graph's group rectangles if they exist.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Smrf.NodeXL.Layouts.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Smrf.NodeXL.Layouts.ILayout.LayOutGraph(Smrf.NodeXL.Core.IGraph,Smrf.NodeXL.Layouts.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to objects needed to transform the graph's layout.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GroupMetadataManager.IncidentEdgeShouldBeHidden(Smrf.NodeXL.Core.IEdge,Smrf.NodeXL.Core.IVertex,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
             <summary>
             Determines whether an incident edge should be hidden.
             </summary>
            
             <param name="oIncidentEdge">
             The incident edge to test.
             </param>
            
             <param name="oVertex">
             The vertex that <paramref name="oIncidentEdge" /> is incident to.
             </param>
            
             <param name="iGroupIndex">
             The index of <paramref name="oVertex" /> in <paramref
             name="oGroupIndexDictionary" />.
             </param>
            
             <param name="oGroupIndexDictionary">
             The key is the IVertex.ID and the value is the zero-based index of the
             laid-out group the vertex belongs to.
             </param>
            
             <returns>
             true if the incident edge should be hidden.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GroupMetadataManager.HideEdge(Smrf.NodeXL.Core.IEdge)">
             <summary>
             Hides an edge and saves its previous visibility.
             </summary>
            
             <param name="oEdge">
             The edge to hide.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GroupMetadataManager.TryGetEdgeVisibility(Smrf.NodeXL.Core.IEdge,System.String,Smrf.NodeXL.Core.VisibilityKeyValue@)">
             <summary>
             Attempts to get a visibility value from an edge.
             </summary>
            
             <param name="oEdge">
             The edge to get the visibility value from.
             </param>
            
             <param name="sKey">
             Name of the key where the visibility is stored.
             </param>
            
             <param name="eVisibility">
             Where the visibility value gets stored if true is returned.
             </param>
            
             <returns>
             true if the visibility was obtained.
             </returns>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.GroupRectangleCalculator">
             <summary>
             Calculates a rectangle for each group of vertices.
             </summary>
            
             <remarks>
             This class is used when a LayoutStyle of <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.UseGroups"/> is specified.
            
             <para>
             All methods are static.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GroupRectangleCalculator.CalculateGroupRectangles(System.Drawing.Rectangle,System.Collections.Generic.IList{Smrf.NodeXL.Core.GroupInfo})">
             <summary>
             Calculates a rectangle for each group of vertices.
             </summary>
            
             <param name="graphRectangle">
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being laid out within.
             </param>
            
             <param name="sortedGroups">
             List of <see cref="T:Smrf.NodeXL.Core.GroupInfo"/> objects, one for each group of
             vertices.  Must be sorted in descending order of the number of vertices
             in each group.  There must be at least one vertex in each group.
             </param>
            
             <remarks>
             This method sets the <see cref="P:Smrf.NodeXL.Core.GroupInfo.Rectangle"/> property for
             each group in <paramref name="sortedGroups"/>.  Some of the rectangles
             may be empty.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GroupRectangleCalculator.GetAreaPerVertex(System.Drawing.Rectangle,System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.GroupInfo})">
             <summary>
             Returns the area within the graph rectangle that will be taken up by
             each vertex.
             </summary>
            
             <param name="oGraphRectangle">
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being laid out within.
             </param>
            
             <param name="oGroups">
             GroupInfo objects.
             </param>
             
             <returns>
             Area within oGroupRectangle to allocate to each vertex.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GroupRectangleCalculator.InsertGroupsIntoRectangle(System.Collections.Generic.IList{Smrf.NodeXL.Core.GroupInfo},System.Drawing.RectangleF[],System.Drawing.RectangleF,System.Int32,System.Int32,System.Double,System.Double)">
             <summary>
             Inserts a set of groups into a parent rectangle.
             </summary>
            
             <param name="oSortedGroups">
             List of <see cref="T:Smrf.NodeXL.Core.GroupInfo"/> objects, one for each group of
             vertices.  Must be sorted in descending order of the number of vertices
             in each group.  There must be at least one vertex in each group.
             </param>
            
             <param name="aoGroupRectangles">
             Array of rectangles, one for each group in <paramref name="oSortedGroups"/>.
             </param>
            
             <param name="oParentRectangle">
             Parent rectangle the groups should be laid out within.  Can't be empty
             -- must have positive width and height.
             </param>
             
             <param name="iIndexOfFirstGroupToInsert">
             Zero-based index of the first group in <paramref name="oSortedGroups"/> to insert.
             </param>
            
             <param name="iIndexOfLastGroupToInsert">
             Zero-based index of the last group in <paramref name="oSortedGroups"/> to insert.
             </param>
            
             <param name="dVerticesSum">
             Sum of the vertex counts for the groups to be inserted.  Must be
             greater than zero.
             </param>
            
             <param name="dAreaPerVertex">
             The area within the graph rectangle that will be taken up by each
             vertex.
             </param>
             
             <remarks>
             This method inserts the specified groups in <paramref name="oSortedGroups"/> into <paramref name="oParentRectangle"/>.
            
             <para>
             If the rectangle is wider than it is tall, the groups are inserted on
             top of each other so that they fill the left part of the rectangle
             from top to bottom.  That probably leaves some space on the right side
             of the rectangle.
             </para>
            
             <para>
             If the rectangle is taller than it is wide, the groups are inserted to
             the right of each other so that they fill the or top of the rectangle,
             from left to right.  That probably leaves some space at the top or
             bottom of the rectangle.
             </para>
            
             <para>
             The algorithm presented in "Squarified Treemaps," by Mark Bruls, Kees
             Huizing, and Jarke J. van Wijk, always inserts larger groups at the
             lower left corner of the parent rectangle.  This method modifies the
             algorithm to insert larger groups at the upper left corner instead.
             </para>
            
             <para>
             Note that the results of this method call may not be optimal.  It's up
             to the caller to determine whether the results are good and to take
             corrective action if they are not.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GroupRectangleCalculator.GetRemainingEmptySpace(System.Collections.Generic.IList{Smrf.NodeXL.Core.GroupInfo},System.Drawing.RectangleF[],System.Drawing.RectangleF,System.Int32,System.Int32)">
             <summary>
             Returns a rectangle that contains the empty space not already filled by
             a set of inserted groups.
             </summary>
            
             <param name="oSortedGroups">
             List of <see cref="T:Smrf.NodeXL.Core.GroupInfo"/> objects, one for each group of
             vertices.  Must be sorted in descending order of the number of vertices
             in each group.  There must be at least one vertex in each group.
             </param>
            
             <param name="aoGroupRectangles">
             Array of rectangles, one for each group in <paramref name="oSortedGroups"/>.
             </param>
            
             <param name="oParentRectangle">
             Parent rectangle the groups should be laid out within.  Can't be empty
             -- must have positive width and height.
             </param>
             
             <param name="iIndexOfFirstInsertedGroup">
             Zero-based index of the first group that has already been inserted into
             <paramref name="oParentRectangle"/>.
             </param>
             
             <param name="iIndexOfLastInsertedGroup">
             Zero-based index of the last group that has already been inserted into
             <paramref name="oParentRectangle"/>.
             </param>
             
             <returns>
             New rectangle that contains the empty space.  May be empty.
             </returns>
             
             <remarks>
             If there is no empty space left, an empty rectangle is returned.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.GroupRectangleCalculator.CalculateAspectRatio(System.Drawing.RectangleF)">
             <summary>
             Calculates the aspect ratio of a rectangle.
             </summary>
            
             <param name="oRectangle">
             The rectangle to calculate the aspect ratio for.
             </param>
            
             <returns>
             Aspect ratio of the rectangle.
             </returns>
            
             <remarks>
             The aspect ratio is the ratio of the rectangle's longer dimension to
             its shorter dimension.  If the shorter dimension has a length of zero,
             Double.MaxValue is returned.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.IntergroupEdgeStyle">
             <summary>
             Specifies how the edges that connect vertices in different groups should
             be shown.
             </summary>
            
             <remarks>
             See <see cref="P:Smrf.NodeXL.Layouts.LayoutBase.IntergroupEdgeStyle"/> for more information.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.IntergroupEdgeStyle.Show">
            <summary>
            The intergroup edges are shown in the same manner as other edges.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.IntergroupEdgeStyle.Hide">
            <summary>
            The intergroup edges are hidden.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.IntergroupEdgeStyle.Combine">
            <summary>
            All edges between group A and group B are shown as a single edge whose
            width is proportional to the number of combined edges.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.LayoutContext">
            <summary>
            Provides access to objects needed for laying out a graph.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutContext.#ctor(System.Drawing.Rectangle)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Layouts.LayoutContext"/> class.
             </summary>
            
             <param name="graphRectangle">
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being laid out
             within.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutContext.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutContext.m_oGraphRectangle">
            The Rectangle the graph is being laid out within.
        </member>
        <member name="P:Smrf.NodeXL.Layouts.LayoutContext.GraphRectangle">
             <summary>
             Gets the <see cref="T:System.Drawing.Rectangle"/> the graph is being
             laid out within.
             </summary>
            
             <value>
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being laid out
             within.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.LayoutMetadataUtil">
             <summary>
             Utility methods for dealing with a graph's layout metadata.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutMetadataUtil.MarkGraphAsLaidOut(Smrf.NodeXL.Core.IGraph)">
             <summary>
             Marks a graph as having been laid out.
             </summary>
            
             <param name="graph">
             Graph that was laid out.
             </param>
            
             <remarks>
             This should be called after <paramref name="graph" /> has been
             successfully laid out.  It adds a metadata key to the graph.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutMetadataUtil.MarkGraphAsNotLaidOut(Smrf.NodeXL.Core.IGraph)">
             <summary>
             Removes the metadata that indicates a graph has been laid out.
             </summary>
            
             <param name="graph">
             The graph to remove the metadata from.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutMetadataUtil.GraphHasBeenLaidOut(Smrf.NodeXL.Core.IGraph)">
             <summary>
             Gets a flag indicating whether a graph has been laid out.
             </summary>
            
             <param name="graph">
             The graph to check.
             </param>
            
             <returns>
             true if the graph has been laid out.
             </returns>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.LayoutSaver">
             <summary>
             Saves and restores a layout.
             </summary>
            
             <remarks>
             Pass a laid-out graph to the constructor, which saves the graph's vertex
             locations and group rectangles in private data.   Call <see cref="M:Smrf.NodeXL.Layouts.LayoutSaver.RestoreLayout"/> to restore the vertex locations and group
             rectangles to their saved values.
            
             <para>
             The number of vertices and group rectangles must remain constant between
             the two calls.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutSaver.#ctor(Smrf.NodeXL.Core.IGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.Layouts.LayoutSaver"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutSaver.RestoreLayout">
            <summary>
            Restores the graph's vertices to their saved locations.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutSaver.TryGetGroupsToDraw(System.Collections.Generic.IList{Smrf.NodeXL.Core.GroupInfo}@)">
             <summary>
             Attempts to information about the groups that are drawn.
             </summary>
            
             <param name="oGroupsToDraw">
             Where the information get stored if true is returned.
             </param>
            
             <returns>
             true if the information was obtained.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.LayoutSaver.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutSaver.m_oGraph">
            Graph whose vertex locations have been saved in m_aoVertexLocations.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutSaver.m_aoVertexLocations">
            Array of the graph's vertex locations.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutSaver.m_aoGroupRectangles">
            Group rectangles, or null if the graph isn't laid out using groups.
        </member>
        <member name="T:Smrf.NodeXL.Layouts.LayoutStyle">
             <summary>
             Specifies the style to use when laying out the graph.
             </summary>
            
             <remarks>
             A layout style specifies an optional special treatment that can be applied
             to the graph's groups or strongly connected components when laying out the
             graph.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutStyle.Normal">
            <summary>
            If the entire graph is being laid out, the entire graph rectangle is
            used.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutStyle.UseGroups">
             <summary>
             If the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.GroupInfo"/> key is present on
             the graph and the entire graph is being laid out, each of the graph's
             groups is laid out within a box using the algorithm implemented by the
             <see cref="T:Smrf.NodeXL.Layouts.ILayout"/> implementation.  The box size is proportional
             to the number of vertices in the group and the boxes are arranged using
             the selected <see cref="T:Smrf.NodeXL.Layouts.BoxLayoutAlgorithm"/>.  Otherwise, 
             <see cref="F:Smrf.NodeXL.Layouts.LayoutStyle.Normal"/> is used.
            
             <para>
             This layout style is sometimes called "group in a box."
             </para>
            
             </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.LayoutStyle.UseBinning">
            <summary>
            If <see cref="P:Smrf.NodeXL.Layouts.ILayout.SupportsBinning"/> is true and the entire graph
            is being laid out, the graph is split into strongly connected
            components, the smaller components are laid out and placed along the
            bottom of the rectangle using the <see cref="T:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout"/>, and the remaining components are
            laid out within the remaining rectangle using the algorithm implemented
            by the <see cref="T:Smrf.NodeXL.Layouts.ILayout"/> implementation.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Layouts.RectangleBinner">
             <summary>
             Splits a parent rectangle into "bin" rectangles.
             </summary>
            
             <remarks>
             A bin is a small square that fits into a parent rectangle.  This class
             splits the parent into consecutive bins, running from left to right along
             the bottom of the parent and then moving up a row.
            
             <para>
             Pass the parent rectangle to the constructor, along with the length of the
             bin.  Call <see cref="M:Smrf.NodeXL.Layouts.RectangleBinner.TryGetNextBin(System.Drawing.Rectangle@)"/> to get the next bin, and call <see cref="M:Smrf.NodeXL.Layouts.RectangleBinner.TryGetRemainingRectangle(System.Drawing.Rectangle@)"/> to get any space not occupied by the
             returned bins.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.RectangleBinner.#ctor(System.Drawing.Rectangle,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Layouts.RectangleBinner"/> class.
             </summary>
            
             <param name="parent">
             The parent rectangle to split into bins.
             </param>
            
             <param name="binLength">
             Length and width of each bin square.  Must be greater than zero.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.RectangleBinner.TryGetNextBin(System.Drawing.Rectangle@)">
             <summary>
             Attempts to get the next bin.
             </summary>
            
             <param name="nextBin">
             Where the bin gets stored if true is returned.
             </param>
            
             <returns>
             true if there is enough room left for another bin.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.RectangleBinner.TryGetRemainingRectangle(System.Drawing.Rectangle@)">
             <summary>
             Attempts to get the remaining space not occupied by the bins that have
             been returned by <see cref="M:Smrf.NodeXL.Layouts.RectangleBinner.TryGetNextBin(System.Drawing.Rectangle@)"/>.
             </summary>
            
             <param name="remainingRectangle">
             Where the remaining rectangle gets stored if true is returned.
             </param>
            
             <returns>
             true if there is any room remaining.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.RectangleBinner.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Layouts.RectangleBinner.m_oParent">
            Parent rectangle to split into bins.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.RectangleBinner.m_iBinLength">
            Length and width of each bin square.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.RectangleBinner.m_oLastBin">
            The last bin returned by TryGetNextBin(), or a bin that is one position
            out of bounds if TryGetNextBin() hasn't been called yet.
        </member>
        <member name="F:Smrf.NodeXL.Layouts.RectangleBinner.m_bBinReturned">
            true if at least one bin has been returned.
        </member>
        <member name="T:Smrf.NodeXL.Layouts.VertexGridSnapper">
             <summary>
             Snaps vertices to a grid.
             </summary>
            
             <remarks>
             All methods are static.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.VertexGridSnapper.SnapVerticesToGrid(Smrf.NodeXL.Core.IGraph,System.Int32)">
             <summary>
             Snaps a graph's vertices to a grid.
             </summary>
            
             <param name="graph">
             Graph whose vertices should be snapped to a grid.  The graph should
             already have been laid out.
             </param>
            
             <param name="gridSize">
             Distance between gridlines.  Must be greater than zero.
             </param>
            
             <remarks>
             This method can be used to separate vertices that obscure each other
             by snapping them to the nearest grid location, using a specified grid
             size.  The graph should be laid out before this method is called.
            
             <para>
             Snapping the vertices to a grid can cause them to fall outside the
             rectangle in which they were originally laid out.  If the
             Visualization.Wpf.VertexDrawer class is used to draw the vertices, that
             class will automatically take care of moving such vertices back within
             the rectangle.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Layouts.VertexGridSnapper.SnapCoordinateToGrid(System.Single,System.Single)">
             <summary>
             Snaps an x- or y-coordinate to a grid.
             </summary>
            
             <param name="fCoordinate">
             The x- or y-coordinate to snap to a grid.
             </param>
            
             <param name="fGridSize">
             Distance between gridlines.  Must be an itegral multiple greater than
             zero.
             </param>
        </member>
    </members>
</doc>
