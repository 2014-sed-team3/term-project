<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Smrf.NodeXL.Control.Wpf</name>
    </assembly>
    <members>
        <member name="T:Smrf.AppLib.ArgumentChecker">
             <summary>
             Contains methods that check method arguments and property values.
             </summary>
            
             <remarks>
             This can be used by a class that wants to check values passed to its
             property setters and arguments passed to its methods.  The CheckXXX()
             methods in this class throw an exception if a parameter value or method
             argument is invalid.
            
             <para>
             This class is marked internal to avoid compiler error CS0433 ("The
             type ... exists in both ...") when an executable references two or more
             assemblies that use this class.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.#ctor(System.String)">
             <summary>
             Initializes a new instance of the ArgumentChecker class.
             </summary>
            
             <param name="sOwnerClassName">
             Class name of the object that created this object.  The class name gets
             prepended to all exception messages.  Sample: "MyClass".
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotNull(System.String,System.Object)">
             <summary>
             Throws an exception if a property value is null.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotEmpty(System.String,System.String)">
             <summary>
             Throws an exception if a string property value is null or has a length
             of zero.
             </summary>
            
             <param name="sPropertyName">
             Name of the string property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Double)">
             <summary>
             Throws an exception if a Double property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Decimal)">
             <summary>
             Throws an exception if a Decimal property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="decPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotNegative(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is negative.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
            
             <param name="sInvalidValue">
             Invalid value for <paramref name="sPropertyValue" />.  Can't be null.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iInvalidValue">
             Invalid value for <paramref name="iPropertyValue" />.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Int32,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="iMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Single,System.Single,System.Single)">
             <summary>
             Throws an exception if a Single property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="fPropertyValue">
             Property value to check.
             </param>
            
             <param name="fMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="fMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Double,System.Double,System.Double)">
             <summary>
             Throws an exception if a Double property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="dPropertyValue">
             Property value to check.
             </param>
            
             <param name="dMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="dMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckPropertyIsDefined(System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a property value is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oPropertyValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentNotNull(System.String,System.String,System.Object)">
             <summary>
             Throws an exception if a method argument is null.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentNotEmpty(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string method argument is null or has a length
             of zero.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="sArgumentValue">
             Argument value to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Double)">
             <summary>
             Throws an exception if a Double method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="dArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentInRange(System.String,System.String,System.Double,System.Double,System.Double)">
             <summary>
             Throws an exception if a Double method argument is not within a
             specified range.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="dArgumentValue">
             Argument to check.
             </param>
            
             <param name="dMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="dMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.CheckArgumentIsDefined(System.String,System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a method argument is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oArgumentValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is an inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Smrf.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is no inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Smrf.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is an inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Smrf.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is no inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Smrf.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Smrf.AppLib.ArgumentChecker.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.AppLib.ArgumentChecker.m_sOwnerClassName">
            Class name of the object that created this object.
        </member>
        <member name="T:Smrf.ChartLib.ChartUtil">
            <summary>
            Static utility methods that can be used in the implementation of charting
            components.
            </summary>
        </member>
        <member name="M:Smrf.ChartLib.ChartUtil.GetAxisGridlineValues(System.Double,System.Double,System.Double[]@,System.Int32@)">
             <summary>
             Gets an array of Double values for drawing axis gridlines on a linear
             axis, along with the number of decimal places to use when formatting
             the values.
             </summary>
            
             <param name="limit1">
             Value that will be displayed at the left end of the axis.
             </param>
            
             <param name="limit2">
             Value that will be displayed at the right end of the axis.  This does
             not have to be greater than <paramref name="limit1" />.
             </param>
            
             <param name="gridlineValues">
             Where the array of values to draw gridlines for gets stored.  Sample
             arrays: {0, 20, 40, 60, 80, 100}, {-3.5, -3.0, -2.5},
             {0.8, 0.9, 1.0, 1.1, 1.2}.  The values are always in increasing order,
             even if <paramref name="limit2" /> is less than <paramref
             name="limit1" />.
             </param>
            
             <param name="decimalPlacesToShow">
             Where the number of decimal places to use when formatting the gridline
             values gets stored.
             </param>
            
             <remarks>
             Given a linear chart axis that will display a specified range of
             values, this method returns an array of values for which gridlines
             should be drawn.  The values are computed in such a way that 1) the
             minimum gridline value is less than or equal to the lesser of <paramref
             name="limit1" /> and <paramref name="limit2" />; 2) the maximum
             gridline value is greater than or equal to the larger of <paramref
             name="limit2" /> and <paramref name="limit1" />; 3) the number of
             gridline values is as close to 6 as possible, which makes the number of
             axis intervals as close to 5 as possible; and 4) the difference between
             gridlines values is n*2, n*5, or n*10, where n is a power of 10.
             </remarks>
        </member>
        <member name="M:Smrf.ChartLib.ChartUtil.GetLogAxisGridlineValues(System.Double,System.Double)">
             <summary>
             Gets an array of values for drawing axis gridlines on a log axis.
             </summary>
            
             <param name="limit1">
             Value that will be displayed at the left end of the axis.
             </param>
            
             <param name="limit2">
             Value that will be displayed at the right end of the axis.  This does
             not have to be greater than <paramref name="limit1" />.
             </param>
            
             <returns>
             Array of values to draw gridlines for.  Sample arrays: {1, 10, 100},
             {0.1, 1.0, 10}.
             </returns>
            
             <remarks>
             Given a log chart axis that will display a specified range of values,
             this method returns an array of values for which gridlines should be
             drawn.  The values are computed in such a way that 1) the minimum
             gridline value is the largest power of 10 that is less than or equal to
             the lesser of <paramref name="limit1" /> and <paramref
             name="limit2" />; 2) the maximum gridline value is the smallest power
             of 10 that is greater than or equal to the larger of <paramref
             name="limit1" /> and <paramref name="limit2" />; 3) there is a gridline
             for each power of 10 in between the minimum and maximum gridline
             values.
             </remarks>
        </member>
        <member name="T:Smrf.GraphicsLib.ToolTipTrackerBase">
             <summary>
             Helper class for displaying tooltips.
             </summary>
            
             <remarks>
             This is meant for use by a Control object that displays various objects
             within its window and wants to show a tooltip for each object.  The ToolTip
             class in the FCL makes it easy to show a single tooltip for an entire
             control, but it does not support different tooltips for different parts of
             the control's window.
            
             <para>
             To use ToolTipTracker, call <see cref="M:Smrf.GraphicsLib.ToolTipTrackerBase.OnMouseMoveOverObject(System.Object)"/> from the
             control's MouseMove event handler.  If the mouse is currently over an
             object that has a tooltip associated with it, pass the object as the
             method's oObjectToTrack parameter.  Otherwise, pass null.  Also, call
             <see cref="M:Smrf.GraphicsLib.ToolTipTrackerBase.OnMouseMoveOverObject(System.Object)"/> with a null parameter from the
             control's MouseLeave event handler.
             </para>
            
             <para>
             If the mouse remains over an object for a period of <see cref="P:Smrf.GraphicsLib.ToolTipTrackerBase.ShowDelayMs"/> milliseconds, ToolTipTracker fires a <see cref="E:Smrf.GraphicsLib.ToolTipTrackerBase.ShowToolTip"/> event.  The event arguments include the object being
             tracked.
             </para>
            
             <para>
             A <see cref="E:Smrf.GraphicsLib.ToolTipTrackerBase.HideToolTip"/> event is fired when the tooltip should be
             hidden.  This occurs <see cref="P:Smrf.GraphicsLib.ToolTipTrackerBase.HideDelayMs"/> after the <see cref="E:Smrf.GraphicsLib.ToolTipTrackerBase.ShowToolTip"/> event fires if the mouse remains over the object, or
             immediately if OnMouseMoveOverObject(null) is called.
             </para>
            
             <para>
             Note that ToolTipTracker does not actually show or hide the tooltip; that's
             up to the application.  The easiest way to do this is to create a child
             ToolTipPanel control and call its Show and Hide methods in response to the
             <see cref="E:Smrf.GraphicsLib.ToolTipTrackerBase.ShowToolTip"/> and <see cref="E:Smrf.GraphicsLib.ToolTipTrackerBase.HideToolTip"/> events.
             </para>
            
             <para>
             If the mouse is moved to another object within <see cref="P:Smrf.GraphicsLib.ToolTipTrackerBase.ReshowDelayMs"/>
             milliseconds, another <see cref="E:Smrf.GraphicsLib.ToolTipTrackerBase.ShowToolTip"/> event is fired.
             Otherwise, the waiting period reverts to <see cref="P:Smrf.GraphicsLib.ToolTipTrackerBase.ShowDelayMs"/>.
             </para>
            
             <para>
             Call <see cref="M:Smrf.GraphicsLib.ToolTipTrackerBase.Reset"/> to reset ToolTipTracker to its initial state.
             This forces a <see cref="E:Smrf.GraphicsLib.ToolTipTrackerBase.HideToolTip"/> event if a tooltip is showing.
             </para>
            
             <para>
             <b>IMPORTANT</b>
             </para>
            
             <para>
             The control must call <see cref="M:Smrf.GraphicsLib.ToolTipTrackerBase.Dispose"/> from its own Dispose method.
             This prevents timer-based events from firing after the control no longer
             has a handle.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.GraphicsLib.ToolTipTrackerBase.MinDelayMs">
            <summary>
            Minimum value for the <see cref="P:Smrf.GraphicsLib.ToolTipTrackerBase.ShowDelayMs"/>, <see cref="P:Smrf.GraphicsLib.ToolTipTrackerBase.HideDelayMs"/>, and <see cref="P:Smrf.GraphicsLib.ToolTipTrackerBase.ReshowDelayMs"/> properties.
            </summary>
        </member>
        <member name="F:Smrf.GraphicsLib.ToolTipTrackerBase.MaxDelayMs">
            <summary>
            Maximum value for the <see cref="P:Smrf.GraphicsLib.ToolTipTrackerBase.ShowDelayMs"/>, <see cref="P:Smrf.GraphicsLib.ToolTipTrackerBase.HideDelayMs"/>, and <see cref="P:Smrf.GraphicsLib.ToolTipTrackerBase.ReshowDelayMs"/> properties.
            </summary>
        </member>
        <member name="F:Smrf.GraphicsLib.ToolTipTrackerBase.DefaultShowDelayMs">
            Default value for the ShowDelayMs property.
        </member>
        <member name="F:Smrf.GraphicsLib.ToolTipTrackerBase.DefaultHideDelayMs">
            Default value for the HideDelayMs property.
        </member>
        <member name="F:Smrf.GraphicsLib.ToolTipTrackerBase.DefaultReshowDelayMs">
            Default value for the ReshowDelayMs property.
        </member>
        <member name="M:Smrf.GraphicsLib.ToolTipTrackerBase.#ctor(Smrf.GraphicsLib.IToolTipTimer)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.GraphicsLib.ToolTipTrackerBase"/>
             class.
             </summary>
            
             <param name="toolTipTimer">
             The timer to use internally.  See the <see cref="T:Smrf.GraphicsLib.IToolTipTimer"/>
             interface for details.
             </param>
        </member>
        <member name="M:Smrf.GraphicsLib.ToolTipTrackerBase.Finalize">
            <summary>
            ToolTipTrackerBase destructor.
            </summary>
        </member>
        <member name="M:Smrf.GraphicsLib.ToolTipTrackerBase.OnMouseMoveOverObject(System.Object)">
             <summary>
             Specifies that the mouse has moved over an object.
             </summary>
            
             <param name="objectToTrack">
             Object to track, or null to stop tracking.
             </param>
            
             <remarks>
             Call this with an Object parameter when the mouse moves over an object
             that should be tracked.  Call it with a null parameter when the mouse
             moves over an area of the control where there is no object, and when
             the mouse leaves the control.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.ToolTipTrackerBase.Reset">
             <summary>
             Resets the object to its initial state.
             </summary>
            
             <remarks>
             This forces a <see cref="E:Smrf.GraphicsLib.ToolTipTrackerBase.HideToolTip"/> event if a tooltip is showing.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.ToolTipTrackerBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing,
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Smrf.GraphicsLib.ToolTipTrackerBase.ValidateDelayProperty(System.Int32,System.String)">
             <summary>
             Validates one of the xxDelayMs properties.
             </summary>
            
             <param name="iValue">
             Property value.
             </param>
            
             <param name="sPropertyName">
             Name of the property being validated.  Sample: "ShowDelayMs".
             </param>
            
             <remarks>
             This throws an exception if the value is out of range.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.ToolTipTrackerBase.ChangeState(Smrf.GraphicsLib.ToolTipTrackerBase.State,System.Object)">
             <summary>
             Changes the state of the object.
             </summary>
            
             <param name="iState">
             New object state.
             </param>
            
             <param name="oObjectToTrack">
             Object to track, or null to stop tracking.
             </param>
        </member>
        <member name="M:Smrf.GraphicsLib.ToolTipTrackerBase.FireShowToolTipEvent(System.Object)">
             <summary>
             Fires the ShowToolTip event.
             </summary>
            
             <param name="oObject">
             Object to show a tooltip for.
             </param>
        </member>
        <member name="M:Smrf.GraphicsLib.ToolTipTrackerBase.FireHideToolTipEvent(System.Object)">
             <summary>
             Fires the HideToolTip event.
             </summary>
            
             <param name="oObject">
             Object to hide the tooltip for.
             </param>
        </member>
        <member name="M:Smrf.GraphicsLib.ToolTipTrackerBase.TimerTick(System.Object,System.EventArgs)">
             <summary>
             Timer event handler.
             </summary>
            
             <param name="oSource">
             Source of the event.
             </param>
             
             <param name="oEventArgs">
             Standard event arguments.
             </param>
        </member>
        <member name="M:Smrf.GraphicsLib.ToolTipTrackerBase.Dispose(System.Boolean)">
             <summary>
             Performs application-defined tasks associated with freeing, releasing,
             or resetting unmanaged resources.
             </summary>
            
             <param name="bDisposing">
             See IDisposable.
             </param>
        </member>
        <member name="M:Smrf.GraphicsLib.ToolTipTrackerBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Smrf.GraphicsLib.ToolTipTrackerBase.ShowDelayMs">
             <summary>
             Gets or sets the number of milliseconds to wait to fire the <see cref="E:Smrf.GraphicsLib.ToolTipTrackerBase.ShowToolTip"/> event after <see cref="M:Smrf.GraphicsLib.ToolTipTrackerBase.OnMouseMoveOverObject(System.Object)"/>
             is first called.
             </summary>
            
             <value>
             The number of milliseconds to wait.
             </value>
        </member>
        <member name="P:Smrf.GraphicsLib.ToolTipTrackerBase.HideDelayMs">
             <summary>
             Gets or sets the number of milliseconds to wait to fire the <see cref="E:Smrf.GraphicsLib.ToolTipTrackerBase.HideToolTip"/> event after <see cref="E:Smrf.GraphicsLib.ToolTipTrackerBase.ShowToolTip"/> is fired.
             </summary>
            
             <value>
             The number of milliseconds to wait.
             </value>
        </member>
        <member name="P:Smrf.GraphicsLib.ToolTipTrackerBase.ReshowDelayMs">
             <summary>
             Gets or sets the number of milliseconds to wait after a <see cref="E:Smrf.GraphicsLib.ToolTipTrackerBase.HideToolTip"/> event before a <see cref="E:Smrf.GraphicsLib.ToolTipTrackerBase.ShowToolTip"/> event
             will be fired if the mouse is moved over another object.
             </summary>
            
             <value>
             The delay, in milliseconds.
             </value>
            
             <remarks>
             If this delay elapses without <see cref="M:Smrf.GraphicsLib.ToolTipTrackerBase.OnMouseMoveOverObject(System.Object)"/>
             being called, the waiting period reverts to <see cref="P:Smrf.GraphicsLib.ToolTipTrackerBase.ShowDelayMs"/>.
             </remarks>
        </member>
        <member name="P:Smrf.GraphicsLib.ToolTipTrackerBase.ToolTipShown">
             <summary>
             Gets a flag indicating whether a tooltip is being shown.
             </summary>
            
             <value>
             true if a tooltip is being shown.
             </value>
            
             <remarks>
             This gets set to true at the same time the <see cref="E:Smrf.GraphicsLib.ToolTipTrackerBase.ShowToolTip"/>
             event fires, and to false at the same time the <see cref="E:Smrf.GraphicsLib.ToolTipTrackerBase.HideToolTip"/> event fires.
             </remarks>
        </member>
        <member name="P:Smrf.GraphicsLib.ToolTipTrackerBase.TrackedObject">
             <summary>
             Gets the Object being tracked.
             </summary>
            
             <value>
             The Object most recently passed to <see cref="M:Smrf.GraphicsLib.ToolTipTrackerBase.OnMouseMoveOverObject(System.Object)"/>, or null if an object isn't being
             tracked.
             </value>
        </member>
        <member name="E:Smrf.GraphicsLib.ToolTipTrackerBase.ShowToolTip">
            <summary>
            Fired when a tooltip window should be shown.
            </summary>
        </member>
        <member name="E:Smrf.GraphicsLib.ToolTipTrackerBase.HideToolTip">
            <summary>
            Fired when a tooltip window should be hidden.
            </summary>
        </member>
        <member name="T:Smrf.GraphicsLib.ToolTipTrackerBase.ToolTipTrackerEvent">
             <summary>
             Represents a method that will handle an event fired by <see cref="T:Smrf.GraphicsLib.ToolTipTrackerBase"/>.
             </summary>
            
             <param name="source">
             Source of the event.
             </param>
            
             <param name="toolTipTrackerEventArgs">
             Provides information about the object for which a tooltip window should
             be shown or hidden.
             </param>
            
             <remarks>
             This delegate is used in all events fired by ToolTipTracker.
             </remarks>
        </member>
        <member name="T:Smrf.GraphicsLib.ToolTipTrackerEventArgs">
            <summary>
            Event arguments of <see cref="T:Smrf.GraphicsLib.ToolTipTrackerBase"/> events.
            </summary>
        </member>
        <member name="M:Smrf.GraphicsLib.ToolTipTrackerEventArgs.#ctor(System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.GraphicsLib.ToolTipTrackerEventArgs"/> class.
             </summary>
            
             <param name="trackedObject">
             Object for which a tooltip window should be shown or hidden.
             </param>
        </member>
        <member name="M:Smrf.GraphicsLib.ToolTipTrackerEventArgs.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Smrf.GraphicsLib.ToolTipTrackerEventArgs.Object">
             <summary>
             Gets the Object for which a tooltip window should be shown or hidden.
             </summary>
            
             <value>
             The Object for which a tooltip window should be shown or hidden.
             </value>
            
             <remarks>
             This should be called TrackedObject to make it consistent with the
             <see cref="P:Smrf.GraphicsLib.ToolTipTrackerBase.TrackedObject"/> property.  It is called
             Object for backward compatibility with older projects.
             </remarks>
        </member>
        <member name="T:Smrf.GraphicsLib.IToolTipTimer">
             <summary>
             Defines the timer interface used by <see cref="T:Smrf.GraphicsLib.ToolTipTrackerBase"/>.
             </summary>
            
             <remarks>
             The <see cref="T:Smrf.GraphicsLib.ToolTipTrackerBase"/> class uses an internal timer.  To
             allow the class to be used in both Windows Forms and WPF applications, the
             <see cref="T:Smrf.GraphicsLib.ToolTipTrackerBase"/> constructor accepts an <see cref="T:Smrf.GraphicsLib.IToolTipTimer"/> argument that wraps either a Windows Forms timer or
             a WPF DispatcherTimer, without <see cref="T:Smrf.GraphicsLib.ToolTipTrackerBase"/> knowing
             which timer is being used.
             </remarks>
        </member>
        <member name="M:Smrf.GraphicsLib.IToolTipTimer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Smrf.GraphicsLib.IToolTipTimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:Smrf.GraphicsLib.IToolTipTimer.Dispose">
            <summary>
            Disposes of the timer.
            </summary>
        </member>
        <member name="P:Smrf.GraphicsLib.IToolTipTimer.Interval">
             <summary>
             Gets or sets the time, in milliseconds, before the Tick event is raised
             relative to the last occurrence of the Tick event.
             </summary>
            
             <value>
             The timer interval, in milliseconds.
             </value>
        </member>
        <member name="E:Smrf.GraphicsLib.IToolTipTimer.Tick">
            <summary>
            Occurs when the timer interval has elapsed. 
            </summary>
        </member>
        <member name="T:Smrf.WpfGraphicsLib.Axis">
             <summary>
             Draws a linear axis with major and minor gridlines, major gridline values,
             and an axis label.
             </summary>
            
             <remarks>
             This can be used as either a horizontal x-axis (the default) or a vertical
             y-axis.  For the latter, set <see cref="P:Smrf.WpfGraphicsLib.Axis.IsXAxis"/> to false.
            
             <para>
             The axis is meant to be docked below or to the left of the control to which
             the axis applies.  If you set the <see cref="P:Smrf.WpfGraphicsLib.Axis.DockedControlRenderTransform"/> to the render transform of the
             docked control, the axis will adjust itself as the docked control is zoomed
             or translated.
             </para>
            
             <para>
             Call <see cref="M:Smrf.WpfGraphicsLib.Axis.SetRange(System.Double,System.Double,System.Double,System.Double,System.Boolean)"/> to set the range of values in the axis.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.WpfGraphicsLib.Axis.ValueFontSizeFactor">
            Font size to use for values, as a multiple of m_dLabelFontSizeEm.
        </member>
        <member name="F:Smrf.WpfGraphicsLib.Axis.MajorGridlineLength">
            Length of a major gridline.
        </member>
        <member name="F:Smrf.WpfGraphicsLib.Axis.MinorGridlineLength">
            Length of a minor gridline.
        </member>
        <member name="F:Smrf.WpfGraphicsLib.Axis.MajorGridlineMarginFactor">
            Margin between the end of a major gridline and the gridline's value,
            as a multiple of m_dLabelFontSize.
        </member>
        <member name="F:Smrf.WpfGraphicsLib.Axis.LabelMarginFactor">
            Margin between the gridline value and the axis label, as a multiple of
            m_dLabelFontSize.
        </member>
        <member name="F:Smrf.WpfGraphicsLib.Axis.MinorGridlines">
            Number of minor gridlines between each pair of major gridlines when
            the axis values are not logarithmic.
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.WpfGraphicsLib.Axis"/> class.
            </summary>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.SetRange(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
             <summary>
             Sets the range of values displayed in the axis.
             </summary>
            
             <param name="nearValue">
             The value at the near end of the axis.  The default is 0.
             </param>
            
             <param name="nearOffset">
             The offset of <paramref name="nearValue"/> from the near end of the
             axis.  The default is 25.0.
             </param>
            
             <param name="farValue">
             The value at the far end of the axis.  The default is 100.0.
             </param>
            
             <param name="farOffset">
             The offset of <paramref name="farValue"/> from the far end of the
             axis.  The default is 25.0.
             </param>
            
             <param name="valuesAreLogarithmic">
             true if the axis values are logarithmic.  If true, the gridlines are
             drawn logarithmically.  The default is false.
             </param>
            
             <remarks>
             If this is the x-axis, the near end of the axis range is at the left
             end of the control, and the far end of the axis range is the right end
             of the control.
            
             <para>
             If this is the y-axis, the near end of the axis range is the bottom end
             of the control, and the far end of the axis range is at the top end of
             the control.
             </para>
            
             <para>
             <paramref name="farValue"/> is not necessarily greater than <paramref name="nearValue"/>.  The axis values can increase or decrease as you
             go from its near end to its far end.
             </para>
            
             <para>
             The values and offsets passed to this method should NOT take into
             account any zoom or translation that has been applied to the docked
             control.  If you set the <see cref="P:Smrf.WpfGraphicsLib.Axis.DockedControlRenderTransform"/> to
             the render transform of the docked control, the axis will adjust itself
             as the docked control is zoomed or translated.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.SetFont(System.Windows.Media.Typeface,System.Double)">
             <summary>
             Sets the font used to draw the axis label and values.
             </summary>
            
             <param name="typeface">
             The Typeface to use.
             </param>
            
             <param name="labelEmSize">
             The font size to use for the axis label, in ems.  (A slightly smaller
             size is used for the axis values.)
             </param>
            
             <remarks>
             The default font is the SystemFonts.CaptionFontFamily at size 11.
             </remarks>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.MeasureOverride(System.Windows.Size)">
             <summary>
             When overridden in a derived class, measures the size in layout
             required for child elements and determines a size for the
             FrameworkElement-derived class. 
             </summary>
            
             <param name="availableSize">
             The available size that this element can give to child elements.
             Infinity can be specified as a value to indicate that the element will
             size to whatever content is available.
             </param>
            
             <returns>
             The size that this element determines it needs during layout, based on
             its calculations of child element sizes.
             </returns>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.OnRender(System.Windows.Media.DrawingContext)">
             <summary>
             Renders the control.
             </summary>
            
             <param name="drawingContext">
             The drawing instructions for a specific element. This context is
             provided to the layout system.
             </param>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.OnRender(System.Windows.Media.DrawingContext,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Renders the control.
             </summary>
            
             <param name="oDrawingContext">
             The drawing instructions for a specific element. This context is
             provided to the layout system.
             </param>
            
             <param name="dAdjustedNearValue">
             The value at the near end of the axis, adjusted for the docked
             control's render transform.
             </param>
            
             <param name="dAdjustedNearOffset">
             The offset of dAdjustedNearValue from the near end of the axis,
             adjusted for the docked control's render transform.
             </param>
            
             <param name="dAdjustedFarValue">
             The value at the far end of the axis, adjusted for the docked
             control's render transform.
             </param>
            
             <param name="dAdjustedFarOffset">
             The offset of dAdjustedFarValue from the far end of the axis,
             adjusted for the docked control's render transform.
             </param>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.DrawBackground(System.Windows.Media.DrawingContext,System.Windows.Rect,System.Double,System.Double)">
             <summary>
             Draws the control's background.
             </summary>
            
             <param name="oDrawingContext">
             The DrawingContext to draw with.
             </param>
            
             <param name="oClientRectangle">
             The control's client rectangle.
             </param>
            
             <param name="dAdjustedNearOffset">
             The offset of dAdjustedNearValue from the near end of the axis,
             adjusted for the docked control's render transform.
             </param>
            
             <param name="dAdjustedFarOffset">
             The offset of dAdjustedFarValue from the far end of the axis,
             adjusted for the docked control's render transform.
             </param>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.DrawOffsetBackground(System.Windows.Media.DrawingContext,System.Windows.Rect)">
             <summary>
             Draws the background for the rectangle that demarcates one of the range
             limits.
             </summary>
            
             <param name="oDrawingContext">
             The DrawingContext to draw with.
             </param>
            
             <param name="oOffsetRectangle">
             The offset rectangle to draw.
             </param>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.DrawAxisLine(System.Windows.Media.DrawingContext,System.Windows.Rect,System.Windows.Media.Pen)">
             <summary>
             Draws the axis line.
             </summary>
            
             <param name="oDrawingContext">
             The DrawingContext to draw with.
             </param>
            
             <param name="oClientRectangle">
             The control's client rectangle.
             </param>
            
             <param name="oPen">
             The Pen to draw with.
             </param>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.DrawMajorGridlineAndValue(System.Windows.Media.DrawingContext,System.Windows.Rect,System.Windows.Media.Pen,System.Double,System.Double,System.String)">
             <summary>
             Draws a major gridline and its value.
             </summary>
            
             <param name="oDrawingContext">
             The DrawingContext to draw with.
             </param>
            
             <param name="oClientRectangle">
             The control's client rectangle.
             </param>
            
             <param name="oPen">
             The Pen to draw with.
             </param>
            
             <param name="dMajorGridlineValue">
             The gridline's value.
             </param>
            
             <param name="dMajorGridlineOffset">
             The offset of the gridline from the left edge of the control if this is
             the x-axis, or the bottom edge of the control if this is the y-axis.
             </param>
            
             <param name="sFormatSpecifier">
             ToString() format specifier.
             </param>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.DrawGridline(System.Windows.Media.DrawingContext,System.Windows.Rect,System.Windows.Media.Pen,System.Double,System.Double)">
             <summary>
             Draws a major or minor gridline.
             </summary>
            
             <param name="oDrawingContext">
             The DrawingContext to draw with.
             </param>
            
             <param name="oClientRectangle">
             The control's client rectangle.
             </param>
            
             <param name="oPen">
             The Pen to draw with.
             </param>
            
             <param name="dGridlineOffset">
             The offset of the gridline from the left edge of the control if this is
             the x-axis, or the bottom edge of the control if this is the y-axis.
             </param>
            
             <param name="dGridlineLength">
             The length of the gridline.
             </param>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.DrawMajorGridlineValue(System.Windows.Media.DrawingContext,System.Windows.Rect,System.Double,System.Double,System.String)">
             <summary>
             Draws the value for a major gridline.
             </summary>
            
             <param name="oDrawingContext">
             The DrawingContext to draw with.
             </param>
            
             <param name="oClientRectangle">
             The control's client rectangle.
             </param>
            
             <param name="dMajorGridlineValue">
             The gridline's value.
             </param>
            
             <param name="dMajorGridlineOffset">
             The offset of the gridline from the left edge of the control if this is
             the x-axis, or the bottom edge of the control if this is the y-axis.
             </param>
            
             <param name="sFormatSpecifier">
             ToString() format specifier.
             </param>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.DrawMinorGridlines(System.Windows.Media.DrawingContext,System.Windows.Rect,System.Windows.Media.Pen,System.Double,System.Double)">
             <summary>
             Draw minor gridlines between two major gridlines.
             </summary>
            
             <param name="oDrawingContext">
             The DrawingContext to draw with.
             </param>
            
             <param name="oClientRectangle">
             The control's client rectangle.
             </param>
            
             <param name="oPen">
             The Pen to draw with.
             </param>
            
             <param name="dMajorGridline2Offset">
             The offset of the second major gridline.
             </param>
            
             <param name="dMajorGridline1Offset">
             The offset of the first major gridline.
             </param>
            
             <remarks>
             This method draws minor gridlines between the two specified major
             gridlines.  The specified offsets are from the left edge of the control
             if this is the x-axis, or from the bottom edge of the control if this
             is the y-axis.
             </remarks>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.DrawLabel(System.Windows.Media.DrawingContext,System.Windows.Rect)">
             <summary>
             Draws the axis label.
             </summary>
            
             <param name="oDrawingContext">
             The DrawingContext to draw with.
             </param>
            
             <param name="oClientRectangle">
             The control's client rectangle.
             </param>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.DrawRotatedText(System.Windows.Media.DrawingContext,System.Windows.Media.FormattedText,System.Double,System.Double)">
             <summary>
             Draws rotated text.
             </summary>
            
             <param name="oDrawingContext">
             The DrawingContext to draw with.
             </param>
            
             <param name="oFormattedText">
             The text to draw.
             </param>
            
             <param name="dCenterX">
             x-coordinate where the top-center of the text will be drawn
             </param>
            
             <param name="dCenterY">
             y-coordinate where the top-center of the text will be drawn
             </param>
            
             <remarks>
             The top-center of the text will appear at (dCenterX, dCenterY), rotated
             270 degrees.
             </remarks>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.GetFormatSpecifier(System.Double[],System.Int32)">
             <summary>
             Gets the format specifier to use for gridline values.
             </summary>
            
             <param name="adMajorGridlineValues">
             The gridline values returned by ChartUtil.GetAxisGridlineValues().
             </param>
            
             <param name="iDecimalPlacesToShow">
             The number of decimal places recommended by
             ChartUtil.GetAxisGridlineValues().
             </param>
            
             <returns>
             The format specifier to use.
             </returns>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.GetCenteredFormattedText(System.String,System.Windows.Media.Typeface,System.Double)">
             <summary>
             Gets a FormattedText object configured for centered text.
             </summary>
            
             <param name="sText">
             The text that will be drawn.  Can't be null.
             </param>
            
             <param name="oTypeface">
             The Typeface to use.
             </param>
            
             <param name="dFontSizeEm">
             The font size to use, in Ems.
             </param>
            
             <returns>
             A new FormattedText object configured for centered text.
             </returns>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.GetRotatedTextTransform(System.Double,System.Double)">
             <summary>
             Gets a Transform suitable for drawing rotated text.
             </summary>
            
             <param name="dCenterX">
             x-coordinate where the top-center of the text will be drawn
             </param>
            
             <param name="dCenterY">
             y-coordinate where the top-center of the text will be drawn
             </param>
            
             <returns>
             A Transform that will draw rotated text.
             </returns>
            
             <remarks>
             After the returned Transform is pushed onto the DrawingContext, text
             drawn at (0,0) will have its top-center appear at (dCenterX, dCenterY),
             rotated 270 degrees.
             </remarks>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.GetLogIfRequired(System.Double)">
             <summary>
             Gets the log of a number if the axis values are logarithmic.
             </summary>
            
             <param name="dNumber">
             Number to use.
             </param>
            
             <returns>
             The log of <paramref name="dNumber" /> if the axis values are
             logarithmic, or <paramref name="dNumber" /> if not.
             </returns>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.GetPowIfRequired(System.Double)">
             <summary>
             Raises a number to the power of 10 if the axis values are logarithmic.
             </summary>
            
             <param name="dNumber">
             Number to use.
             </param>
            
             <returns>
             <paramref name="dNumber" /> raised to the power of 10 if the axis
             values are logarithmic, or <paramref name="dNumber" /> if not.
             </returns>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.Axis.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.WpfGraphicsLib.Axis.m_bIsXAxis">
            true if this is the x-axis.
        </member>
        <member name="F:Smrf.WpfGraphicsLib.Axis.m_sLabel">
            The label for the axis.
        </member>
        <member name="F:Smrf.WpfGraphicsLib.Axis.m_dNearValue">
            The values at the near and far ends of the axis.
        </member>
        <member name="F:Smrf.WpfGraphicsLib.Axis.m_dFarValue">
            
        </member>
        <member name="F:Smrf.WpfGraphicsLib.Axis.m_dNearOffset">
            The offset of m_dNearValue from the near end of the axis.
        </member>
        <member name="F:Smrf.WpfGraphicsLib.Axis.m_dFarOffset">
            The offset of m_dFarValue from the far end of the axis.
        </member>
        <member name="F:Smrf.WpfGraphicsLib.Axis.m_bValuesAreLogarithmic">
            true if the axis values are logarithmic.
        </member>
        <member name="F:Smrf.WpfGraphicsLib.Axis.m_oDockedControlRenderTransform">
            The docked control's render transform.
        </member>
        <member name="F:Smrf.WpfGraphicsLib.Axis.m_oTypeface">
            The Typeface to use to draw the label and values.
        </member>
        <member name="F:Smrf.WpfGraphicsLib.Axis.m_dLabelFontSizeEm">
            The font size to use to draw the label.  (A slightly smaller size is
            used for the axis values.)
        </member>
        <member name="P:Smrf.WpfGraphicsLib.Axis.IsXAxis">
             <summary>
             Gets or sets a flag specifying whether this is the x-axis.
             </summary>
            
             <value>
             true if this control represents the x-axis, false if it represents the
             y-axis.
             </value>
            
             <remarks>
             When true, the axis is drawn horizontally.  The near end of the axis
             range is at the left end of the control, and the far end of the axis
             range is the right end of the control.
            
             <para>
             When false, the axis is drawn vertically.  The near end of the axis
             range is the bottom end of the control, and the far end of the axis
             range is at the top end of the control.
             </para>
            
             </remarks>
        </member>
        <member name="P:Smrf.WpfGraphicsLib.Axis.Label">
             <summary>
             Gets or sets the label for the axis.
             </summary>
            
             <value>
             The label for the axis.  Can be null.  The default is an empty string.
             </value>
        </member>
        <member name="P:Smrf.WpfGraphicsLib.Axis.DockedControlRenderTransform">
             <summary>
             Gets or sets the render transform for the control to which this axis is
             docked.
             </summary>
            
             <value>
             The docked control's render transform.  The default is an
             IdentityTransform.
             </value>
        </member>
        <member name="P:Smrf.WpfGraphicsLib.Axis.ValueFontSizeEm">
             <summary>
             Gets the font size to use for axis values.
             </summary>
            
             <value>
             The font size to use for axis values, in ems.
             </value>
        </member>
        <member name="P:Smrf.WpfGraphicsLib.Axis.MajorGridlineMargin">
             <summary>
             Gets the margin between the end of a major gridline and the gridline's
             value.
             </summary>
            
             <value>
             The margin between the end of a major gridline and the gridline's
             value.
             </value>
        </member>
        <member name="P:Smrf.WpfGraphicsLib.Axis.LabelMargin">
             <summary>
             Gets the margin between the gridline value and the axis label.
             </summary>
            
             <value>
             The margin between the gridline value and the axis label.
             </value>
        </member>
        <member name="T:Smrf.WpfGraphicsLib.WpfToolTipTracker">
             <summary>
             Helper class for displaying tooltips in WPF applications.
             </summary>
            
             <remarks>
             See the <see cref="T:Smrf.GraphicsLib.ToolTipTrackerBase"/> base class for details on how to
             use this class.
             </remarks>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.WpfToolTipTracker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.WpfGraphicsLib.WpfToolTipTracker"/>
            class.
            </summary>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.WpfToolTipTracker.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Smrf.WpfGraphicsLib.WpfToolTipTimer">
             <summary>
             Implements a timer used by <see cref="T:Smrf.GraphicsLib.ToolTipTrackerBase"/> in WPF
             applications.
             </summary>
            
             <remarks>
             This class wraps the WPF DispatcherTimer in an <see cref="T:Smrf.GraphicsLib.IToolTipTimer"/>
             interface for use by <see cref="T:Smrf.GraphicsLib.ToolTipTrackerBase"/>.
             </remarks>
        </member>
        <member name="M:Smrf.WpfGraphicsLib.WpfToolTipTimer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing,
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Smrf.WpfGraphicsLib.WpfToolTipTimer.Interval">
             <summary>
             Gets or sets the time, in milliseconds, before the Tick event is raised
             relative to the last occurrence of the Tick event.
             </summary>
            
             <value>
             The timer interval, in milliseconds.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.DraggedMarquee">
             <summary>
             Represents a marquee that might be dragged with the mouse.
             </summary>
            
             <remarks>
             Create an instance of this class when an empty area of the graph is
             clicked.  When the mouse is moved, check <see cref="M:Smrf.NodeXL.Visualization.Wpf.MouseDrag.OnMouseMove(System.Windows.Point)"/> to determine whether the mouse has moved
             far enough to begin a marquee drag.  If <see cref="M:Smrf.NodeXL.Visualization.Wpf.MouseDrag.OnMouseMove(System.Windows.Point)"/> returns true, call <see cref="M:Smrf.NodeXL.Visualization.Wpf.DraggedMarquee.CreateVisual(System.Windows.Point,System.Windows.Media.Color)"/> to create a Visual to represent the dragged marquee.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.MouseDragWithVisual">
             <summary>
             Represents a dragged object that has a visual representation.
             </summary>
            
             <remarks>
             This is an abstract base class.  It maintains a Visual property that
             represents an object being dragged.  It is up to the derived class to
             create the object.
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.MouseDrag">
             <summary>
             Represents a mouse drag operation.
             </summary>
            
             <remarks>
             Create an instance of this class when a MouseDown event occurs.  When the
             mouse is moved, call <see cref="M:Smrf.NodeXL.Visualization.Wpf.MouseDrag.OnMouseMove(System.Windows.Point)"/> to determine whether the
             mouse has moved far enough to begin a mouse drag operation.  When the mouse
             button is released, call <see cref="M:Smrf.NodeXL.Visualization.Wpf.MouseDrag.OnMouseUp"/>.
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.MouseDrag.MinimumMouseMove">
            Minimum change in either coordinate before a drag operation begins.
            Having a minimum move distance reduces the chance that the user will
            inadvertently begin a drag operation.
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.MouseDrag.#ctor(System.Windows.Point)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Visualization.Wpf.MouseDrag"/> class.
             </summary>
            
             <param name="mouseDownLocation">
             Location where the MouseDown event occurred, in client coordinates.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.MouseDrag.OnMouseMove(System.Windows.Point)">
             <summary>
             Returns a flag indicating whether a drag operation is in progress.
             </summary>
            
             <param name="currentMouseLocation">
             The current mouse location.
             </param>
            
             <returns>
             true if a drag operation is in progress.
             </returns>
            
             <remarks>
             Call this when the mouse is moved.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.MouseDrag.OnMouseUp">
             <summary>
             Returns a flag indicating whether a drag operation is in progress.
             </summary>
            
             <returns>
             true if a drag operation is in progress.
             </returns>
            
             <remarks>
             Call this when the mouse button is released.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.MouseDrag.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.MouseDrag.m_oMouseDownLocation">
            Location where the MouseDown event occurred, in client coordinates.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.MouseDrag.m_bDragIsInProgress">
            true if a drag operation is in progress.
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.MouseDrag.MouseDownLocation">
             <summary>
             Gets the location where the MouseDown event occurred.
             </summary>
            
             <value>
             The location where the MouseDown event occurred, as a <see cref="T:System.Windows.Point"/> in client coordinates.
             </value>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.MouseDragWithVisual.#ctor(System.Windows.Point,System.Windows.Rect,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Visualization.Wpf.MouseDragWithVisual"/>
             class.
             </summary>
            
             <param name="mouseDownLocation">
             Location where the graph was clicked, in client coordinates.
             </param>
            
             <param name="graphRectangle">
             The graph rectangle.
             </param>
            
             <param name="margin">
             The graph margin.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.MouseDragWithVisual.ForcePointToBeWithinMargins(System.Windows.Point)">
             <summary>
             Forces a point to fall within the graph's margins.
             </summary>
            
             <param name="oPoint">
             The point to force.
             </param>
            
             <returns>
             The forced point.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.MouseDragWithVisual.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.MouseDragWithVisual.m_oGraphRectangle">
            The graph rectangle.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.MouseDragWithVisual.m_iMargin">
            The graph margin.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.MouseDragWithVisual.m_oVisual">
            The Visual that represents the dragged object, or null if the derived
            class hasn't created the Visual yet.
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.MouseDragWithVisual.Visual">
             <summary>
             Gets the Visual that represents the dragged object.
             </summary>
            
             <value>
             The Visual that represents the dragged object, or null if the Visual
             hasn't been created yet.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.MouseDragWithVisual.GraphRectangleMinusMargin">
             <summary>
             Gets the rectangle that defines the bounds of the graph, minus the
             margin.
             </summary>
            
             <value>
             The rectangle that defines the bounds of the graph, minus the margin,
             as a Rect.
             </value>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.DraggedMarquee.MarqueeFillAlpha">
            Alpha value to use to fill the marquee.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.DraggedMarquee.MarqueeOutlineAlpha">
            Alpha value to use for the marquee outline.
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.DraggedMarquee.#ctor(System.Windows.Point,System.Windows.Rect,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Visualization.Wpf.DraggedMarquee"/> class.
             </summary>
            
             <param name="mouseDownLocation">
             Location where the graph was clicked, in client coordinates.
             </param>
            
             <param name="graphRectangle">
             The graph rectangle.
             </param>
            
             <param name="margin">
             The graph margin.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.DraggedMarquee.CreateVisual(System.Windows.Point,System.Windows.Media.Color)">
             <summary>
             Creates the Visual that should be used to represent the dragged
             marquee.
             </summary>
            
             <param name="currentMouseLocation">
             The current mouse location.
             </param>
            
             <param name="backgroundContrastColor">
             A color that contrasts with the control's background.
             </param>
            
             <returns>
             The Visual that should be used to represent the dragged marquee.
             </returns>
            
             <remarks>
             The returned Visual can be retrieved later via the <see cref="P:Smrf.NodeXL.Visualization.Wpf.MouseDragWithVisual.Visual"/> property.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.DraggedMarquee.CreateMarqueeRectangle(System.Windows.Point)">
             <summary>
             Creates the rectangle to use for the marquee Visual.
             </summary>
            
             <param name="oCurrentMouseLocation">
             The current mouse location.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.DraggedMarquee.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.DraggedMarquee.m_oMarqueeRectangle">
            The rectangle used to create m_oMarqueeVisual, or Rect.Empty if there
            is no marquee.
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.DraggedMarquee.MarqueeRectangle">
             <summary>
             Gets the rectangle that represents the marquee.
             </summary>
            
             <value>
             The rectangle that was created by <see cref="M:Smrf.NodeXL.Visualization.Wpf.DraggedMarquee.CreateVisual(System.Windows.Point,System.Windows.Media.Color)"/>, or
             Rect.Empty if <see cref="M:Smrf.NodeXL.Visualization.Wpf.DraggedMarquee.CreateVisual(System.Windows.Point,System.Windows.Media.Color)"/> hasn't been called.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.DraggedTranslation">
             <summary>
             Represents a mouse drag that is translating the graph via a
             TranslateTransform.
             </summary>
            
             <remarks>
             Create an instance of this class when the graph is clicked while
             <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/> is set to <see cref="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.Translate"/>.  When the mouse is moved, call <see cref="M:Smrf.NodeXL.Visualization.Wpf.DraggedTranslation.GetTranslationDistances(System.Windows.Point,System.Double@,System.Double@)"/> to get the distances to translate the
             graph.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.DraggedTranslation.#ctor(System.Windows.Point,System.Windows.Point,System.Double,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Visualization.Wpf.DraggedTranslation"/> class.
             </summary>
            
             <param name="mouseDownLocation">
             Location where the graph was clicked, in client coordinates.
             </param>
            
             <param name="mouseDownLocationScreen">
             Location where the graph was clicked, in screen coordinates.
             </param>
            
             <param name="mouseDownTranslateX">
             x-axis translation when the mouse was clicked.
             </param>
            
             <param name="mouseDownTranslateY">
             y-axis translation when the mouse was clicked.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.DraggedTranslation.GetTranslationDistances(System.Windows.Point,System.Double@,System.Double@)">
             <summary>
             Gets the distances to translate the graph.
             </summary>
            
             <param name="currentMouseLocationScreen">
             The current mouse location, in screen coordinates.
             </param>
            
             <param name="newTranslateX">
             Where the new x-axis translation distance gets stored.
             </param>
            
             <param name="newTranslateY">
             Where the new y-axis translation distance gets stored.
             </param>
            
             <remarks>
             The returned distances are in units appropriate for the
             TranslateTransform.X and Y properties.
            
             <para>
             The returned distances are not limited -- they can force the graph to
             move outside the control.  It's up to the caller to limit the
             distances.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.DraggedTranslation.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.DraggedTranslation.m_oMouseDownLocationScreen">
            Location where the graph was clicked, in screen coordinates.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.DraggedTranslation.m_dMouseDownTranslateX">
            x-axis translation when the mouse was clicked.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.DraggedTranslation.m_dMouseDownTranslateY">
            y-axis translation when the mouse was clicked.
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.DraggedVertices">
             <summary>
             Represents one or more vertices that might be dragged with the mouse.
             </summary>
            
             <remarks>
             Create an instance of this class when a vertex is clicked.  When the mouse
             is moved, check <see cref="M:Smrf.NodeXL.Visualization.Wpf.MouseDrag.OnMouseMove(System.Windows.Point)"/> to determine whether
             the mouse has moved far enough to begin a vertex drag.  If <see cref="M:Smrf.NodeXL.Visualization.Wpf.MouseDrag.OnMouseMove(System.Windows.Point)"/> returns true, call <see cref="M:Smrf.NodeXL.Visualization.Wpf.DraggedVertices.CreateVisual(System.Windows.Point,System.Windows.Media.Color,Smrf.NodeXL.Visualization.Wpf.VertexDrawer)"/> to create a Visual to represent the dragged
             vertices.
            
             <para>
             Call <see cref="M:Smrf.NodeXL.Visualization.Wpf.DraggedVertices.CancelDrag"/> if the user wants to cancel the drag
             operation.
             </para>
            
             <para>
             Call <see cref="M:Smrf.NodeXL.Visualization.Wpf.DraggedVertices.RemoveMetadataFromVertices"/> when the drag operation
             completes or is cancelled.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.DraggedVertices.#ctor(Smrf.NodeXL.Core.IVertex[],System.Windows.Point,System.Windows.Rect,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Visualization.Wpf.DraggedVertices"/> class.
             </summary>
            
             <param name="vertices">
             An array of one or more vertices being dragged.
             </param>
            
             <param name="mouseDownLocation">
             Location where the vertex was clicked, in client coordinates.
             </param>
            
             <param name="graphRectangle">
             The graph rectangle.
             </param>
            
             <param name="margin">
             The graph margin.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.DraggedVertices.CreateVisual(System.Windows.Point,System.Windows.Media.Color,Smrf.NodeXL.Visualization.Wpf.VertexDrawer)">
             <summary>
             Creates the Visual that should be used to represent the dragged
             vertices.
             </summary>
            
             <param name="currentMouseLocation">
             The current mouse location.
             </param>
            
             <param name="backColor">
             The graph's background color.
             </param>
            
             <param name="vertexDrawer">
             The VertexDrawer that should be used to draw the dragged vertices.
             </param>
            
             <returns>
             The Visual that should be used to represent the dragged vertices.
             </returns>
            
             <remarks>
             The returned Visual can be retrieved later via the <see cref="P:Smrf.NodeXL.Visualization.Wpf.MouseDragWithVisual.Visual"/> property.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.DraggedVertices.CancelDrag">
             <summary>
             Restores the vertices to their original locations.
             </summary>
            
             <remarks>
             This should be called when the user cancel the drag operation.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.DraggedVertices.RemoveMetadataFromVertices">
             <summary>
             Removes added metadata from the vertices being dragged.
             </summary>
            
             <remarks>
             This should be called after the drag operation completes or is
             cancelled.  It removes vertex metadata that this class added during the
             drag.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.DraggedVertices.AddMetadataToVertices">
             <summary>
             Adds required metadata to the vertices being dragged.
             </summary>
            
             <remarks>
             The metadata should be removed by the owner of this class by calling
             <see cref="M:Smrf.NodeXL.Visualization.Wpf.DraggedVertices.RemoveMetadataFromVertices"/>.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.DraggedVertices.GetOriginalVertexLocation(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Gets the original location of a vertex.
             </summary>
            
             <param name="oVertex">
             The vertex to the the original location for.
             </param>
            
             <returns>
             The vertex's original location, as a PointF.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.DraggedVertices.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.DraggedVertices.m_aoVertices">
            The vertices being dragged.  Can't be null or empty.
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.DraggedVertices.Vertices">
             <summary>
             Gets the vertices being dragged.
             </summary>
            
             <value>
             An array of one or move vertices being dragged.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.GraphMouseButtonEventArgs">
            <summary>
            Provides information for events fired when a graph is clicked.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.GraphMouseButtonEventArgs.#ctor(System.Windows.Input.MouseButtonEventArgs,Smrf.NodeXL.Core.IVertex)">
             <summary>
             Initializes a new instance of the GraphMouseButtonEventArgs class.
             </summary>
            
             <param name="mouseButtonEventArgs">
             Mouse event arguments.
             </param>
            
             <param name="vertex">
             Vertex under the mouse, or null if the user clicked on a part of the
             graph not covered by a vertex.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.GraphMouseButtonEventArgs.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.GraphMouseButtonEventArgs.m_oVertex">
            The vertex under the mouse, or null.
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.GraphMouseButtonEventArgs.Vertex">
             <summary>
             Gets the vertex under the mouse.
             </summary>
            
             <value>
             The vertex under the mouse, as an <see cref="T:Smrf.NodeXL.Core.IVertex"/>, or null if
             the user clicked a point on the graph not covered by a vertex.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.GraphMouseButtonEventHandler">
             <summary>
             Represents a method that will handle an event fired when a graph is
             clicked.
             </summary>
            
             <param name="sender">
             The object that fired the event.
             </param>
            
             <param name="e">
             Provides information about the mouse and the part of the graph that was
             clicked.
             </param>
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.MouseMode">
             <summary>
             Determines how the mouse can be used to interact with the graph.
             </summary>
            
             <remarks>
             Note that for all values except <see cref="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.DoNothing"/>, the following
             actions are available:
            
             <list type="bullet">
            
             <item><term>
             The mouse wheel zooms the graph in and out.
             </term></item>
            
             <item><term>
             If the graph is zoomed in, dragging the mouse with the middle button
             translates the entire graph.
             </term></item>
            
             <item><term>
             If the graph is zoomed in, dragging the mouse with the left button while
             holding down the space key translates the entire graph.
             </term></item>
            
             </list>
            
             <para>
             Also, if the value is <see cref="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.Select"/>, <see cref="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.AddToSelection"/>,
             or <see cref="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.SubtractFromSelection"/>, holding down the control key while
             clicking a vertex inverts its selection state.
             </para>
            
             <para>
             In the descriptions below, "click" means "click with the left button."
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.DoNothing">
            <summary>
            The mouse buttons and wheel do nothing.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.Select">
            <summary>
            Any selected vertices and edges are first deselected.  Clicking a
            vertex selects it.  Dragging a selected vertex moves all selected
            vertices.  Dragging a marquee starting at an empty area of the
            graph selects all the contained vertices.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.AddToSelection">
            <summary>
            Clicking a vertex adds it to the selection.  Dragging a marquee
            starting at an empty area of the graph adds all the contained vertices
            to the selection.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.SubtractFromSelection">
            <summary>
            Clicking a vertex subtracts it from the selection.  Dragging a marquee
            starting at an empty area of the graph subtracts all the contained
            vertices from the selection.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.ZoomIn">
            <summary>
            The graph is zoomed in to the clicked point.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.ZoomOut">
            <summary>
            The graph is zoomed out from the clicked point.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.Translate">
            <summary>
            If the graph is zoomed in, dragging the mouse translates the entire
            graph.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs">
            <summary>
            Provides information for events fired when a tooltip is shown for a vertex.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs.#ctor(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Initializes a new instance of the VertexToolTipShownEventArgs class.
             </summary>
            
             <param name="vertex">
             Vertex for which a tooltip is shown.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs.m_oVertexToolTip">
            The UIElement to use for the vertex tooltip, or null to use the tooltip
            string stored in the vertex's metadata.
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs.VertexToolTip">
             <summary>
             Gets or sets the UIElement to use for the vertex tooltip.
             </summary>
            
             <value>
             The UIElement to use.  The default value is null.
             </value>
            
             <remarks>
             See <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ShowVertexToolTips"/> for information on
             how to display a custom tooltip when the mouse is hovered over a
             vertex.
            
             <para>
             If this property is left at its default value of null, the text stored
             on the vertex's ReservedMetadataKeys.<see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexToolTip"/> key is used for the
             tooltip.  If there is no such key, a tooltip isn't displayed.
             </para>
            
             </remarks>
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.VertexToolTipShownEventHandler">
             <summary>
             Represents a method that will handle an event fired when a tooltip is shown
             for a vertex.
             </summary>
            
             <param name="sender">
             The object that fired the event.
             </param>
            
             <param name="e">
             Provides information about the vertex and its tooltip.
             </param>
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.VerticesMovedEventArgs">
            <summary>
            Provides information for the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VerticesMoved"/>
            event.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.VerticesMovedEventArgs.#ctor(System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex})">
             <summary>
             Initializes a new instance of the VerticesMovedEventArgs class.
             </summary>
            
             <param name="movedVertices">
             Collection of one or more vertices that were moved.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.VerticesMovedEventArgs.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.VerticesMovedEventArgs.m_oMovedVertices">
            Collection of one or more vertices that were moved.
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.VerticesMovedEventArgs.MovedVertices">
             <summary>
             Gets a collection of one or more vertices that were moved.
             </summary>
            
             <value>
             A collection of one or more vertices that were moved.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.VerticesMovedEventHandler">
             <summary>
             Represents a method that will handle the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VerticesMoved"/> event.
             </summary>
            
             <param name="sender">
             The object that fired the event.
             </param>
            
             <param name="e">
             Provides information about the moved vertices.
             </param>
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl">
             <summary>
             Lays out and renders a NodeXL graph in a WPF or Windows Forms desktop
             application.
             </summary>
            
             <remarks>
            
             <h3>Overview</h3>
            
             <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/> is one of several classes that render a NodeXL
             graph.  It derives from FrameworkElement and is meant for use in WPF
             desktop applications.
            
             <para>
             If you need a graph rendered as a Visual without the overhead of
             FrameworkElement, use <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLVisual"/> instead.  Note that <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLVisual"/> does not lay out the graph before drawing it.
             </para>
            
             <para>
             You can also use <see cref="T:Smrf.NodeXL.Visualization.Wpf.GraphDrawer"/>, which is a low-level class
             used by both <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/> and <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLVisual"/>.
             <see cref="T:Smrf.NodeXL.Visualization.Wpf.GraphDrawer"/> cannot be directly rendered, however, and
             requires a custom wrapper that hosts its GraphDrawer.<see cref="P:Smrf.NodeXL.Visualization.Wpf.GraphDrawer.VisualCollection"/> object.  Also, it does not lay
             out the graph before drawing it.
             </para>
            
             <para>
             To use <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/>, populate the graph exposed by the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.Graph"/> property, then call <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DrawGraph(System.Boolean)"/>.  See the sample code below.
             </para>
            
             <h3>Vertex and Edge Appearance</h3>
            
             <para>
             The default appearance of the graph's vertices is determined by the
             following properties:
             </para>
            
             <list type="bullet">
             <item><see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexColor"/></item>
             <item><see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexSelectedColor"/></item>
             <item><see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexShape"/></item>
             <item><see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexRadius"/></item>
             <item><see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexLabelFillColor"/></item>
             <item><see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexLabelPosition"/></item>
             </list>
            
             <para>
             The default appearance of the graph's edges is determined by the following
             properties:
             </para>
            
             <list type="bullet">
             <item><see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeColor"/></item>
             <item><see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeSelectedColor"/></item>
             <item><see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeWidth"/></item>
             <item><see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeRelativeArrowSize"/></item>
             </list>
            
             <para>
             The appearance of an individual vertex can be overridden by adding
             appropriate metadata to the vertex via <see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/>.  The following metadata keys can be
             used:
             </para>
            
             <list type="bullet">
             <item><see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/></item>
             <item><see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerColor"/></item>
             <item><see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexShape"/></item>
             <item><see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexRadius"/></item>
             <item><see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerAlpha"/></item>
             <item><see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabel"/></item>
             <item><see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabelFillColor"/></item>
             <item><see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabelPosition"/></item>
             <item><see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexImage"/></item>
             </list>
            
             <para>
             Similarly, the appearance of an individual edge can be overridden by adding
             appropriate metadata to the edge.  The following metadata keys can be used:
             </para>
            
             <list type="bullet">
             <item><see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/></item>
             <item><see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerColor"/></item>
             <item><see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerAlpha"/></item>
             <item><see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerEdgeWidth"/></item>
             <item><see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerEdgeStyle"/></item>
             <item><see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerEdgeLabel"/></item>
             </list>
            
             <h3>Shapes, Labels, and Images</h3>
            
             <para>
             By default, vertices are drawn as the shape specified by the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexShape"/> property.  The shape of an individual vertex can be
             overridden with the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexShape"/>
             metadata key.
             </para>
            
             <para>
             To draw an individual vertex as a rectangle containing text, set the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexShape"/> key to <see cref="F:Smrf.NodeXL.Visualization.Wpf.VertexShape.Label"/> and set the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabel"/> key to the label text.  The
             rectangle's fill color can be controlled with the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabelFillColor"/> key.
             </para>
            
             <para>
             To annotate other vertex shapes with text, set the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabel"/> key to the annotation text.
             The text gets drawn next to the vertex at the position specified by <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexLabelPosition"/>.  (The <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabel"/> key serves two purposes: it
             is the text inside the rectangle when the vertex has the shape <see cref="F:Smrf.NodeXL.Visualization.Wpf.VertexShape.Label"/>, and it is the annotation text next to the
             vertex when the vertex has one of the other shapes.  You cannot annotate a
             vertex whose shape is <see cref="F:Smrf.NodeXL.Visualization.Wpf.VertexShape.Label"/>.)
             </para>
            
             <para>
             To draw an individual vertex as an image, set the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexShape"/> to <see cref="F:Smrf.NodeXL.Visualization.Wpf.VertexShape.Image"/> and set the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexImage"/> key to the image.
             </para>
            
             <h3>Selecting Vertices and Edges</h3>
            
             <para>
             One or more vertices and their incident edges can be selected with the
             mouse.  See the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/> property for details.
             </para>
            
             <para>
             To programatically select and deselect vertices and edges, use the <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Smrf.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>, <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Smrf.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>, <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge})"/>, <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>, and <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/> methods.  To determine which vertices and edges are
             selected, use the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/> and <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/> properties.
             </para>
            
             <para>
             <b>Important Note:</b>: Do not use the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.IsSelected"/> metadata key to select vertex or
             edges.  Use the selection methods on this control instead.
             </para>
            
             <h3>Zoom and Scale</h3>
            
             <para>
             The graph can be zoomed either programatically or with the mouse.  See
             <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoom"/> for details.
             </para>
            
             <para>
             The size of the graph's vertices and edges can controlled with <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphScale"/>.
             </para>
            
             <h3>Vertex Tooltips</h3>
            
             <para>
             A tooltip can be displayed when the mouse hovers over a vertex.  The
             tooltip can be simple text or a custom UIElement containing arbitrary
             content.  See <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ShowVertexToolTips"/> for details.
             </para>
            
             <h3>Graph Layout Algorithm</h3>
            
             <para>
             By default, the control uses a force-directed Fruchterman-Reingold
             algorithm to lay out the graph.  Use the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.Layout"/> property to
             specify a different layout.
             </para>
            
             <h3>Using NodeXLControl in WPF Applications</h3>
            
             <example>
             Here is sample C# code that populates a <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/> graph
             with several vertices and edges.  It's assumed that a <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/> named nodeXLControl1 has been added to the WPF
             Window in the Visual Studio designer.
            
             <code>
            using System;
            using System.Windows;
            using System.Windows.Media;
            using Smrf.NodeXL.Core;
            using Smrf.NodeXL.Visualization.Wpf;
            
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
                public Window1()
                {
                    InitializeComponent();
                }
            
                private void Window_Loaded(object sender, RoutedEventArgs e)
                {
                    PopulateAndDrawGraph();
                }
            
                protected void PopulateAndDrawGraph()
                {
                    // Get the graph's vertex collection.
            
                    IVertexCollection oVertices = nodeXLControl1.Graph.Vertices;
            
                    // Add three vertices.
            
                    IVertex oVertexA = oVertices.Add();
                    IVertex oVertexB = oVertices.Add();
                    IVertex oVertexC = oVertices.Add();
            
                    // Change the color, radius, and shape of vertex A.
            
                    oVertexA.SetValue(ReservedMetadataKeys.PerColor,
                        Color.FromArgb(255, 255, 0, 255));
            
                    oVertexA.SetValue(ReservedMetadataKeys.PerVertexRadius, 20F);
            
                    oVertexA.SetValue(ReservedMetadataKeys.PerVertexShape,
                        VertexShape.Sphere);
            
                    // Draw vertex B as a Label, which is a rectangle containing text.
            
                    oVertexB.SetValue(ReservedMetadataKeys.PerVertexShape,
                        VertexShape.Label);
            
                    oVertexB.SetValue(ReservedMetadataKeys.PerVertexLabel, "Label");
            
                    // Set the label's text and fill colors.
            
                    oVertexB.SetValue(ReservedMetadataKeys.PerColor,
                        Color.FromArgb(255, 220, 220, 220));
            
                    oVertexB.SetValue(ReservedMetadataKeys.PerVertexLabelFillColor,
                        Color.FromArgb(255, 0, 0, 0));
            
                    // Annotate vertex C with text that is drawn outside the vertex.  All
                    // shapes except Label can be annotated.
            
                    oVertexC.SetValue(ReservedMetadataKeys.PerVertexLabel, "Annotation");
            
                    // Get the graph's edge collection.
            
                    IEdgeCollection oEdges = nodeXLControl1.Graph.Edges;
            
                    // Connect the vertices with directed edges.
            
                    IEdge oEdge1 = oEdges.Add(oVertexA, oVertexB, true);
                    IEdge oEdge2 = oEdges.Add(oVertexB, oVertexC, true);
                    IEdge oEdge3 = oEdges.Add(oVertexC, oVertexA, true);
            
                    // Customize their appearance.
            
                    oEdge1.SetValue(ReservedMetadataKeys.PerColor,
                        Color.FromArgb(255, 55, 125, 98));
            
                    oEdge1.SetValue(ReservedMetadataKeys.PerEdgeWidth, 3F);
                    oEdge1.SetValue(ReservedMetadataKeys.PerEdgeLabel, "This is edge 1");
            
                    oEdge2.SetValue(ReservedMetadataKeys.PerEdgeWidth, 5F);
                    oEdge2.SetValue(ReservedMetadataKeys.PerEdgeLabel, "This is edge 2");
            
                    oEdge3.SetValue(ReservedMetadataKeys.PerColor,
                        Color.FromArgb(255, 0, 255, 0));
            
                    nodeXLControl1.DrawGraph(true);
                }
            }
            }
             </code>
             </example>
            
             <h3>Using NodeXLControl in Windows Forms Applications</h3>
            
             <example>
             <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/> can be used in Windows Forms applications by
             embedding it within a Windows.Forms.Integration.ElementHost control, as in
             the following sample code:
            
             <code>
            using System;
            using System.Windows.Forms;
            using System.Drawing;
            using Smrf.NodeXL.Core;
            using Smrf.NodeXL.Visualization.Wpf;
            
            namespace WindowsFormsApplication1
            {
            public partial class Form1 : Form
            {
                private NodeXLControl nodeXLControl1;
            
                public Form1()
                {
                    InitializeComponent();
            
                    nodeXLControl1 = new NodeXLControl();
                    elementHost1.Child = nodeXLControl1;
                }
            
                private void Form1_Load(object sender, EventArgs e)
                {
                    PopulateAndDrawGraph();
                }
            
                protected void PopulateAndDrawGraph()
                {
                    // Get the graph's vertex collection.
            
                    IVertexCollection oVertices = nodeXLControl1.Graph.Vertices;
            
                    // Add three vertices.
            
                    IVertex oVertexA = oVertices.Add();
                    IVertex oVertexB = oVertices.Add();
                    IVertex oVertexC = oVertices.Add();
            
                    // Change the color, radius, and shape of vertex A.
            
                    oVertexA.SetValue(ReservedMetadataKeys.PerColor,
                        Color.FromArgb(255, 255, 0, 255));
            
                    oVertexA.SetValue(ReservedMetadataKeys.PerVertexRadius, 20F);
            
                    oVertexA.SetValue(ReservedMetadataKeys.PerVertexShape,
                        VertexShape.Sphere);
            
                    // Draw vertex B as a Label, which is a rectangle containing text.
            
                    oVertexB.SetValue(ReservedMetadataKeys.PerVertexShape,
                        VertexShape.Label);
            
                    oVertexB.SetValue(ReservedMetadataKeys.PerVertexLabel, "Label");
            
                    // Set the label's text and fill colors.
            
                    oVertexB.SetValue(ReservedMetadataKeys.PerColor,
                        Color.FromArgb(255, 220, 220, 220));
            
                    oVertexB.SetValue(ReservedMetadataKeys.PerVertexLabelFillColor,
                        Color.FromArgb(255, 0, 0, 0));
            
                    // Annotate vertex C with text that is drawn outside the vertex.  All
                    // shapes except Label can be annotated.
            
                    oVertexC.SetValue(ReservedMetadataKeys.PerVertexLabel, "Annotation");
            
                    // Get the graph's edge collection.
            
                    IEdgeCollection oEdges = nodeXLControl1.Graph.Edges;
            
                    // Connect the vertices with directed edges.
            
                    IEdge oEdge1 = oEdges.Add(oVertexA, oVertexB, true);
                    IEdge oEdge2 = oEdges.Add(oVertexB, oVertexC, true);
                    IEdge oEdge3 = oEdges.Add(oVertexC, oVertexA, true);
            
                    // Customize their appearance.
            
                    oEdge1.SetValue(ReservedMetadataKeys.PerColor,
                        Color.FromArgb(255, 55, 125, 98));
            
                    oEdge1.SetValue(ReservedMetadataKeys.PerEdgeWidth, 3F);
                    oEdge1.SetValue(ReservedMetadataKeys.PerEdgeLabel, "This is edge 1");
            
                    oEdge2.SetValue(ReservedMetadataKeys.PerEdgeWidth, 5F);
                    oEdge2.SetValue(ReservedMetadataKeys.PerEdgeLabel, "This is edge 2");
            
                    oEdge3.SetValue(ReservedMetadataKeys.PerColor,
                        Color.FromArgb(255, 0, 255, 0));
            
                    nodeXLControl1.DrawGraph(true);
                }
            }
            }
             </code>
             </example>
            
             <h3>Future Work</h3>
            
             <para>
             This is the first WPF version of the NodeXLControl.  It replaces a previous
             Windows Forms implementation.  This version provides the functionality
             needed by the NodeXL Excel Template project, but does not yet take
             advantage of WPF features such as dependency properties, routed events, and
             so on.  Additional WPF features may be added in future versions, depending
             on resource availability and how much demand there is for them.
             </para>
            
             </remarks>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MinimumGraphScale">
            <summary>
            Minimum value of the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphScale"/> property.  The value is
            0.01.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MaximumGraphScale">
            <summary>
            Maximum value of the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphScale"/> property.  The value is
            10.0.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MinimumGraphZoom">
            <summary>
            Minimum value of the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoom"/> property.  The value is
            1.0.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MaximumGraphZoom">
            <summary>
            Maximum value of the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoom"/> property.  The value is
            10.0.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MinimumEdgeBundlerStraightening">
            <summary>
            Minimum value of the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeBundlerStraightening"/> property.
            The value is 0.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MaximumEdgeBundlerStraightening">
            <summary>
            Maximum value of the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeBundlerStraightening"/> property.
            The value is 1.0.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseLeftClickZoomFactor">
            Zoom factor to use when the user zooms in with a mouse click.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseWheelZoomFactor">
            Zoom factor to use when the user zooms in with the mouse wheel.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexToolTipHideDelayMs">
            Number of milliseconds to wait before hiding a vertex tooltip.
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.#cctor">
            <summary>
            Static constructor for the <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/> class.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetFont(System.Windows.Media.Typeface,System.Double)">
             <summary>
             Sets the font used to draw labels.
             </summary>
            
             <param name="typeface">
             The Typeface to use.
             </param>
            
             <param name="fontSize">
             The font size to use, in WPF units.
             </param>
            
             <remarks>
             The default font is the SystemFonts.MessageFontFamily at size 10.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Smrf.NodeXL.Core.IVertex,System.Boolean,System.Boolean)">
             <summary>
             Selects or deselects a vertex.
             </summary>
            
             <param name="vertex">
             Vertex to select or deselect.  Can't be null.
             </param>
            
             <param name="selected">
             true to select <paramref name="vertex"/>, false to deselect it.
             </param>
            
             <param name="alsoIncidentEdges">
             true to also select or deselect the vertex's incident edges, false to
             leave the incident edges alone.
             </param>
            
             <remarks>
             Selecting or deselecting a vertex does not affect the selected state of
             the other vertices.
            
             <para>
             To select a set of vertices and edges, use the <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge})"/> method instead.
             </para>
            
             <para>
             An exception is thrown if the graph is being laid out when this method
             is called.  Check the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> property before
             calling this.
             </para>
            
             <para>
             If the vertex is hidden (meaning it has a <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/> key value of <see cref="F:Smrf.NodeXL.Core.VisibilityKeyValue.Hidden"/>), this method will not select the
             vertex.
             </para>
            
             <para>
             If the vertex is filtered (meaning it has a <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/> key value of <see cref="F:Smrf.NodeXL.Core.VisibilityKeyValue.Filtered"/> and <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FilteredAlpha"/>
             is zero, this method will not select the vertex.
             </para>
            
             <para>
             <b>Important Note:</b>
             </para>
            
             <para>
             Do not use the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.IsSelected"/> key to
             select vertex or edges.  Use the selection methods on this control
             instead.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Smrf.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.InvertSelection"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexOrEdgeIsSelected(Smrf.NodeXL.Core.IMetadataProvider)"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
             <seealso cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Smrf.NodeXL.Core.IEdge,System.Boolean,System.Boolean)">
             <summary>
             Selects or deselects an edge.
             </summary>
            
             <param name="edge">
             Edge to select or deselect.  Can't be null.
             </param>
            
             <param name="selected">
             true to select <paramref name="edge"/>, false to deselect it.
             </param>
            
             <param name="alsoAdjacentVertices">
             true to also select or deselect the edge's adjacent vertices, false to
             leave the adjacent vertices alone.
             </param>
            
             <remarks>
             Selecting or deselecting an edge does not affect the selected state of
             the other edges.
            
             <para>
             To select a set of vertices and edges, use the <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge})"/> method instead.
             </para>
            
             <para>
             An exception is thrown if the graph is being laid out when this method
             is called.  Check the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> property before
             calling this.
             </para>
            
             <para>
             If the edge is hidden (meaning it has a <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/> key value of <see cref="F:Smrf.NodeXL.Core.VisibilityKeyValue.Hidden"/>, this method will not select the
             edge.
             </para>
            
             <para>
             If the edge is filtered (meaning it has a <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/> key value of <see cref="F:Smrf.NodeXL.Core.VisibilityKeyValue.Filtered"/>) and <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FilteredAlpha"/>
             is zero, this method will not select the edge.
             </para>
            
             <para>
             <b>Important Note:</b>
             </para>
            
             <para>
             Do not use the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.IsSelected"/> key to
             select vertex or edges.  Use the selection methods on this control
             instead.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Smrf.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.InvertSelection"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexOrEdgeIsSelected(Smrf.NodeXL.Core.IMetadataProvider)"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
             <seealso cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge})">
             <summary>
             Selects a set of vertices and edges.
             </summary>
            
             <param name="vertices">
             Collection of zero or more vertices to select.
             </param>
            
             <param name="edges">
             Collection of zero or more edges to select.
             </param>
            
             <remarks>
             This method deselects any selected vertices and edges, then selects the
             vertices and edges specified in <paramref name="vertices"/> and
             <paramref name="edges"/>.  It is more efficient than making multiple
             calls to <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Smrf.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/> and <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Smrf.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>.
            
             <para>
             An exception is thrown if the graph is being laid out when this method
             is called.  Check the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> property before
             calling this.
             </para>
            
             <para>
             Hidden vertices and edges (those that have a <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/> key value of <see cref="F:Smrf.NodeXL.Core.VisibilityKeyValue.Hidden"/>) do not get selected.
             </para>
            
             <para>
             Filtered vertices and edges (those that have a <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/> key value of <see cref="F:Smrf.NodeXL.Core.VisibilityKeyValue.Filtered"/>) do not get selected if <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FilteredAlpha"/> is zero.
             </para>
            
             <para>
             <b>Important Note:</b>
             </para>
            
             <para>
             Do not use the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.IsSelected"/> key to
             select vertex or edges.  Use the selection methods on this control
             instead.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Smrf.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Smrf.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.InvertSelection"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexOrEdgeIsSelected(Smrf.NodeXL.Core.IMetadataProvider)"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
             <seealso cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll">
             <summary>
             Selects all vertices and edges.
             </summary>
            
             <remarks>
             An exception is thrown if the graph is being laid out when this method
             is called.  Check the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> property before
             calling this.
            
             <para>
             <b>Important Note:</b>
             </para>
            
             <para>
             Do not use the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.IsSelected"/> key to
             select vertex or edges.  Use the selection methods on this control
             instead.
             </para>
            
             <para>
             Hidden vertices and edges (those that have a <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/> key value of <see cref="F:Smrf.NodeXL.Core.VisibilityKeyValue.Hidden"/>) do not get selected.
             </para>
            
             <para>
             Filtered vertices and edges (those that have a <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/> key value of <see cref="F:Smrf.NodeXL.Core.VisibilityKeyValue.Filtered"/>) do not get selected if <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FilteredAlpha"/> is zero.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Smrf.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Smrf.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.InvertSelection"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexOrEdgeIsSelected(Smrf.NodeXL.Core.IMetadataProvider)"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
             <seealso cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll">
             <summary>
             Deselects all vertices and edges.
             </summary>
            
             <remarks>
             An exception is thrown if the graph is being laid out when this method
             is called.  Check the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> property before
             calling this.
            
             <para>
             <b>Important Note:</b>
             </para>
            
             <para>
             Do not use the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.IsSelected"/> key to
             select vertex or edges.  Use the selection methods on this control
             instead.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Smrf.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Smrf.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.InvertSelection"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexOrEdgeIsSelected(Smrf.NodeXL.Core.IMetadataProvider)"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
             <seealso cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.InvertSelection">
             <summary>
             Inverts the selection.
             </summary>
            
             <remarks>
             This method deselects all selected vertices and edges, and selects all
             unselected vertices and edges.
            
             <para>
             An exception is thrown if the graph is being laid out when this method
             is called.  Check the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> property before
             calling this.
             </para>
            
             <para>
             <b>Important Note:</b>
             </para>
            
             <para>
             Do not use the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.IsSelected"/> key to
             select vertex or edges.  Use the selection methods on this control
             instead.
             </para>
            
             <para>
             Hidden vertices and edges (those that have a <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/> key value of <see cref="F:Smrf.NodeXL.Core.VisibilityKeyValue.Hidden"/>) do not get selected.
             </para>
            
             <para>
             Filtered vertices and edges (those that have a <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/> key value of <see cref="F:Smrf.NodeXL.Core.VisibilityKeyValue.Filtered"/>) do not get selected if <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FilteredAlpha"/> is zero.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Smrf.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Smrf.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
             <seealso cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexOrEdgeIsSelected(Smrf.NodeXL.Core.IMetadataProvider)">
             <summary>
             Returns a flag indicating whether a vertex or edge is selected.
             </summary>
            
             <param name="vertexOrEdge">
             Vertex or edge to check, as an <see cref="T:Smrf.NodeXL.Core.IMetadataProvider"/>.
             </param>
            
             <returns>
             true if <paramref name="vertexOrEdge"/> is selected.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.TryGetVertexFromPoint(System.Windows.Point,Smrf.NodeXL.Core.IVertex@)">
             <summary>
             Attempts to get the vertex containing a specified <see cref="T:System.Windows.Point"/>.
             </summary>
            
             <param name="point">
             Point to get a vertex for.
             </param>
            
             <param name="vertex">
             Where the <see cref="T:Smrf.NodeXL.Core.IVertex"/> object gets stored if true is
             returned.
             </param>
            
             <returns>
             true if a vertex containing the point was found, false if not.
             </returns>
            
             <remarks>
             This method looks for a vertex that contains <paramref name="point"/>.
             If there is such a vertex, the vertex is stored at <paramref name="vertex"/> and true is returned.  Otherwise, <paramref name="vertex"/> is set to null and false is returned.
            
             <para>
             false is returned if an asynchronous drawing is in progress.  Check
             <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> before calling this method.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapseGroup(System.String,System.Boolean)">
             <summary>
             Collapses a group of vertices.
             </summary>
            
             <param name="groupName">
             The name of the group to collapse.  This must be the name of a group
             that was stored in the graph's metadata within the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.GroupInfo"/> key.
             </param>
            
             <param name="redrawGroupImmediately">
             true to redraw the collapsed group immediately.  If false, the
             collapsed group won't be redrawn until <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DrawGraph"/> is
             called.
             </param>
            
             <remarks>
             This method replaces the group of vertices specified by <paramref name="groupName"/> with a new "group vertex."  A group vertex has the
             color and shape of the group's first vertex, and its size is determined
             by the number of vertices in the group.  It has a plus sign in its
             center to distinguish it from regular vertices.
            
             <para>
             Internal edges that connected the group's vertices to each other are
             removed, and external edges that connected the group's vertices to
             vertices outside the group are reconnected to the new group vertex.
             </para>
            
             <para>
             Call <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ExpandGroup(System.String,System.Boolean)"/> to expand the group again.
             </para>
            
             <para>
             An exception is thrown if the graph is being laid out when this method
             is called.  Check the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> property before
             calling this.
             </para>
            
             <para>
             If the graph's metadata does not contain the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.GroupInfo"/> key, or it does contain the
             key but there is not a unique group with the specified name, this
             method does nothing.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ExpandGroup(System.String,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsCollapsedGroup(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectCollapsedGroup(System.String)"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapsedGroups"/>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ExpandGroup(System.String,System.Boolean)">
             <summary>
             Expands a group of collapsed vertices.
             </summary>
            
             <param name="groupName">
             The name of the group.  This must be a name that was previously passed
             to <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapseGroup(System.String,System.Boolean)"/>.
             </param>
            
             <param name="redrawGroupImmediately">
             true to redraw the expanded group immediately.  If false, the expanded
             group won't be redrawn until <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DrawGraph"/> is called.
             </param>
            
             <remarks>
             This method restores the group of vertices that were collapsed with
             <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapseGroup(System.String,System.Boolean)"/>.
            
             <para>
             An exception is thrown if the graph is being laid out when this method
             is called.  Check the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> property before
             calling this.
             </para>
            
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapseGroup(System.String,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsCollapsedGroup(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectCollapsedGroup(System.String)"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapsedGroups"/>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsCollapsedGroup(System.String)">
             <summary>
             Determines whether a group is collapsed.
             </summary>
            
             <param name="groupName">
             The name of the group to check.
             </param>
            
             <returns>
             true if the specified group is collapsed.
             </returns>
            
             <remarks>
             This method returns true if the group with the name <paramref name="groupName"/> has been collapsed by <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapseGroup(System.String,System.Boolean)"/>.
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapseGroup(System.String,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ExpandGroup(System.String,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectCollapsedGroup(System.String)"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapsedGroups"/>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectCollapsedGroup(System.String)">
             <summary>
             Selects the vertex that represents a collapsed group.
             </summary>
            
             <param name="groupName">
             The name of the group to select.  This must be a name that was
             previously passed to <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapseGroup(System.String,System.Boolean)"/>.
             </param>
            
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapseGroup(System.String,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ExpandGroup(System.String,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsCollapsedGroup(System.String)"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapsedGroups"/>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CopyGraphToBitmap(System.Int32,System.Int32)">
             <summary>
             Creates a bitmap image of the graph.
             </summary>
            
             <param name="bitmapWidthPx">
             Width of the bitmap image, in pixels.  Must be greater than 0.
             </param>
            
             <param name="bitmapHeightPx">
             Height of the bitmap image, in pixels.  Must be greater than 0.
             </param>
            
             <returns>
             A bitmap image of the graph displayed within the control, with the
             specified dimensions.
             </returns>
            
             <remarks>
             An exception is thrown if the graph is being laid out when this method
             is called.  Check the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> property before
             calling this.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DrawGraph">
             <overloads>
             Draws the graph.
             </overloads>
            
             <summary>
             Draws the graph without laying it out first.
             </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DrawGraph(System.Boolean)">
             <summary>
             Draws the graph after optionally laying it out.
             </summary>
            
             <param name="layOutGraphFirst">
             If true, the graph is laid out again before it is drawn.  If false, the
             graph is drawn using the current vertex locations.
             </param>
            
             <remarks>
             Graph layout occurs asynchronously after this method is called with a
             <paramref name="layOutGraphFirst"/> argument of true.  See the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> property for details.
            
             <para>
             If the graph is currently being laid out, this method does nothing.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ClearGraph">
             <summary>
             Clears the control's graph.
             </summary>
            
             <remarks>
             This method discards the control's graph, including all of its vertices
             and edges, and replaces it with a new, empty graph.  Any selection is
             also cleared.
            
             <para>
             This should be used instead of clearing the current graph's vertex and
             edge collections, which can cause unpredictable side effects.
             </para>
            
             <para>
             An exception is thrown if the graph is being laid out when this method
             is called.  Check the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> property before
             calling this.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SnapVerticesToGrid(System.Int32)">
             <summary>
             Snaps the graph's vertices to a grid.
             </summary>
            
             <param name="gridSize">
             Distance between gridlines, in WPF units.  Must be greater than zero.
             </param>
            
             <remarks>
             This method can be used to separate vertices that obscure each other
             by snapping them to the nearest grid location, using a specified grid
             size.  The graph should be laid out before this method is called, and
             it must be drawn again using <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DrawGraph"/> to get the
             vertices to appear in their new locations.
            
             <para>
             An exception is thrown if the graph is being laid out when this method
             is called.  Check the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> property before
             calling this.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapseGroupInternal(Smrf.NodeXL.Core.GroupInfo,System.Boolean)">
             <summary>
             Collapses a group of vertices.
             </summary>
            
             <param name="oGroupToCollapse">
             The group to collapse.
             </param>
            
             <param name="bRedrawGroupImmediately">
             true to redraw the collapsed group immediately.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetGroupVertexAttributes(Smrf.NodeXL.Core.GroupInfo,Smrf.NodeXL.Core.IVertex,System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex})">
             <summary>
             Sets attributes on the vertex that represents a collapsed group.
             </summary>
            
             <param name="oCollapsedGroup">
             The collapsed group.
             </param>
            
             <param name="oCollapsedGroupVertex">
             The vertex that represents the collapsed group.
             </param>
            
             <param name="oVerticesToCollapse">
             The vertices represented by <paramref name="oCollapsedGroupVertex" />.
             It's assumed that the collection is not empty.
             </param>
            
             <remarks>
             This method gets called when a group of vertices is collapsed and
             replaced with a group vertex.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.AddEdgeDuringGroupCollapseOrExpand(Smrf.NodeXL.Core.IEdge,System.Boolean)">
             <summary>
             Adds an edge to the graph while a group is being collapsed or expanded.
             </summary>
            
             <param name="oEdge">
             The edge to add to the graph.
             </param>
            
             <param name="bDrawEdge">
             true to draw the edge immediately.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.AddVertexDuringGroupExpand(Smrf.NodeXL.Core.IVertex,System.Boolean,System.Random)">
             <summary>
             Adds a vertex to the graph while a group is being expanded.
             </summary>
            
             <param name="oVertex">
             The vertex to add to the graph.
             </param>
            
             <param name="bDrawVertex">
             true to draw the vertex immediately.
             </param>
            
             <param name="oRandom">
             If the added vertex has never been laid out and <paramref
             name="bDrawVertex" /> is true, the vertex is given a random location
             using this Random object.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.RemoveEdgeDuringGroupCollapseOrExpand(Smrf.NodeXL.Core.IEdge,System.Boolean)">
             <summary>
             Removes an edge from the graph while a group is being collapsed or
             expanded.
             </summary>
            
             <param name="oEdge">
             The edge to remove from the graph.
             </param>
            
             <param name="bUndrawEdge">
             true to undraw the edge immediately.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.RemoveVertexDuringGroupCollapseOrExpand(Smrf.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Removes a vertex from the graph while a group is being collapsed or
             expanded.
             </summary>
            
             <param name="oVertex">
             The vertex to remove from the graph.
             </param>
            
             <param name="bUndrawVertex">
             true to undraw the vertex immediately.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.UpdateCollapsedGroupLocations(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex})">
             <summary>
             Updates the collapsed group locations stored within a collection of
             vertices.
             </summary>
            
             <param name="oVertices">
             Collection of vertices, some of which may represent collapsed groups.
             </param>
            
             <remarks>
             For each vertex in <paramref name="oVertices"/> that represents a
             collapsed group, this method updates the <see cref="P:Smrf.NodeXL.Core.GroupInfo.CollapsedLocation"/> property for the group.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MoveSelectedVertices(System.Single,System.Single)">
             <summary>
             Moves any selected vertices by a specified amount.
             </summary>
            
             <param name="fXDistance">
             The distance to move the vertices along the X axis.  Can be negative.
             </param>
            
             <param name="fYDistance">
             The distance to move the vertices along the Y axis.  Can be negative.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.OnNewLayout(Smrf.NodeXL.Layouts.ILayout)">
             <summary>
             Performs required tasks when a new layout is used.
             </summary>
            
             <param name="oNewLayout">
             The new layout object.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CreateGraphDrawer">
            <summary>
            Create a GraphDrawer object.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CreateVertexToolTipTracker">
            <summary>
            Creates a helper object for displaying vertex tooltips and registers
            event handlers with it.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CreateDefaultVertexToolTip(System.String)">
             <summary>
             Creates a UIElement to use as a default vertex tooltip.
             </summary>
            
             <param name="sToolTip">
             The tooltip string to use.  Can be empty but not null.
             </param>
            
             <returns>
             A UIElement.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CreateEdgeBundler">
             <summary>
             Creates a new <see cref="T:Smrf.NodeXL.Layouts.EdgeBundler"/> object.
             </summary>
            
             <returns>
             A new <see cref="T:Smrf.NodeXL.Layouts.EdgeBundler"/> object.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.BundleAllEdgesIfAppropriate">
            <summary>
            Bundles all edges if appropriate.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.RebundleIncidentEdgesIfAppropriate(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex})">
             <summary>
             Rebundles the edges that are incident to a specified set of vertices,
             if appropriate.
             </summary>
            
             <param name="oVertices">
             The vertices whose edges should be rebundled.
             </param>
            
             <remarks>
             This method uses the <see cref="T:Smrf.NodeXL.Layouts.EdgeBundler"/> class to recalculate
             the intermediate curve points for all edges incident to the specified
             vertices.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CreateTransforms">
            <summary>
            Creates the transforms that control zoom and scale.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetGraphZoom(System.Double,System.Boolean)">
             <summary>
             Sets a value that determines the zoom level of the graph.
             </summary>
            
             <param name="dGraphZoom">
             A value that determines the zoom level of the graph.  Must be between
             <see cref="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MinimumGraphZoom"/> and <see cref="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MaximumGraphZoom"/>.
             </param>
            
             <param name="bLimitTranslation">
             If true, the TranslateTransform used for rendering is limited to
             prevent the graph from being moved too far by the zoom.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CenterGraphZoom">
             <summary>
             Sets the center of the graph's zoom to the center of the control.
             </summary>
            
             <remarks>
             This method uses ActualWidth and ActualHeight, which are valid only
             after a WPF layout cycle.  If this is called before a WPF layout cycle
             completes, the zoom center is set to the control's origin.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.LimitTranslation">
             <overloads>
             Prevents the graph from being moved too far.
             </overloads>
            
             <summary>
             Prevents the graph from being moved too far by adjusting the
             TranslateTransform used for rendering.
             </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.LimitTranslation(System.Double@,System.Double@)">
             <summary>
             Prevents the graph from being moved too far, given a pair of proposed
             translation distances.
             </summary>
            
             <param name="dTranslateX">
             On input, this is the proposed TranslateTransform.X property.  On
             output, it is set to a value that will prevent the graph from being
             moved too far.
             </param>
            
             <param name="dTranslateY">
             On input, this is the proposed TranslateTransform.Y property.  On
             output, it is set to a value that will prevent the graph from being
             moved too far.
             </param>
            
             <remarks>
             The caller should modify the TranslateTransform with the modified
             <paramref name="dTranslateX" /> and <paramref name="dTranslateY" />
             values.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GetVisualChild(System.Int32)">
             <summary>
             Returns a child at the specified index from a collection of child
             elements. 
             </summary>
            
             <param name="index">
             The zero-based index of the requested child element in the collection.
             </param>
            
             <returns>
             The requested child element.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.LayOutOrDrawGraph">
            <summary>
            Lays out or draws the graph, depending on the current layout state.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DrawGraph(System.Windows.Rect)">
             <summary>
             Draws the graph in a specified rectangle without laying it out first.
             </summary>
            
             <param name="oGraphRectangle">
             Rectangle to draw the graph within.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.TransformLayout(System.Windows.Rect)">
             <summary>
             Transforms the graph's layout to a new size.
             </summary>
            
             <param name="oNewGraphRectangle">
             The new size.
             </param>
            
             <returns>
             The new LayoutContext object that was used to transform the layout.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.TryGetLayoutRectangleMinusMargin(System.Drawing.Rectangle@)">
             <summary>
             Attempts to get the rectangle the graph was laid out within, reduced on
             all sides by the margin.
             </summary>
            
             <param name="oLayoutRectangleMinusMargin">
             Where the rectangle gets stored if true is returned.
             </param>
            
             <returns>
             true if the rectangle was obtained, false if the control is narrower or
             shorter than twice the margin.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetAllSelected(System.Boolean)">
             <summary>
             Selects or deselects all vertices and edges.
             </summary>
            
             <param name="bSelect">
             true to select, false to deselect.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetAllVerticesSelected(System.Boolean)">
             <summary>
             Sets the selected state of all vertices.
             </summary>
            
             <param name="bSelected">
             true to select all vertices, false to deselect them.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetAllEdgesSelected(System.Boolean)">
             <summary>
             Sets the selected state of all edges and updates the internal
             collection of selected edges.
             </summary>
            
             <param name="bSelected">
             true to select all edges, false to deselect them.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelectedInternal(Smrf.NodeXL.Core.IVertex,System.Boolean)">
             <summary>
             Performs all tasks required to select or deselect a vertex.
             </summary>
            
             <param name="oVertex">
             Vertex to select or deselect.  Can't be null.
             </param>
            
             <param name="bSelected">
             true to select <paramref name="oVertex" />, false to deselect it.
             </param>
            
             <remarks>
             If the vertex can't be selected or deselected, this method does
             nothing.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelectedInternal(Smrf.NodeXL.Core.IEdge,System.Boolean)">
             <summary>
             Performs all tasks required to select or deselect an edge.
             </summary>
            
             <param name="oEdge">
             Edge to select or deselect.  Can't be null.
             </param>
            
             <param name="bSelected">
             true to select <paramref name="oEdge" />, false to deselect it.
             </param>
            
             <remarks>
             If the edge can't be selected or deselected, this method does nothing.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexOrEdgeCanBeSelected(Smrf.NodeXL.Core.IMetadataProvider,System.Boolean)">
             <summary>
             Determines whether a vertex or edge can be selected or deselected.
             </summary>
            
             <param name="oVertexOrEdge">
             Vertex or edge to test, as an <see cref="T:Smrf.NodeXL.Core.IMetadataProvider"/>.
             </param>
            
             <param name="bSelected">
             true to test whether <paramref name="oVertexOrEdge"/> can be selected,
             false to test whether it can be deselected.
             </param>
            
             <returns>
             true if the vertex or edge can be selected or deselected.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MarkVertexOrEdgeAsSelected(Smrf.NodeXL.Core.IMetadataProvider,System.Boolean)">
             <summary>
             Modifies the metadata of a vertex or edge to mark it as selected or
             unselected.
             </summary>
            
             <param name="oVertexOrEdge">
             Vertex or edge to mark, as an <see cref="T:Smrf.NodeXL.Core.IMetadataProvider"/>.
             </param>
            
             <param name="bSelected">
             true to mark <paramref name="oVertexOrEdge"/> as selected, false for
             unselected.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ResetVertexToolTipTracker">
            <summary>
            Removes any vertex tooltip that might exist and resets the helper
            object that figures out when to show tooltips.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.RemoveVertexToolTip">
            <summary>
            Removes any vertex tooltip that might exist.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GetBackgroundContrastColor">
             <summary>
             Gets a color that contrasts with the background.
             </summary>
            
             <returns>
             A contrastring color.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CheckIfLayingOutGraph(System.String)">
             <summary>
             Throws an exception if a layout is in progress.
             </summary>
            
             <param name="sMethodOrPropertyName">
             Name of the method or property calling this method.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CheckForVertexDragOnMouseMove(System.Windows.Input.MouseEventArgs)">
             <summary>
             Checks for a vertex drag operation during the MouseMove event.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CheckForVertexDragOnMouseUp(System.Windows.Input.MouseEventArgs)">
             <summary>
             Checks for a vertex drag operation during the MouseUp event.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CheckForMarqueeDragOnMouseMove(System.Windows.Input.MouseEventArgs)">
             <summary>
             Checks for a marquee drag operation during the MouseMove event.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CheckForMarqueeDragOnMouseUp(System.Windows.Input.MouseEventArgs)">
             <summary>
             Checks for a marquee drag operation during the MouseUp event.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CheckForTranslationDragOnMouseMove(System.Windows.Input.MouseEventArgs)">
             <summary>
             Checks for a translation drag operation during the MouseMove event.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CheckForTranslationDragOnMouseUp(System.Windows.Input.MouseEventArgs)">
             <summary>
             Checks for a translation drag operation during the MouseUp event.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CheckForToolTipsOnMouseMove(System.Windows.Input.MouseEventArgs)">
             <summary>
             Checks whether tooltip-related actions need to be taken during the
             MouseMove event.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EscapeKeyIsPressed">
             <summary>
             Determines whether the Escape key is pressed.
             </summary>
            
             <returns>
             true if the Escape key is pressed.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ControlKeyIsPressed">
             <summary>
             Determines whether a Control key is pressed.
             </summary>
            
             <returns>
             true if a Control key is pressed.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.StartTranslationDrag(System.Windows.Point)">
             <summary>
             Starts a translation drag operation.
             </summary>
            
             <param name="oMouseLocation">
             Mouse location, relative to the control.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DragIsInProgress(Smrf.NodeXL.Visualization.Wpf.MouseDrag,System.Windows.Input.MouseEventArgs,System.Windows.Input.MouseButtonState[],System.Windows.Point@)">
             <summary>
             Determines whether a particular type of mouse drag is in progress.
             </summary>
            
             <param name="oMouseDrag">
             Object that represents the drag operation, or null if the drag
             operation hasn't begun.
             </param>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
            
             <param name="aeMouseButtonStates">
             Array of button states, one for each button that can be pressed to
             allow the drag to be considered in progress.
             </param>
            
             <param name="oMouseLocation">
             Where the mouse location get stored if true is returned.
             </param>
            
             <returns>
             true if the specified mouse drag is in progress.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DragMightBeInProgress">
             <summary>
             Determines whether any kind of mouse drag is in progress or will be
             in progress if the user moves the mouse.
             </summary>
            
             <returns>
             true if a mouse drag is in progress, or if a MouseDrag object has been
             created and is waiting for the user to move the mouse to begin a drag.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.RemoveVisualFromTopOfGraph(Smrf.NodeXL.Visualization.Wpf.MouseDragWithVisual)">
             <summary>
             Removes from the top of the graph any Visual drawn during a MouseMove
             event.
             </summary>
            
             <param name="oMouseDragWithVisual">
             Object that represents the drag operation, or null if the drag
             operation hasn't begun.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GetCursorForMarqueeDrag">
             <summary>
             Returns a cursor to use for the control while a marquee drag operation
             is occurring.
             </summary>
            
             <returns>
             The cursor to use.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectMarqueedVertices">
            <summary>
            Selects or deselects the marqueed vertices.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ZoomViaMouse(System.Windows.Input.MouseEventArgs,System.Double)">
             <summary>
             Zooms the graph via the mouse.
             </summary>
            
             <param name="e">
             The MouseEventArgs that contains the event data.
             </param>
            
             <param name="dGraphZoomFactor">
             Factor by which to multiply the current value of <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoom"/>.  Must be greater than zero.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FireSelectionChanged">
            <summary>
            Fires the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FireGraphMouseDown(System.Windows.Input.MouseButtonEventArgs,Smrf.NodeXL.Core.IVertex)">
             <summary>
             Fires the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphMouseDown"/> event if appropriate.
             </summary>
            
             <param name="oMouseButtonEventArgs">
             Standard mouse event arguments.
             </param>
            
             <param name="oVertex">
             Clicked vertex if the user clicked on a vertex, or null if he didn't.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FireGraphMouseUp(System.Windows.Input.MouseButtonEventArgs,Smrf.NodeXL.Core.IVertex)">
             <summary>
             Fires the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphMouseUp"/> event if appropriate.
             </summary>
            
             <param name="oMouseButtonEventArgs">
             Standard mouse event arguments.
             </param>
            
             <param name="oVertex">
             Clicked vertex if the user clicked on a vertex, or null if he didn't.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FireVertexClick(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Fires the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexClick"/> event if appropriate.
             </summary>
            
             <param name="oVertex">
             Clicked vertex.  Can't be null.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FireVertexDoubleClick(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Fires the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexDoubleClick"/> event if appropriate.
             </summary>
            
             <param name="oVertex">
             Double-clicked vertex.  Can't be null.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FireVertexMouseHover(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Fires the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseHover"/> event if appropriate.
             </summary>
            
             <param name="oVertex">
             Hovered vertex.  Can't be null.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FireVertexMouseLeave">
            <summary>
            Fires the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseLeave"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FireGraphZoomChanged">
            <summary>
            Fires the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoomChanged"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FireGraphScaleChanged">
            <summary>
            Fires the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphScaleChanged"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FireGraphTranslationChanged">
            <summary>
            Fires the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphTranslationChanged"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FireVerticesMoved(System.Collections.Generic.ICollection{Smrf.NodeXL.Core.IVertex})">
             <summary>
             Fires the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VerticesMoved"/> event if appropriate.
             </summary>
            
             <param name="oMovedVertices">
             A collection of one or more vertices that were moved.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FireLayingOutGraph">
            <summary>
            Fires the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.LayingOutGraph"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FireGraphLaidOut(System.ComponentModel.AsyncCompletedEventArgs)">
             <summary>
             Fires the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphLaidOut"/> event if appropriate.
             </summary>
            
             <param name="oAsyncCompletedEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FirePreviewVertexToolTipShown(Smrf.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs)">
             <summary>
             Fires the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.PreviewVertexToolTipShown"/> event if
             appropriate.
             </summary>
            
             <param name="oVertexToolTipShownEventArgs">
             Event arguments.  The event handler may modify the <see cref="P:Smrf.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs.VertexToolTip"/> property.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FireVertexEvent(Smrf.NodeXL.Core.VertexEventHandler,Smrf.NodeXL.Core.IVertex)">
             <summary>
             Fires an event with the signature VertexEventHandler.
             </summary>
            
             <param name="oVertexEventHandler">
             Event handler, or null if the event isn't being handled.
             </param>
            
             <param name="oVertex">
             Vertex associated with the event.  Can't be null.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FireGraphMouseButtonEvent(Smrf.NodeXL.Visualization.Wpf.GraphMouseButtonEventHandler,System.Windows.Input.MouseButtonEventArgs,Smrf.NodeXL.Core.IVertex)">
             <summary>
             Fires an event with the signature GraphMouseButtonEventHandler.
             </summary>
            
             <param name="oGraphMouseButtonEventHandler">
             Event handler, or null if the event isn't being handled.
             </param>
            
             <param name="oMouseButtonEventArgs">
             Standard mouse event arguments.
             </param>
            
             <param name="oVertex">
             Vertex associated with the event.  Can be null.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MeasureOverride(System.Windows.Size)">
             <summary>
             When overridden in a derived class, measures the size in layout
             required for child elements and determines a size for the
             FrameworkElement-derived class. 
             </summary>
            
             <param name="availableSize">
             The available size that this element can give to child elements.
             Infinity can be specified as a value to indicate that the element will
             size to whatever content is available.
             </param>
            
             <returns>
             The size that this element determines it needs during layout, based on
             its calculations of child element sizes.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ArrangeOverride(System.Windows.Size)">
             <summary>
             When overridden in a derived class, positions child elements and
             determines a size for a FrameworkElement derived class. 
             </summary>
            
             <param name="finalSize">
             The final area within the parent that this element should use to
             arrange itself and its children.
             </param>
            
             <returns>
             The actual size used.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.OnRender(System.Windows.Media.DrawingContext)">
             <summary>
             Renders the control.
             </summary>
            
             <param name="drawingContext">
             The drawing instructions for a specific element. This context is
             provided to the layout system.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
             <summary>
             Raises the SizeChanged event, using the specified information as part
             of the eventual event data.
             </summary>
            
             <param name="sizeInfo">
             Details of the old and new size involved in the change.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
             <summary>
             Handles the KeyDown event.
             </summary>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
             <summary>
             Handles the MouseDown event.
             </summary>
            
             <param name="e">
             The MouseButtonEventArgs that contains the event data.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.OnMouseDownLeft(System.Windows.Input.MouseButtonEventArgs,System.Windows.Point,Smrf.NodeXL.Core.IVertex)">
             <summary>
             Handles the MouseDown event for the left mouse button.
             </summary>
            
             <param name="e">
             The MouseButtonEventArgs that contains the event data.
             </param>
            
             <param name="oMouseLocation">
             Mouse location, relative to the control.
             </param>
            
             <param name="oClickedVertex">
             The vertex that was clicked, or null if an empty area of the graph was
             clicked.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.OnMouseDownLeftVertexNotClicked(System.Windows.Point)">
             <summary>
             Handles the MouseDown event for the left mouse button when the user
             clicked on part of the graph not covered by a vertex.
             </summary>
            
             <param name="oMouseLocation">
             Mouse location, relative to the control.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.OnMouseDownMiddle(System.Windows.Point)">
             <summary>
             Handles the MouseDown event for the middle mouse button.
             </summary>
            
             <param name="oMouseLocation">
             Mouse location, relative to the control.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.OnMouseDownRight(System.Windows.Point,Smrf.NodeXL.Core.IVertex)">
             <summary>
             Handles the MouseDown event for the right mouse button.
             </summary>
            
             <param name="oMouseLocation">
             Mouse location, relative to the control.
             </param>
            
             <param name="oClickedVertex">
             The vertex that was clicked, or null if an empty area of the graph was
             clicked.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.OnMouseMove(System.Windows.Input.MouseEventArgs)">
             <summary>
             Handles the MouseMove event.
             </summary>
            
             <param name="e">
             The MouseEventArgs that contains the event data.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
             <summary>
             Handles the MouseUp event.
             </summary>
            
             <param name="e">
             The MouseButtonEventArgs that contains the event data.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
             <summary>
             Handles the MouseLeave event.
             </summary>
            
             <param name="e">
             The MouseEventArgs that contains the event data.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
             <summary>
             Handles the MouseWheel event.
             </summary>
            
             <param name="e">
             The MouseWheelEventArgs that contains the event data.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.OnVertexDoubleClickLeft(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Performs tasks required when a vertex is double-clicked with the left
             mouse button.
             </summary>
            
             <param name="oDoubleClickedVertex">
             The vertex that was double-clicked.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.Layout_LayOutGraphCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
             <summary>
             Handles the LayOutGraphCompleted event on the m_oLayout object.
             </summary>
            
             <param name="oSender">
             Standard event argument.
             </param>
            
             <param name="oAsyncCompletedEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeDrawer_CurveStyleChanged(System.Object,System.EventArgs)">
             <summary>
             Handles the CurveStyleChanged event on the EdgeDrawer object.
             </summary>
            
             <param name="oSender">
             Standard event argument.
             </param>
            
             <param name="oEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexToolTipTracker_ShowToolTip(System.Object,Smrf.GraphicsLib.ToolTipTrackerEventArgs)">
             <summary>
             Handles the ShowToolTip event on the m_oVertexToolTipTracker object.
             </summary>
            
             <param name="oSource">
             Standard event arguments.
             </param>
            
             <param name="oToolTipTrackerEventArgs">
             Standard event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexToolTipTracker_HideToolTip(System.Object,Smrf.GraphicsLib.ToolTipTrackerEventArgs)">
             <summary>
             Handles the HideToolTip event on the m_oVertexToolTipTracker object.
             </summary>
            
             <param name="oSource">
             Standard event arguments.
             </param>
            
             <param name="oToolTipTrackerEventArgs">
             Standard event arguments.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_oGraph">
            The graph being drawn.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_oGraphDrawer">
            Draws the graph onto a collection of Visual objects.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_fEdgeBundlerStraightening">
            Determines how much straightening is applied when edges are bundled.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_oLayout">
            Object used to lay out the graph.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_oLastLayoutContext">
            Layout context most recently used to lay out the graph.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_oLastGraphDrawingContext">
            GraphDrawingContext most recently used to draw the graph, or null if
            the graph hasn't been drawn yet.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_eLayoutState">
            Indicates the state of the graph's layout.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_eMouseMode">
            Determines how the mouse can be used to interact with the graph.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_bMouseAlsoSelectsIncidentEdges">
            true if selecting or deselecting a vertex with the mouse also selects
            or deselects its incident edges.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_bAllowVertexDrag">
            true if a vertex can be moved by dragging it with the mouse.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_oVerticesBeingDragged">
            Vertex the user is dragging with the mouse, or null if a vertex isn't
            being dragged.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_oMarqueeBeingDragged">
            Marquee the user is dragging with the mouse, or null if a marquee isn't
            being dragged.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_oTranslationBeingDragged">
            The translation the user is dragging with the mouse, or null if a
            translation isn't being dragged.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_oSelectedVertices">
            Selected vertices and edges.  HashSets are used instead of lists or
            arrays to prevent the same vertex or edge from being added twice.  The
            keys are IVertex or IEdge.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_oSelectedEdges">
            
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_oCollapsedGroups">
            Dictionary of the groups that are collapsed.  The key is the group name
            and the value is the vertex that represents the collapsed group.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_oDoubleClickedVertexInfo">
            Information about the vertex that was just double-clicked, or null if
            a vertex wasn't just double-clicked.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_bShowVertexToolTips">
            true to show vertex tooltips.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_oLastMouseMoveLocation">
            Location of the mouse during the most recent MouseMove event, or
            (-1,-1) if that event hasn't fired yet.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_oVertexToolTipTracker">
            Helper object for figuring out when to show vertex tooltips.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_oVertexToolTip">
            The vertex tooltip being displayed, or null if no vertex tooltip is
            being displayed.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.m_bGraphZoomCentered">
            See OnRenderSizeChanged().
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.Graph">
             <summary>
             Gets or sets the graph to draw.
             </summary>
            
             <value>
             The graph to draw, as an <see cref="T:Smrf.NodeXL.Core.IGraph"/>.
             </value>
            
             <remarks>
             After the graph is populated or modified, you must call <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DrawGraph(System.Boolean)"/> to draw it.
            
             <para>
             An exception is thrown if this property is set while an asynchronous
             layout is in progress.  Check <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> before
             using this property.
             </para>
            
             <para>
             Do not set this property to a graph that is already owned by another
             graph drawer.  If you want to simultaneously draw the same graph with
             two different graph drawers, make a copy of the graph using
             IGraph.<see cref="M:Smrf.NodeXL.Core.IGraph.Clone(System.Boolean,System.Boolean)"/>.
             </para>
            
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.Layout">
             <summary>
             Gets or sets the object to use to lay out the graph.
             </summary>
            
             <value>
             The object to use to lay out the graph, as an <see cref="T:Smrf.NodeXL.Layouts.ILayout"/>.
             The default value is a <see cref="T:Smrf.NodeXL.Layouts.FruchtermanReingoldLayout"/> object.
             </value>
            
             <remarks>
             An exception is thrown if this property is set while an asynchronous
             layout is in progress.  Check <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> before
             using this property.
            
             <para>
             This property can be set to any object that implements <see cref="T:Smrf.NodeXL.Layouts.ILayout"/>, whether it is provided by NodeXL or implemented
             by the application.  For a list of provided layout classes, see <see cref="T:Smrf.NodeXL.Layouts.LayoutBase"/>.
             </para>
            
             </remarks>
            
             <example>
             The example shows how to lay out the graph as a grid:
            
             <code>
             Debug.Assert(!nodeXLControl.IsLayingOutGraph);
             nodeXLControl.Layout = new GridLayout();
             </code>
            
             </example>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.BackColor">
             <summary>
             Gets or sets the graph's background color.
             </summary>
            
             <value>
             The graph's background color, as a <see cref="T:System.Windows.Media.Color"/>.  The default value is
             SystemColors.<see cref="P:System.Windows.SystemColors.WindowColor"/>.
             </value>
            
             <remarks>
             When the graph is drawn, the background color specified by this
             property is drawn first, followed by any background image specified by
             <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.BackgroundImage"/>, followed by the graph itself.
            
             <para>
             This is called BackColor instead of BackgroundColor for consistency
             with the rest of the .NET Framework.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.BackgroundImage"/>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.BackgroundImage">
             <summary>
             Gets or sets the graph's background image.
             </summary>
            
             <value>
             The graph's background image, as an ImageSource, or null for no
             background image.  The default value is null.
             </value>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.BackColor"/>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexShape">
             <summary>
             Gets or sets the default shape of the vertices.
             </summary>
            
             <value>
             The default shape of the vertices, as a <see cref="T:Smrf.NodeXL.Visualization.Wpf.VertexShape"/>.
             The default value is <see cref="F:Smrf.NodeXL.Visualization.Wpf.VertexShape.Disk"/>.
             </value>
            
             <remarks>
             The default shape of a vertex can be overridden by setting the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexShape"/> key on the vertex.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexRadius">
             <summary>
             Gets or sets the default radius of the vertices.
             </summary>
            
             <value>
             The default radius of the vertices, as a <see cref="T:System.Double"/>.  Must
             be between <see cref="F:Smrf.NodeXL.Visualization.Wpf.VertexDrawer.MinimumRadius"/> and <see cref="F:Smrf.NodeXL.Visualization.Wpf.VertexDrawer.MaximumRadius"/>, inclusive.  The default value
             is 3.0.
             </value>
            
             <remarks>
             The default radius of a vertex can be overridden by setting the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexRadius"/> key on the vertex.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexColor">
             <summary>
             Gets or sets the default color of unselected vertices.
             </summary>
            
             <value>
             The default color of unselected vertices, as a <see cref="T:System.Windows.Media.Color"/>.
             The default value is <see cref="P:System.Windows.SystemColors.WindowTextColor"/>.
             </value>
            
             <remarks>
             The default color of an unselected vertex can be overridden by setting
             the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerColor"/> key on the vertex.
             The key's value can be of type System.Drawing.Color or
             System.Windows.Media.Color.
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexSelectedColor"/>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexSelectedColor">
             <summary>
             Gets or sets the color of selected vertices.
             </summary>
            
             <value>
             The color of selected vertices, as a <see cref="T:System.Windows.Media.Color"/>.  The default
             value is <see cref="P:System.Windows.SystemColors.HighlightColor"/>.
             </value>
            
             <remarks>
             The color of selected vertices cannot be set on a per-vertex basis.
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexColor"/>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexLabelFillColor">
             <summary>
             Gets or sets the default fill color to use for vertices that have the
             Label shape.
             </summary>
            
             <value>
             The default fill color to use.  The default is
             SystemColors.WindowColor.
             </value>
            
             <remarks>
             <see cref="T:System.Windows.Media.Color"/> is used for the label text and outline.
            
             <para>
             The default fill color of a vertex can be overridden by setting the
             <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabelFillColor"/> key on the
             vertex.
             </para>
            
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexLabelPosition">
             <summary>
             Gets or sets the default position of a vertex label drawn as an
             annotation.
             </summary>
            
             <value>
             The default position of a vertex label drawn as an annotation.  The
             default is <see cref="F:Smrf.NodeXL.Visualization.Wpf.VertexLabelPosition.TopRight"/>.
             </value>
            
             <remarks>
             This property is not used when drawing vertices that have the shape
             <see cref="F:Smrf.NodeXL.Visualization.Wpf.VertexShape.Label"/>.
            
             <para>
             The default vertex label position can be overridden by setting the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexLabelPosition"/> key on the
             vertex.
             </para>
            
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeWidth">
             <summary>
             Gets or sets the default edge width.
             </summary>
            
             <value>
             The default edge width, as a <see cref="T:System.Double"/>.  Must be between
             <see cref="F:Smrf.NodeXL.Visualization.Wpf.EdgeDrawer.MinimumWidth"/> and <see cref="F:Smrf.NodeXL.Visualization.Wpf.EdgeDrawer.MaximumWidth"/>, inclusive.  The default value
             is 1.
             </value>
            
             <remarks>
             The default edge width can be overridden by setting the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerEdgeWidth"/> key on the edge.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeColor">
             <summary>
             Gets or sets the default color of unselected edges.
             </summary>
            
             <value>
             The default color of unselected edges, as a <see cref="T:System.Windows.Media.Color"/>.  The
             default value is <see cref="P:System.Windows.SystemColors.WindowTextColor"/>.
             </value>
            
             <remarks>
             The default color of an unselected edge can be overridden by setting
             the <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerColor"/> key on the edge.  The
             key's value can be of type System.Drawing.Color or
             System.Windows.Media.Color.
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeSelectedColor"/>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeSelectedColor">
             <summary>
             Gets or sets the color of selected edges.
             </summary>
            
             <value>
             The color of selected edges, as a <see cref="T:System.Windows.Media.Color"/>.  The default
             value is <see cref="P:System.Windows.SystemColors.HighlightColor"/>.
             </value>
            
             <remarks>
             The color of selected edges cannot be set on a per-vertex basis.
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeColor"/>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeRelativeArrowSize">
             <summary>
             Gets or sets the relative size of arrowheads on directed edges.
             </summary>
            
             <value>
             The relative size of arrowheads, as a <see cref="T:System.Double"/>.  Must be
             between <see cref="F:Smrf.NodeXL.Visualization.Wpf.EdgeDrawer.MinimumRelativeArrowSize"/> and <see cref="F:Smrf.NodeXL.Visualization.Wpf.EdgeDrawer.MaximumRelativeArrowSize"/>, inclusive.  The
             default value is 3.
             </value>
            
             <remarks>
             The value is relative to <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeWidth"/>.  If the width is
             increased, the arrow size is increased proportionally.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeBundlerStraightening">
             <summary>
             Gets or sets a value that determines how much straightening is applied
             when edges are bundled.
             </summary>
            
             <value>
             A value between <see cref="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MinimumEdgeBundlerStraightening"/> and <see cref="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MaximumEdgeBundlerStraightening"/>, where larger values result
             in more edge straightening.  The default value is 0.15.
             </value>
            
             <remarks>
             This is used only when the <see cref="P:Smrf.NodeXL.Visualization.Wpf.EdgeDrawer.CurveStyle"/>
             property on the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeDrawer"/> object is set to <see cref="F:Smrf.NodeXL.Visualization.Wpf.EdgeCurveStyle.CurveThroughIntermediatePoints"/>, in which case
             the <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/> uses an internal <see cref="T:Smrf.NodeXL.Layouts.EdgeBundler"/> object to calculate the intermediate points.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.FilteredAlpha">
             <summary>
             Gets or sets the alpha value to use for vertices and edges that are
             filtered.
             </summary>
            
             <value>
             The alpha value to use for vertices and edges that have a <see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.Visibility"/> value of <see cref="F:Smrf.NodeXL.Core.VisibilityKeyValue.Filtered"/>.  Must be between 0 (invisible)
             and 255 (opaque).  The default value is 10.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode">
             <summary>
             Gets or sets a value that determines how the mouse can be used to
             interact with the graph.
             </summary>
            
             <value>
             A <see cref="T:Smrf.NodeXL.Visualization.Wpf.MouseMode"/> value.  The default value
             is <see cref="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.Select"/>.
             </value>
            
             <remarks>
             The mouse behavior is also affected by the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges"/> property.
            
             <para>
             When this property is set to <see cref="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.Select"/>, clicking on a vertex
             results in the following sequence:
             </para>
            
             <list type="bullet">
            
             <item><description>
             The <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphMouseDown"/> event fires.
             </description></item>
            
             <item><description>
             The <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexClick"/> event fires.
             </description></item>
            
             <item><description>
             The vertex and possibly its incident edges are redrawn as selected or
             unselected.
             </description></item>
            
             <item><description>
             The <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/> event fires.
             </description></item>
            
             <item><description>
             The <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphMouseUp"/> event fires.
             </description></item>
            
             </list>
            
             <para>
             When this property is set to <see cref="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.DoNothing"/>, clicking on a vertex
             results in the following sequence:
             </para>
            
             <list type="bullet">
            
             <item><description>
             The <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphMouseDown"/> event fires.
             </description></item>
            
             <item><description>
             The <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexClick"/> event fires.
             </description></item>
            
             <item><description>
             The <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphMouseUp"/> event fires.
             </description></item>
            
             </list>
            
             <para>
             Set this property to <see cref="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.DoNothing"/> if you want to disable
             all mouse interactions, or if you want to customize the click behavior.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Smrf.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Smrf.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.InvertSelection"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexOrEdgeIsSelected(Smrf.NodeXL.Core.IMetadataProvider)"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
             <seealso cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges">
             <summary>
             Gets or sets a flag specifying whether selecting or deselecting a
             vertex with the mouse also selects or deselects its incident edges.
             </summary>
            
             <value>
             true if selecting or deselecting a vertex with the mouse also selects
             or deselects its incident edges, false if the incident edges are not
             affected.
             </value>
            
             <remarks>
             See the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/> property for details on how vertices
             can be selected and deselected with the mouse.
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Smrf.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Smrf.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.InvertSelection"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexOrEdgeIsSelected(Smrf.NodeXL.Core.IMetadataProvider)"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
             <seealso cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.AllowVertexDrag">
             <summary>
             Gets or sets a flag indicating whether selected vertices can be moved
             by dragging them with the mouse.
             </summary>
            
             <value>
             true if selected vertices can be moved by dragging them with the mouse,
             false otherwise.  The default value is true.
             </value>
            
             <remarks>
             When this property is true and <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/> is set to <see cref="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.Select"/> or <see cref="F:Smrf.NodeXL.Visualization.Wpf.MouseMode.AddToSelection"/>, the user
             can move the selected vertices by clicking one of them and dragging
             them with the mouse.
            
             <para>
             The dragged vertices and their incident edges are redrawn, but no other
             vertices or edges are affected.
             </para>
            
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ShowVertexToolTips">
             <summary>
             Gets or sets a value indicating whether vertex tooltips should be
             shown.
             </summary>
            
             <value>
             true to show vertex tooltips.  The default value is false.
             </value>
            
             <remarks>
             A vertex tooltip is a tootip that appears when the mouse is hovered
             over a vertex.  Each vertex has its own tooltip.
            
             <para>
             To use simple text for tooltips, set <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ShowVertexToolTips"/>
             to true, then use Vertex.<see cref="M:Smrf.NodeXL.Core.IMetadataProvider.SetValue(System.String,System.Object)"/> to
             assign a tooltip string to each of the graph's vertices.  The key must
             be the reserved key ReservedMetadataKeys.<see cref="F:Smrf.NodeXL.Core.ReservedMetadataKeys.PerVertexToolTip"/> and the value must be
             the tooltip string for the vertex.
             </para>
            
             <para>
             To use a custom UIElement for tooltips instead of simple text, set <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ShowVertexToolTips"/> to true, then handle the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.PreviewVertexToolTipShown"/> event.  In your event handler, set
             the event argument's <see cref="P:Smrf.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs.VertexToolTip"/> to a UIElement that
             you create.  You can use the event argument's <see cref="P:Smrf.NodeXL.Core.VertexEventArgs.Vertex"/> property to customize the UIElement
             based on which vertex was hovered over.
             </para>
            
             <para>
             The <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseHover"/> and <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseLeave"/>
             events fires regardless of whether vertex tooltips are shown.
             </para>
            
             <para>
             Note that vertex tooltips are entirely independent of the standard
             tooltip exposed by FrameworkElement.ToolTip.
             </para>
            
             </remarks>
            
             <seealso cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.PreviewVertexToolTipShown"/>
             <seealso cref="T:Smrf.NodeXL.Visualization.Wpf.VertexToolTipShownEventArgs"/>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphScale">
             <summary>
             Gets or sets a value that determines the scale of the graph's vertices
             and edges.
             </summary>
            
             <value>
             A value that determines the scale of the graph's vertices and edges.
             Must be between <see cref="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MinimumGraphScale"/> and <see cref="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MaximumGraphScale"/>.  The default value is 1.0.
             </value>
            
             <remarks>
             If the value is anything besides 1.0, the graph's vertices and edges
             are shrunk while their positions remain the same.  If it is set to 0.5,
             for example, the vertices are half their normal size and the edges are
             half their normal width.  The overall size of the graph is not
             affected.
            
             <para>
             The <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphScaleChanged"/> event fires when this property is
             changed.
             </para>
            
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoom">
             <summary>
             Gets or sets a value that determines the zoom level of the graph.
             </summary>
            
             <value>
             A value that determines the zoom level of the graph.  Must be between
             <see cref="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MinimumGraphZoom"/> and <see cref="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MaximumGraphZoom"/>.
             The default value is 1.0.
             </value>
            
             <remarks>
             This property gets set automatically when the user spins the mouse
             wheel.
            
             <para>
             The <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoomChanged"/> event fires when this property is
             changed, either programatically or with the mouse wheel.
             </para>
            
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices">
             <summary>
             Gets a collection of the graph's selected vertices.
             </summary>
            
             <value>
             A collection of the graph's selected vertices.
             </value>
            
             <remarks>
             If there are no selected vertices, the returned collection has zero
             elements.  The returned value is never null.
            
             <para>
             The returned collection should be considered read-only.  To select a
             vertex, use <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Smrf.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/> or a related method.
             </para>
            
             <para>
             The returned collection includes vertices that represents groups that
             have been collapsed using <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapseGroup(System.String,System.Boolean)"/>.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Smrf.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Smrf.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.InvertSelection"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexOrEdgeIsSelected(Smrf.NodeXL.Core.IMetadataProvider)"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
             <seealso cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges">
             <summary>
             Gets a collection of the graph's selected edges.
             </summary>
            
             <value>
             A collection of the graph's selected edges.
             </value>
            
             <remarks>
             If there are no selected edges, the returned collection has zero
             elements.  The returned value is never null.
            
             <para>
             The returned collection should be considered read-only.  To select an
             edge, use <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Smrf.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/> or a related method.
             </para>
            
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Smrf.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Smrf.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.InvertSelection"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexOrEdgeIsSelected(Smrf.NodeXL.Core.IMetadataProvider)"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged"/>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph">
             <summary>
             Gets a value indicating whether the graph is being laid out.
             </summary>
            
             <value>
             true if the graph is being laid out.
             </value>
            
             <remarks>
             If you call <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DrawGraph(System.Boolean)"/> with a layOutGraphFirst
             argument of true, the graph is laid out asynchronously before being
             drawn.  Several properties and methods, such as <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.Graph"/>
             and <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.Layout"/>, cannot be accessed while the graph is being
             laid out.  Check <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> or monitor the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.LayingOutGraph"/> and <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphLaidOut"/> events before
             accessing those properties and methods.
            
             <para>
             The <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.LayingOutGraph"/> event fires before the graph layout
             begins.  The <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphLaidOut"/> event fires after the graph
             layout completes.
             </para>
            
             <para>
             Typically, an application will populate and draw the graph in the load
             event of the Window or Form, and use the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.LayingOutGraph"/>
             and <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphLaidOut"/> events to disable and enable any
             controls that might be used to lay out and draw the graph again.
             </para>
            
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphDrawer">
             <summary>
             Do not use this property.  It is for internal use only.
             </summary>
            
             <value>
             Do not use this property.  It is for internal use only.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapsedGroups">
             <summary>
             Gets the collapsed groups.
             </summary>
            
             <returns>
             A read-only Dictionary of the groups that are collapsed.  The key is
             the group name that was passed to <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapseGroup(System.String,System.Boolean)"/> and the
             value is the vertex that represents the collapsed group.
             </returns>
            
             <remarks>
             The Dictionary must not be modified.  To collapse a group, call <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapseGroup(System.String,System.Boolean)"/>.
             </remarks>
            
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CollapseGroup(System.String,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ExpandGroup(System.String,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsCollapsedGroup(System.String)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectCollapsedGroup(System.String)"/>
        </member>
        <member name="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectionChanged">
             <summary>
             Occurs when the selection state of a vertex or edge changes.
             </summary>
            
             <remarks>
             This event occurs when one or more of the graph's vertices or edges are
             selected or deselected.  Updated arrays of the graph's selected
             vertices and edges can be obtained from the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/> and <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/> properties.
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Smrf.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Smrf.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.InvertSelection"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexOrEdgeIsSelected(Smrf.NodeXL.Core.IMetadataProvider)"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
        </member>
        <member name="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphMouseDown">
             <summary>
             Occurs when the mouse pointer is within the graph and a mouse button
             is pressed.
             </summary>
            
             <remarks>
             See <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/> and <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges"/> for details on how vertices are
             selected with the mouse.
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetVertexSelected(Smrf.NodeXL.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetEdgeSelected(Smrf.NodeXL.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SetSelected(System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IVertex},System.Collections.Generic.IEnumerable{Smrf.NodeXL.Core.IEdge})"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.DeselectAll"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.InvertSelection"/>
             <seealso cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexOrEdgeIsSelected(Smrf.NodeXL.Core.IMetadataProvider)"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedEdges"/>
        </member>
        <member name="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphMouseUp">
             <summary>
             Occurs when the mouse pointer is within the graph and a mouse button
             is released.
             </summary>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
        </member>
        <member name="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexClick">
             <summary>
             Occurs when a vertex is clicked.
             </summary>
            
             <remarks>
             In your event handler, do not change the selected state of the clicked
             vertex.  That happens automatically.  An exception is thrown if you
             attempt to do this.
             </remarks>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
        </member>
        <member name="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexDoubleClick">
             <summary>
             Occurs when a vertex is double-clicked.
             </summary>
            
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseMode"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.MouseAlsoSelectsIncidentEdges"/>
             <seealso cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.SelectedVertices"/>
        </member>
        <member name="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseHover">
             <summary>
             Occurs when the mouse pointer hovers over a vertex.
             </summary>
            
             <remarks>
             This event occurs when the mouse pointer hovers over a vertex.  If the
             mouse is moved to another vertex, this event fires again.  If the mouse
             is left hovering over the vertex for a predetermined period or is moved
             away from the vertex, a <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseLeave"/> event occurs.
            
             <para>
             If <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ShowVertexToolTips"/> is true, hovering the mouse over a
             vertex causes the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseHover"/> event to fire,
             followed by <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.PreviewVertexToolTipShown"/>.  If <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ShowVertexToolTips"/> is false, only the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseHover"/> event fires.
             </para>
            
             </remarks>
            
             <seealso cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseLeave"/>
        </member>
        <member name="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseLeave">
             <summary>
             Occurs when the mouse pointer is left hovering over a vertex for a
             predetermined period or is moved away from all vertices.
             </summary>
            
             <remarks>
             Hovering the mouse over a vertex causes the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseHover"/> event to fire.  If the mouse is left
             hovering over the vertex for a predetermined period or is moved away
             from the vertex, the <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseLeave"/> event fires.
             </remarks>
            
             <seealso cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexMouseHover"/>
        </member>
        <member name="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.PreviewVertexToolTipShown">
             <summary>
             Occurs when the mouse pointer hovers over a vertex but before a vertex
             tooltip is shown.
             </summary>
            
             <remarks>
             See <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ShowVertexToolTips"/> for information on how to show
             and customize vertex tooltips.
             </remarks>
        </member>
        <member name="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoomChanged">
             <summary>
             Occurs when the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoom"/> property is changed.
             </summary>
            
             <remarks>
             This event occurs when <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphZoom"/> is changed
             programatically or with the mouse wheel.
             </remarks>
        </member>
        <member name="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphScaleChanged">
             <summary>
             Occurs when the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphScale"/> property is changed.
             </summary>
            
             <remarks>
             This event occurs when <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphScale"/> is changed.
             </remarks>
        </member>
        <member name="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphTranslationChanged">
            <summary>
            Occurs when the graph is moved with the mouse.
            </summary>
        </member>
        <member name="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.LayingOutGraph">
             <summary>
             Occurs before graph layout begins.
             </summary>
            
             <remarks>
             Graph layout occurs asynchronously.  This event fires before graph
             layout begins.
            
             <para>
             The <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphLaidOut"/> event fires after the graph layout is
             complete.
             </para>
            
             <para>
             The <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> property can also be used to
             determine whether the graph is being laid out.
             </para>
            
             </remarks>
        </member>
        <member name="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphLaidOut">
             <summary>
             Occurs after graph layout completes.
             </summary>
            
             <remarks>
             Graph layout occurs asynchronously.  This event fires when the graph
             is successfully laid out or an error occurs.
            
             <para>
             Check the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property to
             determine whether an error occurred while laying out the graph.
             </para>
            
             <para>
             The <see cref="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.LayingOutGraph"/> event fires before graph layout
             begins.
             </para>
            
             <para>
             The <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.IsLayingOutGraph"/> property can also be used to
             determine whether the graph is being laid out.
             </para>
            
             </remarks>
        </member>
        <member name="E:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VerticesMoved">
             <summary>
             Occurs after one or more vertices are moved to a new location with the
             mouse.
             </summary>
            
             <remarks>
             This event is fired when the user releases the mouse button after
             dragging one or more vertices to a new location.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VertexDrawer">
             <summary>
             Gets the <see cref="T:Smrf.NodeXL.Visualization.Wpf.VertexDrawer"/> used to draw the graph's
             vertices.
             </summary>
            
             <value>
             The <see cref="T:Smrf.NodeXL.Visualization.Wpf.VertexDrawer"/> used to draw the graph's vertices.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.EdgeDrawer">
             <summary>
             Gets the <see cref="T:Smrf.NodeXL.Visualization.Wpf.EdgeDrawer"/> used to draw the graph's edges.
             </summary>
            
             <value>
             The <see cref="T:Smrf.NodeXL.Visualization.Wpf.EdgeDrawer"/> used to draw the graph's edges.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphRectangle">
             <summary>
             Gets the rectangle that defines the bounds of the graph.
             </summary>
            
             <value>
             The rectangle that defines the bounds of the graph.
             </value>
            
             <remarks>
             The rectangle's dimensions are not affected by either of the transforms
             used for the control's render transform, <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ScaleTransformForRender"/> or <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.TranslateTransformForRender"/>.  See <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.CreateTransforms"/> for details. 
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ScaleTransformForRender">
             <summary>
             Gets the ScaleTransform used for the control's render transform.
             </summary>
            
             <value>
             A ScaleTransform object that controls the graph's zoom.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.TranslateTransformForRender">
             <summary>
             Gets the TranslateTransform used for the control's render transform.
             </summary>
            
             <value>
             A TranslateTransform object that controls the position of the graph.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ShouldBundleEdges">
             <summary>
             Gets a flag specifying whether edges should be bundled.
             </summary>
            
             <remarks>
             true if edges should be bundled.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ClassName">
             <summary>
             Gets the full name of the class.
             </summary>
            
             <value>
             The full name of the class, suitable for use in error messages.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ArgumentChecker">
             <summary>
             Gets a new initialized <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ArgumentChecker"/> object.
             </summary>
            
             <value>
             A new initialized <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.ArgumentChecker"/> object.
             </value>
            
             <remarks>
             The returned object can be used to check the validity of property
             values and method parameters.
             </remarks>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.VisualChildrenCount">
             <summary>
             Gets the number of visual child elements within this element.
             </summary>
            
             <value>
             The number of visual child elements for this element.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.LayoutState">
            <summary>
            Indicates the state of the graph's layout.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.LayoutState.Stable">
            <summary>
            The graph is empty, or it's layout is complete and it has been
            drawn.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.LayoutState.LayoutRequired">
            <summary>
            The graph needs to be laid out.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.LayoutState.LayingOut">
            <summary>
            The graph is being asynchronously laid out.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.LayoutState.LayoutCompleted">
            <summary>
            The asynchronous layout has completed and now the graph needs to be
            drawn.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.LayoutState.TransformRequired">
            <summary>
            Same as Stable, but the control has been resized and now the
            graph's layout needs to be transformed to the new size.
            </summary>
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphImageCenterer">
             <summary>
             Centers a graph image for the <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/> and later
             restores the original graph location.
             </summary>
            
             <remarks>
             This prepares the <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/> for being saved as an image.
             It adjusts the control's transforms so that the image will be centered on
             the same point on the graph that the control is centered on.  This prevents
             an unwanted graph shift when the image has dimensions different from those
             of the control.
            
             <para>
             Because the NodeXLControl's transforms are not public, this class is
             embedded within the control.
             </para>
            
             <para>
             Pass an image size to <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphImageCenterer.CenterGraphImage(System.Windows.Size)"/>, which immediately
             centers the graph within the image dimensions.  Call <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphImageCenterer.RestoreCenter"/> to restore the graph to its original location.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphImageCenterer.#ctor(Smrf.NodeXL.Visualization.Wpf.NodeXLControl)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphImageCenterer"/>
             class.
             </summary>
            
             <param name="nodeXLControl">
             The control for which a graph image will be created.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphImageCenterer.CenterGraphImage(System.Windows.Size)">
             <summary>
             Adjusts the control's transforms so that the image will be centered on
             the same point on the graph that the control is centered on.
             </summary>
            
             <param name="imageSize">
             The size of the image.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphImageCenterer.RestoreCenter">
             <summary>
             Restores the control so the graph is in its original location.
             </summary>
            
             <remarks>
             If <see cref="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphImageCenterer.CenterGraphImage(System.Windows.Size)"/> hasn't been called, this method does
             nothing.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphImageCenterer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphImageCenterer.m_oNodeXLControl">
            The control for which a graph image will be created.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphImageCenterer.m_dOriginalTranslateTransformForRenderX">
            Original transform values, set by CenterGraphImage().
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphImageCenterer.m_dOriginalTranslateTransformForRenderY">
            
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphImageCenterer.m_dOriginalScaleTransformForRenderCenterX">
            
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphImageCenterer.m_dOriginalScaleTransformForRenderCenterY">
            
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl">
             <summary>
             Adds graph axes to a <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/>.
             </summary>
            
             <remarks>
             This control wraps a <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/> in a
             Grid that also includes <see cref="T:Smrf.WpfGraphicsLib.Axis"/> controls for the x- and y-axes.
            
             <para>
             The axes display default ranges.  You should call <see cref="M:Smrf.WpfGraphicsLib.Axis.SetRange(System.Double,System.Double,System.Double,System.Double,System.Boolean)"/> on each of the <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.XAxis"/> and <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.YAxis"/> objects to set the range of values being displayed in the
             <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/>.
             </para>
            
             <para>
             The <see cref="T:Smrf.WpfGraphicsLib.Axis"/> controls automatically adjust themselves when the
             graph is zoomed or translated.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.#ctor">
             <overloads>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl"/>
             class.
             </overloads>
            
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl"/>
             class.
             </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.#ctor(Smrf.NodeXL.Visualization.Wpf.NodeXLControl)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl"/>
             class with a specified <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.NodeXLControl"/>.
             </summary>
            
             <param name="nodeXLControl">
             The <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.NodeXLControl"/> to embed within the control.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.SetFont(System.Windows.Media.Typeface,System.Double)">
             <summary>
             Sets the font used to draw the axis labels and values.
             </summary>
            
             <param name="typeface">
             The Typeface to use.
             </param>
            
             <param name="labelEmSize">
             The font size to use for the axis labels, in ems.  (A slightly smaller
             size is used for the axis values.)
             </param>
            
             <remarks>
             The default font is the SystemFonts.CaptionFontFamily at size 10.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.InvalidateAxes">
            <summary>
            Invalidates the axis visuals.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.m_oNodeXLControl_GraphZoomChanged(System.Object,System.EventArgs)">
             <summary>
             Handles the GraphZoomChanged event on the m_oNodeXLControl control.
             </summary>
            
             <param name="oSender">
             Standard event argument.
             </param>
            
             <param name="oEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.m_oNodeXLControl_GraphTranslationChanged(System.Object,System.EventArgs)">
             <summary>
             Handles the GraphTranslationChanged event on the m_oNodeXLControl
             control.
             </summary>
            
             <param name="oSender">
             Standard event argument.
             </param>
            
             <param name="oEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.m_oNodeXLControl">
            Embedded NodeXLControl.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.m_oXAxis">
            x-axis.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.m_oYAxis">
            y-axis.
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.NodeXLControl">
             <summary>
             Gets the embedded <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/>.
             </summary>
            
             <value>
             The embedded <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/>.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.ShowAxes">
             <summary>
             Gets or sets a flag specifying whether the graph axes should be shown.
             </summary>
            
             <value>
             true to show the graph axes, false to hide them.  They are shown by
             default.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.XAxis">
             <summary>
             Gets the x-axis.
             </summary>
            
             <value>
             The x-axis, as an <see cref="T:Smrf.WpfGraphicsLib.Axis"/>.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.NodeXLWithAxesControl.YAxis">
             <summary>
             Gets the y-axis.
             </summary>
            
             <value>
             The y-axis, as an <see cref="T:Smrf.WpfGraphicsLib.Axis"/>.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.DoubleClickedVertexInfo">
            <summary>
            Stores information about the vertex that was most recently double-clicked
            in the <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/>.
            </summary>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.DoubleClickedVertexInfo.#ctor(Smrf.NodeXL.Core.IVertex)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Visualization.Wpf.DoubleClickedVertexInfo"/>  class.
             </summary>
            
             <param name="vertex">
             The vertex that was double-clicked.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.DoubleClickedVertexInfo.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.DoubleClickedVertexInfo.m_oVertex">
            The vertex that was double-clicked.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.DoubleClickedVertexInfo.m_decSelectedSubgraphLevels">
            The number of subgraph levels that are selected for the double-clicked
            vertex.
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.DoubleClickedVertexInfo.Vertex">
             <summary>
             Gets the vertex that was double-clicked.
             </summary>
            
             <value>
             The vertex that was double-clicked.  Never null.
             </value>
        </member>
        <member name="P:Smrf.NodeXL.Visualization.Wpf.DoubleClickedVertexInfo.Levels">
             <summary>
             Gets or sets the number of subgraph levels selected for the
             double-clicked vertex.
             </summary>
            
             <value>
             The number of subgraph levels that are selected for the double-clicked
             vertex.  See SubgraphCalculator.GetSubgraph() for more details on
             subgraph levels.  The default value is 0.0.
             </value>
        </member>
        <member name="T:Smrf.NodeXL.Visualization.Wpf.GraphImageScaler">
             <summary>
             Sets the graph scale on a <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/> and later restores
             the original graph scale.
             </summary>
            
             <remarks>
             This prepares the <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/> for being saved as an image.
             It adjusts the control's graph scale so that the graph's vertices and edges
             will be the same relative size in the image that they are in the control.
            
             <para>
             Call <see cref="M:Smrf.NodeXL.Visualization.Wpf.GraphImageScaler.SetGraphScale(System.Int32,System.Int32,System.Double)"/> before saving the image, then call <see cref="M:Smrf.NodeXL.Visualization.Wpf.GraphImageScaler.RestoreGraphScale"/> to restore the original graph scale.
             </para>
            
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.GraphImageScaler.#ctor(Smrf.NodeXL.Visualization.Wpf.NodeXLControl)">
             <summary>
             Initializes a new instance of the <see cref="T:Smrf.NodeXL.Visualization.Wpf.GraphImageScaler"/>
             class.
             </summary>
            
             <param name="nodeXLControl">
             The control for which a graph image will be created.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.GraphImageScaler.SetGraphScale(System.Int32,System.Int32,System.Double)">
             <summary>
             Adjusts the graph scale on a <see cref="T:Smrf.NodeXL.Visualization.Wpf.NodeXLControl"/> so that the
             graph's vertices and edges will be the same relative size in an image
             that they are in the control.
             </summary>
            
             <param name="bitmapWidthPx">
             Width of the bitmap image, in pixels.  Must be greater than 0.
             </param>
            
             <param name="bitmapHeightPx">
             Height of the bitmap image, in pixels.  Must be greater than 0.
             </param>
            
             <param name="screenDpi">
             The DPI of the screen.  Sample: 96.0.
             </param>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.GraphImageScaler.RestoreGraphScale">
             <summary>
             Restores the control's original <see cref="P:Smrf.NodeXL.Visualization.Wpf.NodeXLControl.GraphScale"/>.
             </summary>
            
             <remarks>
             If <see cref="M:Smrf.NodeXL.Visualization.Wpf.GraphImageScaler.SetGraphScale(System.Int32,System.Int32,System.Double)"/> hasn't been called, this method does
             nothing.
             </remarks>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.GraphImageScaler.PinScale(System.Double)">
             <summary>
             Pins a scale value to an allowable range.
             </summary>
            
             <param name="dScale">
             The scale value to pin.
             </param>
            
             <returns>
             The pinned scale value.
             </returns>
        </member>
        <member name="M:Smrf.NodeXL.Visualization.Wpf.GraphImageScaler.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.GraphImageScaler.m_oNodeXLControl">
            The control for which a graph image will be created.
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.GraphImageScaler.m_dOriginalGraphScale">
            Original GraphDrawer.GraphScale value, set by SetGraphScale().
        </member>
        <member name="F:Smrf.NodeXL.Visualization.Wpf.GraphImageScaler.m_dOriginalGroupLabelScale">
            Original GroupDrawer.LabelScale value, set by SetGraphScale().
        </member>
    </members>
</doc>
