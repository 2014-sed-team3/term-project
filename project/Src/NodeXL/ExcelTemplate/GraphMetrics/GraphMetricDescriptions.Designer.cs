//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Smrf.NodeXL.ExcelTemplate{
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class GraphMetricDescriptions {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal GraphMetricDescriptions() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Smrf.NodeXL.ExcelTemplate.GraphMetrics.GraphMetricDescriptions", typeof(GraphMetricDescriptions).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;
        ///A vertex that occurs on many shortest paths between other vertices has a larger betweenness centrality than vertices that do not.  Betweenness centrality is defined in this article:
        ///&lt;/p&gt;
        ///
        ///&lt;div class=&quot;divUrl&quot;&gt;
        ///&lt;a href=&quot;http://en.wikipedia.org/wiki/Centrality#Betweenness_centrality&quot;&gt;
        ///http://en.wikipedia.org/wiki/Centrality#Betweenness_centrality
        ///&lt;/a&gt;
        ///&lt;/div&gt;
        ///
        ///&lt;p&gt;
        ///NodeXL uses the algorithm described in the paper &quot;A Faster Algorithm for Betweenness Centrality,&quot; by Ulrik Brandes.  The paper can be  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BrandesFastCentralities {
            get {
                return ResourceManager.GetString("BrandesFastCentralities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;
        ///Clustering coefficient is defined in this article:
        ///&lt;/p&gt;
        ///
        ///&lt;div class=&quot;divUrl&quot;&gt;
        ///&lt;a href=&quot;http://en.wikipedia.org/wiki/Clustering_coefficient&quot;&gt;
        ///http://en.wikipedia.org/wiki/Clustering_coefficient
        ///&lt;/a&gt;
        ///&lt;/div&gt;
        ///
        ///&lt;p&gt;
        ///From the article:
        ///&lt;/p&gt;
        ///
        ///&lt;div class=&quot;divQuote&quot;&gt;
        ///&quot;The clustering coefficient of a vertex in a graph quantifies how close the vertex and its neighbors are to being a clique (complete graph).&quot;
        ///&lt;/div&gt;
        ///
        ///&lt;p&gt;
        ///Self-loops, which would render the clustering coefficients invalid, are skippe [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ClusteringCoefficient {
            get {
                return ResourceManager.GetString("ClusteringCoefficient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;
        ///In an undirected graph, a vertex&apos;s degree is the number of edges incident to the vertex.  In a directed graph, degree is undefined and is not calculated.
        ///&lt;/p&gt;
        ///
        ///&lt;p&gt;
        ///A self-loop in an undirected graph is counted twice when a vertex&apos;s degree is calculated.
        ///&lt;/p&gt;.
        /// </summary>
        internal static string Degree {
            get {
                return ResourceManager.GetString("Degree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;
        ///In a directed graph, an edge from vertex A to vertex B is reciprocated if the graph also has an edge from vertex B to vertex A.  In an undirected graph, edge reciprocation is undefined and is not calculated.
        ///&lt;/p&gt;
        ///
        ///&lt;p&gt;
        ///A self-loop is never reciprocated.
        ///&lt;/p&gt;.
        /// </summary>
        internal static string EdgeReciprocation {
            get {
                return ResourceManager.GetString("EdgeReciprocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;
        ///Eigenvector centrality is defined in this article:
        ///&lt;/p&gt;
        ///
        ///&lt;div class=&quot;divUrl&quot;&gt;
        ///&lt;a href=&quot;http://en.wikipedia.org/wiki/Eigenvector_centrality#Eigenvector_centrality&quot;&gt;
        ///http://en.wikipedia.org/wiki/Eigenvector_centrality#Eigenvector_centrality
        ///&lt;/a&gt;
        ///&lt;/div&gt;
        ///
        ///&lt;p&gt;
        ///From the article:
        ///&lt;/p&gt;
        ///
        ///&lt;div class=&quot;divQuote&quot;&gt;
        ///&quot;Eigenvector centrality is a measure of the importance of a node in a network. It assigns relative scores to all nodes in the network based on the principle that connections to high-scoring  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EigenvectorCentrality {
            get {
                return ResourceManager.GetString("EigenvectorCentrality", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;
        ///Group metrics include vertex counts, edge counts, geodesic distances and graph density for each of the graph&apos;s groups.  They are calculated as if the vertices and edges outside the group do not exist.  These metrics get inserted into the Groups worksheet.
        ///&lt;/p&gt;
        ///
        ///&lt;p&gt;
        ///Group metrics also include the number of edges within each group and the number of edges between each pair of groups.  These metrics get inserted into the Group Edges worksheet, which gets added to the workbook the first time you calcula [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GroupMetrics {
            get {
                return ResourceManager.GetString("GroupMetrics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;
        ///In a directed graph, a vertex&apos;s in-degree is the number of incoming edges incident to the vertex.  In an undirected graph, in-degree is undefined and is not calculated.
        ///&lt;/p&gt;
        ///
        ///&lt;p&gt;
        ///A self-loop in a directed graph is counted once as an incoming edge (in-degree) and once as an outgoing edge (out-degree).
        ///&lt;/p&gt;.
        /// </summary>
        internal static string InDegree {
            get {
                return ResourceManager.GetString("InDegree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;
        ///In a directed graph, a vertex&apos;s out-degree is the number of outgoing edges incident to the vertex.  In an undirected graph, out-degree is undefined and is not calculated.
        ///&lt;/p&gt;
        ///
        ///&lt;p&gt;
        ///A self-loop in a directed graph is counted once as an outgoing edge (out-degree) and once as an incoming edge (in-degree).
        ///&lt;/p&gt;.
        /// </summary>
        internal static string OutDegree {
            get {
                return ResourceManager.GetString("OutDegree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;
        ///The following overall metrics get inserted into the Overall Metrics worksheet:
        ///&lt;/p&gt;
        ///
        ///&lt;table&gt;
        ///
        ///&lt;tr&gt;
        ///	&lt;td&gt;Graph Type&lt;/td&gt;
        ///	&lt;td&gt;Directed or undirected.&lt;/td&gt;
        ///&lt;/tr&gt;
        ///
        ///&lt;tr&gt;
        ///	&lt;td&gt;Vertices&lt;/td&gt;
        ///	&lt;td&gt;The number of vertices in the graph.&lt;/td&gt;
        ///&lt;/tr&gt;
        ///
        ///&lt;tr&gt;
        ///	&lt;td&gt;Unique Edges&lt;/td&gt;
        ///	&lt;td&gt;The number of edges that do not have duplicates.&lt;/td&gt;
        ///&lt;/tr&gt;
        ///
        ///&lt;tr&gt;
        ///	&lt;td&gt;Edges With Duplicates&lt;/td&gt;
        ///	&lt;td&gt;The number of edges that have duplicates.&lt;/td&gt;
        ///&lt;/tr&gt;
        ///
        ///&lt;tr&gt;
        ///	&lt;td&gt;Total Edges&lt;/td&gt;
        ///	&lt;td&gt;The number of edges [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OverallMetrics {
            get {
                return ResourceManager.GetString("OverallMetrics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;
        ///PageRank measures the importance of each vertex within the graph using a link analysis algorithm developed by Larry Page.  It is described here:
        ///&lt;/p&gt;
        ///
        ///&lt;div class=&quot;divUrl&quot;&gt;
        ///&lt;a href=&quot;http://en.wikipedia.org/wiki/PageRank&quot;&gt;
        ///http://en.wikipedia.org/wiki/PageRank
        ///&lt;/a&gt;
        ///&lt;/div&gt;.
        /// </summary>
        internal static string PageRank {
            get {
                return ResourceManager.GetString("PageRank", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;
        ///In a directed graph, this is the number of adjacent vertices that are connected to the vertex with edges in both directions divided by the number of adjacent vertices.  In an undirected graph, this is undefined and is not calculated.
        ///&lt;/p&gt;.
        /// </summary>
        internal static string ReciprocatedVertexPairRatio {
            get {
                return ResourceManager.GetString("ReciprocatedVertexPairRatio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;
        ///&lt;span class=&quot;spnOptions&quot;&gt;This metric has options.&lt;/span&gt;  Click the Options button to specify them.
        ///&lt;/p&gt;
        ///	
        ///&lt;p&gt;
        ///You can have NodeXL find the top items in a worksheet, ranked by the numbers in a column of your choice.  These items get inserted into the Top Items worksheet, which gets added to the workbook the first time you calculate top items.
        ///&lt;/p&gt;.
        /// </summary>
        internal static string TopNBy {
            get {
                return ResourceManager.GetString("TopNBy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;
        ///If the workbook contains a Twitter search network imported via NodeXL, Data, Import, From Twitter Search Network, you can have NodeXL find the top URLs, domains, hashtags, words, word pairs, replied-to usernames, and mentioned usernames within the network&apos;s tweets, and the top tweeters in the network. These items get inserted into the Twitter Search Ntwrk Top Items* worksheet, which gets added to the workbook the first time you calculate Twitter search network top items.
        ///&lt;/p&gt;
        ///
        ///&lt;p&gt;
        ///Similar top item  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TwitterSearchNetworkTopItems {
            get {
                return ResourceManager.GetString("TwitterSearchNetworkTopItems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;
        ///&lt;span class=&quot;spnOptions&quot;&gt;This metric has options.&lt;/span&gt;  Click the Options button to specify them.
        ///&lt;/p&gt;
        ///	
        ///&lt;p&gt;
        ///If you have a text column on the Edges or Vertices worksheet, NodeXL will count the words in the column along with the pairs of words that occur next to each other.  The results get inserted into a new Words worksheet and a new Word Pairs worksheet.
        ///&lt;/p&gt;
        ///
        ///&lt;p&gt;
        ///For example, if your text column has these two cells:
        ///&lt;/p&gt;
        ///
        ///&lt;div style=&quot;margin-left: 2em&quot;&gt;
        ///The quick fox is brown&lt;br /&gt;
        ///The [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Words {
            get {
                return ResourceManager.GetString("Words", resourceCulture);
            }
        }
    }
}
